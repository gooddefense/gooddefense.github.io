{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"77c3bba18b6859d7a5197266691555a8999173f3","modified":1691032579905},{"_id":"source/_posts/Linux.md","hash":"0887556c6b4edafafd486df7eb95dc8abd2caceb","modified":1682340344861},{"_id":"source/_posts/C语言学习笔记.md","hash":"d43044af0ed6878c51103028877739c0ec358ce7","modified":1680440343445},{"_id":"source/_posts/.DS_Store","hash":"4dc461da2ecea3430529bf0da67a2b6bbfa92b84","modified":1675969589642},{"_id":"source/_posts/Java.md","hash":"0ab59ae6180750b13b0ce7362d73e8b8be68dfc3","modified":1701262335736},{"_id":"source/_posts/Maven.md","hash":"bf6697736291832500310f69dc019456d768d81f","modified":1703860628131},{"_id":"source/_posts/Android-APP.md","hash":"977eca992f287cabc677a045b2d0bd861035214f","modified":1701262772703},{"_id":"source/_posts/Java抽奖网站.md","hash":"130243cbb2174b316e6f6ac7e48f707604d97760","modified":1703860624968},{"_id":"source/_posts/PicGo图床搭建.md","hash":"49ba64adf7e24300dcaa03a2bcd14898d87e2345","modified":1691033007657},{"_id":"source/_posts/Redis.md","hash":"efbd1294205caeb733b0c1c34dd8594dd94f677a","modified":1701048627859},{"_id":"source/_posts/Mybatis.md","hash":"aa019594ba15fe64d39308997875ae0b9e50ee5a","modified":1701048675097},{"_id":"source/_posts/SpringBoot.md","hash":"3808b4007fe70c660ce758f85ac7d4d8ee890ba1","modified":1701048685622},{"_id":"source/_posts/git.md","hash":"ae31837a32e0e81b6fbfbcae3f76a7d1d31ac887","modified":1681040474000},{"_id":"source/_posts/canvas.md","hash":"78c5c0735753d80a034bd4e86f74bb9c936217b3","modified":1701048613491},{"_id":"source/_posts/hexo博客自定义.md","hash":"7ea07ea63db07ed262e3e4bc085ce4bf563ee43d","modified":1678376648831},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1675842067141},{"_id":"source/_posts/readme.md","hash":"910fb5e4305fb1a81877e65e26e92f6fe52281ed","modified":1701048811187},{"_id":"source/_posts/科学上网.md","hash":"f793e1d2cb04c3dbdb3004a14b365fb59257903e","modified":1678441052232},{"_id":"source/_posts/更新日志.md","hash":"b137f037845251640af84470ff6678c8495179a4","modified":1703418653061},{"_id":"source/_posts/用51单片机控制SG90舵机.md","hash":"7da0a54e8e3dd4bff2b4d5062975af914dd88a79","modified":1680440343463},{"_id":"source/_posts/markdown语法.md","hash":"e38ed4a1f901209d7f98cc22b2ce55aeb8719217","modified":1680440337362},{"_id":"source/_posts/我的博客说明.md","hash":"62ce3be0b5aab2aa0d74fba9409fd64371a4b675","modified":1676480934340},{"_id":"source/_posts/蓝牙Wi-Fi助手.md","hash":"e33ec7ec3de38017d31a72946aad8b7447398402","modified":1703315187904},{"_id":"source/_posts/项目计划.md","hash":"b264155aae1ef587c0b75b747ca51ed063790c3f","modified":1691164153637},{"_id":"source/categories/index.md","hash":"de31ce656e19a0bd629bde972122ef91ed42771d","modified":1676008195709},{"_id":"source/about/index.md","hash":"9889f10135979f553840a712a5d51345cbed5cab","modified":1678375053697},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670937168000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1670937168000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1670937168000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1670937168000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1670937168000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1670937168000},{"_id":"themes/fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1670937168000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1670937168000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1670937168000},{"_id":"themes/fluid/_config.yml","hash":"27eb985b00fd81801aec1e27e9f8a40b506f7320","modified":1678376270858},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1670937168000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1670937168000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1670937168000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1670937168000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1670937168000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1670937168000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1670937168000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1670937168000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1670937168000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1670937168000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1670937168000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1670937168000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1670937168000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1670937168000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1670937168000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1670937168000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1670937168000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1670937168000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1670937168000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1670937168000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1670937168000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1670937168000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1670937168000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1670937168000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1670937168000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1670937168000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1670937168000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1670937168000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1670937168000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1670937168000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1670937168000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1670937168000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1670937168000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1670937168000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1670937168000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1670937168000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1670937168000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1670937168000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1670937168000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1670937168000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1670937168000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1670937168000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1670937168000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1670937168000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1670937168000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1670937168000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1670937168000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1670937168000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1670937168000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1670937168000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1670937168000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1670937168000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1670937168000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1670937168000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1670937168000},{"_id":"public/atom.xml","hash":"2a3172e33b0506005c5e0657478d010984b4eb99","modified":1704092765744},{"_id":"public/local-search.xml","hash":"5fe0171fb7ac189921bbd6e5daa3ed50c6650a83","modified":1704092765744},{"_id":"public/about/index.html","hash":"12399f79b9e82d51d744d12981f3e7a365455806","modified":1704092765744},{"_id":"public/archives/index.html","hash":"c9abbde2c4c9587e7804f0fe4d434ea46323bfa7","modified":1704092765744},{"_id":"public/archives/page/3/index.html","hash":"1a37cddb3ba54f3b7af26feee5ffc4a12286d441","modified":1704092765744},{"_id":"public/archives/2023/page/2/index.html","hash":"3ecacee584f354fa0321e17f21574d2f55d865bc","modified":1704092765744},{"_id":"public/archives/2023/index.html","hash":"efcf863f3652b5c8df79997317750c017d0ec1ec","modified":1704092765744},{"_id":"public/archives/2023/page/3/index.html","hash":"2065f07c1a02c2fb8ed046f67e3d10a6a1b20187","modified":1704092765744},{"_id":"public/archives/2023/02/index.html","hash":"56de6f40530c07f425510886bfba5f0bcd8f3b71","modified":1704092765744},{"_id":"public/archives/2023/03/index.html","hash":"c2a381ee95d69f6d14c08d570c2cfd5efab02cf2","modified":1704092765744},{"_id":"public/archives/page/2/index.html","hash":"72000c15c48e433a26167708731f54794a6dadb9","modified":1704092765744},{"_id":"public/archives/2023/04/index.html","hash":"81aa8fd01cca720fdb53c097c255a52782c79769","modified":1704092765744},{"_id":"public/archives/2023/05/index.html","hash":"d7e7ecb497e965af682958daaa97e47d2e544afa","modified":1704092765744},{"_id":"public/archives/2023/11/index.html","hash":"219de0cb730f13d8c25cd8d85838207f1a7bb250","modified":1704092765744},{"_id":"public/categories/编程语言及工具笔记/index.html","hash":"79929c80c185887cfadb89442cd2f4af065f4737","modified":1704092765744},{"_id":"public/categories/APP-小程序/index.html","hash":"b3dfffe3ba0c23e2f30aed8cb8e42a04be8b08e6","modified":1704092765744},{"_id":"public/categories/后端/index.html","hash":"4014d7ed059969ff93c34f94ed903093809080bf","modified":1704092765744},{"_id":"public/categories/编程语言及工具/index.html","hash":"e8a235d731dc9c6f2548156650cf7b6124d109d5","modified":1704092765744},{"_id":"public/categories/前后端项目/index.html","hash":"a5427604341e2ca46acdf6c2684ed064bc387d69","modified":1704092765744},{"_id":"public/categories/Hexo/index.html","hash":"456bd1061b4c840f44716b83ecdbc73b85e1b8c8","modified":1704092765744},{"_id":"public/categories/前端/index.html","hash":"3a7afb64dd6c21e4f6c117f632572122ef0c1760","modified":1704092765744},{"_id":"public/categories/51单片机/index.html","hash":"5aac8e09f02c1a083653061ea118e1861f06814f","modified":1704092765744},{"_id":"public/categories/博客介绍及更新日志/index.html","hash":"838bd305970dd4189e8b1505cb339952f189d676","modified":1704092765744},{"_id":"public/categories/学习计划/index.html","hash":"67b629820caf0d70e598c7bc93ec93957312971c","modified":1704092765744},{"_id":"public/page/3/index.html","hash":"88bf0146c350d9406d0e9e2a84b4ddbc4bbe9435","modified":1704092765744},{"_id":"public/404.html","hash":"bb13b85d6cea59ee26949eb0788a0d06de61799c","modified":1704092765744},{"_id":"public/tags/index.html","hash":"55b873a87ab3eb44d3b88e240ad9459178843070","modified":1704092765744},{"_id":"public/links/index.html","hash":"2dcba216bd4c73a071ccb68525cec2afd5f6e3eb","modified":1704092765744},{"_id":"public/categories/index.html","hash":"52d1273c9934ad2c1b3cc0f3ba8102bbc1b9dcaf","modified":1704092765744},{"_id":"public/2023/11/29/蓝牙Wi-Fi助手/index.html","hash":"4f545891274ec7a9a0474d35e8b2f0269631789e","modified":1704092765744},{"_id":"public/2023/11/29/Android-APP/index.html","hash":"95b2ac6fdb4201a2b08b9d3e7aa3833efe19e4c2","modified":1704092765744},{"_id":"public/2023/11/26/canvas/index.html","hash":"6784ee9fe05b09d1bbf34fe79e12763f42f7182a","modified":1704092765744},{"_id":"public/2023/11/24/Mybatis/index.html","hash":"c8124edc181150d1ae8293ee5555197f62b3a689","modified":1704092765744},{"_id":"public/2023/11/24/Redis/index.html","hash":"c46ccd85c7b3ad80a79a14507355626a0e810931","modified":1704092765744},{"_id":"public/2023/11/24/SpringBoot/index.html","hash":"1541ef885f16ffe891fba26e59b2b65b1b7f17bf","modified":1704092765744},{"_id":"public/2023/11/20/Java抽奖网站/index.html","hash":"7a3f6cae9eb34d7728df8673e4110950a9a8d520","modified":1704092765744},{"_id":"public/2023/11/17/Java/index.html","hash":"ea22acceb5d4068868712d2a4b618f9e092da7dc","modified":1704092765744},{"_id":"public/2023/11/24/Maven/index.html","hash":"ff4ac6a7212a34346048bebe1ec5da4810e2bb94","modified":1704092765744},{"_id":"public/2023/05/06/项目计划/index.html","hash":"ec212e73b4ef0663bd8eb400021c04c16cf0e951","modified":1704092765744},{"_id":"public/2023/04/24/Linux/index.html","hash":"8777836df1e3eaaca2ddd578d8f62407e93d8d97","modified":1704092765744},{"_id":"public/2023/04/08/git/index.html","hash":"5b23755af498c99b1ad5d23807d3b5d9dbae664b","modified":1704092765744},{"_id":"public/2023/04/24/PicGo图床搭建/index.html","hash":"f95f292485532263f9065bc32a612c7182ef03a5","modified":1704092765744},{"_id":"public/2023/03/27/markdown语法/index.html","hash":"7f8a6393d0ca7d74d7c1f83a67e600960fef1812","modified":1704092765744},{"_id":"public/2023/03/27/C语言学习笔记/index.html","hash":"5d22e2a0378987e044cfe84265cc2f44042a258b","modified":1704092765744},{"_id":"public/2023/03/10/科学上网/index.html","hash":"a7260373f906ee7e7637f0aca678902af021dc5a","modified":1704092765744},{"_id":"public/2023/03/07/用51单片机控制SG90舵机/index.html","hash":"bf1885e76b14d03132f2160ca0450dc448467aa3","modified":1704092765744},{"_id":"public/2023/03/07/hexo博客自定义/index.html","hash":"ba5d25864fee3868fd805d8314e5726be3db125b","modified":1704092765744},{"_id":"public/2023/02/15/更新日志/index.html","hash":"dd51165e396b50e9cac41f318f8fa7f22874254c","modified":1704092765744},{"_id":"public/2023/02/10/我的博客说明/index.html","hash":"034459067e9a1193ba7d06e4da504957faf8a9c8","modified":1704092765744},{"_id":"public/2023/02/09/readme/index.html","hash":"e003d7ceff2b60fa7d1e2356bd64276391fd171c","modified":1704092765744},{"_id":"public/2023/02/08/hello-world/index.html","hash":"a923f9db773f90c219539515a1cee88bb4b196f3","modified":1704092765744},{"_id":"public/index.html","hash":"7fa891fec51d21eb739d0b6020d3b758524f74d1","modified":1704092765744},{"_id":"public/page/2/index.html","hash":"65e6146a98e5a75464ba39828c49fb7621e824af","modified":1704092765744},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1704092765744},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1704092765744},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1704092765744},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1704092765744},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1704092765744},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1704092765744},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1704092765744},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1704092765744},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1704092765744},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1704092765744},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1704092765744},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1704092765744},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1704092765744},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1704092765744},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1704092765744},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1704092765744},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1704092765744},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1704092765744}],"Category":[{"name":"编程语言及工具笔记","_id":"clquku1e500046ht0dki00hzc"},{"name":"APP & 小程序","_id":"clquku1e700086ht035njfwjt"},{"name":"后端","_id":"clquku1e8000c6ht0hckahbgs"},{"name":"编程语言及工具","_id":"clquku1e9000h6ht026vk14wx"},{"name":"前后端项目","_id":"clquku1e9000l6ht0gbrt5ffo"},{"name":"Hexo","_id":"clquku1ea000s6ht06d66857g"},{"name":"前端","_id":"clquku1ea000x6ht0cjdhaypf"},{"name":"51单片机","_id":"clquku1eb00126ht00hv229jw"},{"name":"博客介绍及更新日志","_id":"clquku1ec00176ht0aqk56vjp"},{"name":"学习计划","_id":"clquku1ed001e6ht0fn45g4bm"}],"Data":[],"Page":[{"title":"分类","date":"2023-02-10T05:48:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-02-10 13:48:39\ntype: categories\n---\n","updated":"2023-02-10T05:49:55.709Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clquku1e200006ht0g9ax52zf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"炸酱面橙子皮","layout":"about","date":"2023-03-09T13:53:47.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 炸酱面橙子皮\nlayout: about\ndate: 2023-03-09 21:53:47\n---\n","updated":"2023-03-09T15:17:33.697Z","path":"about/index.html","comments":1,"_id":"clquku1e400026ht09k7p4loz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C语言学习笔记","date":"2023-03-27T11:18:27.000Z","_content":"\n# C语言学习笔记\n\n\n","source":"_posts/C语言学习笔记.md","raw":"---\ntitle: C语言学习笔记\ndate: 2023-03-27 19:18:27\ntags:\ncategories: 编程语言及工具笔记\n---\n\n# C语言学习笔记\n\n\n","slug":"C语言学习笔记","published":1,"updated":"2023-04-02T12:59:03.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e300016ht0c2wnbxzy","content":"<h1 id=\"C语言学习笔记\"><a href=\"#C语言学习笔记\" class=\"headerlink\" title=\"C语言学习笔记\"></a>C语言学习笔记</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C语言学习笔记\"><a href=\"#C语言学习笔记\" class=\"headerlink\" title=\"C语言学习笔记\"></a>C语言学习笔记</h1>"},{"title":"Linux","date":"2023-04-24T12:45:44.000Z","_content":"","source":"_posts/Linux.md","raw":"---\ntitle: Linux\ndate: 2023-04-24 20:45:44\ntags:\n---\n","slug":"Linux","published":1,"updated":"2023-04-24T12:45:44.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e500036ht045y8bmfb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Android APP项目","date":"2023-11-29T12:51:00.000Z","_content":"\n# Android APP\n\n## 蓝牙Wi-Fi助手\n\n**项目状态：未完成**\n\n[开发文档]()\n\n[代码仓库]()\n\n","source":"_posts/Android-APP.md","raw":"---\ntitle: Android APP项目\ndate: 2023-11-29 20:51:00\ntags:\ncategories: APP & 小程序\n---\n\n# Android APP\n\n## 蓝牙Wi-Fi助手\n\n**项目状态：未完成**\n\n[开发文档]()\n\n[代码仓库]()\n\n","slug":"Android-APP","published":1,"updated":"2023-11-29T12:59:32.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e600056ht0fhkgdxc5","content":"<h1 id=\"Android-APP\"><a href=\"#Android-APP\" class=\"headerlink\" title=\"Android APP\"></a>Android APP</h1><h2 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h2><p><strong>项目状态：未完成</strong></p>\n<p><a href=\"\">开发文档</a></p>\n<p><a href=\"\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android-APP\"><a href=\"#Android-APP\" class=\"headerlink\" title=\"Android APP\"></a>Android APP</h1><h2 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h2><p><strong>项目状态：未完成</strong></p>\n<p><a href=\"\">开发文档</a></p>\n<p><a href=\"\">代码仓库</a></p>\n"},{"title":"Maven","date":"2023-11-24T03:27:09.000Z","_content":"\n# Maven\n\n## Maven简介\nMaven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。\n\n**maven的作用**\n- 一键构建\n    构建的过程：编译-测试-运行-打包-安装-部署等\n- 依赖管理\n    maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。\n\n\n## 下载和配置Maven\n\n### 下载\n**[maven下载链接](https://maven.apache.org/download.cgi)**\n\n**文件名后缀为bin.tar.gz**\n\n### 配置maven_home环境变量\n这里只写了mac的实例(windows的自行搜索)：\n```Makefile\n    \n```\n\n\n","source":"_posts/Maven.md","raw":"---\ntitle: Maven\ndate: 2023-11-24 11:27:09\ntags:\ncategories: 后端\n---\n\n# Maven\n\n## Maven简介\nMaven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。\n\n**maven的作用**\n- 一键构建\n    构建的过程：编译-测试-运行-打包-安装-部署等\n- 依赖管理\n    maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。\n\n\n## 下载和配置Maven\n\n### 下载\n**[maven下载链接](https://maven.apache.org/download.cgi)**\n\n**文件名后缀为bin.tar.gz**\n\n### 配置maven_home环境变量\n这里只写了mac的实例(windows的自行搜索)：\n```Makefile\n    \n```\n\n\n","slug":"Maven","published":1,"updated":"2023-12-29T14:37:08.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e600066ht01ibrdl9z","content":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1><h2 id=\"Maven简介\"><a href=\"#Maven简介\" class=\"headerlink\" title=\"Maven简介\"></a>Maven简介</h2><p>Maven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。</p>\n<p><strong>maven的作用</strong></p>\n<ul>\n<li>一键构建<br>  构建的过程：编译-测试-运行-打包-安装-部署等</li>\n<li>依赖管理<br>  maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。</li>\n</ul>\n<h2 id=\"下载和配置Maven\"><a href=\"#下载和配置Maven\" class=\"headerlink\" title=\"下载和配置Maven\"></a>下载和配置Maven</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><strong><a href=\"https://maven.apache.org/download.cgi\">maven下载链接</a></strong></p>\n<p><strong>文件名后缀为bin.tar.gz</strong></p>\n<h3 id=\"配置maven-home环境变量\"><a href=\"#配置maven-home环境变量\" class=\"headerlink\" title=\"配置maven_home环境变量\"></a>配置maven_home环境变量</h3><p>这里只写了mac的实例(windows的自行搜索)：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Makefile\">    <br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1><h2 id=\"Maven简介\"><a href=\"#Maven简介\" class=\"headerlink\" title=\"Maven简介\"></a>Maven简介</h2><p>Maven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。</p>\n<p><strong>maven的作用</strong></p>\n<ul>\n<li>一键构建<br>  构建的过程：编译-测试-运行-打包-安装-部署等</li>\n<li>依赖管理<br>  maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。</li>\n</ul>\n<h2 id=\"下载和配置Maven\"><a href=\"#下载和配置Maven\" class=\"headerlink\" title=\"下载和配置Maven\"></a>下载和配置Maven</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><strong><a href=\"https://maven.apache.org/download.cgi\">maven下载链接</a></strong></p>\n<p><strong>文件名后缀为bin.tar.gz</strong></p>\n<h3 id=\"配置maven-home环境变量\"><a href=\"#配置maven-home环境变量\" class=\"headerlink\" title=\"配置maven_home环境变量\"></a>配置maven_home环境变量</h3><p>这里只写了mac的实例(windows的自行搜索)：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Makefile\">    <br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"PicGo图床搭建","date":"2023-04-24T09:09:15.000Z","_content":"\n# 三分钟搭建PicGo图床\n参考链接：[跳转至Bilibili](https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click)\n\n原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。\n\n当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）**（已修改，详情见细下文）**\n\n\n ## Github\n ***建议科学上网，否则网速真的很慢***\n1. 登录Github账号，点击右上角的+号\n![截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png)\n2. 在加号的下拉列表中，选择**New repository**--创建新仓库\n![创建新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png)\n3. 进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository\n![配置新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png)\n\n***做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行***\n\n ## PicGo\n ***还是建议科学上网，下载速度会快很多***\n\n 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：[官方下载链接 ](https://github.com/Molunerfinn/PicGo/releases)\n\n### 下载时碰到的问题和解决办法\n在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。\n报错信息：\n```\nPicGo已损坏，无法打开。 您应该将它移到废纸篓。\n```\n\n**解决办法：**\n在终端输入命令（注意最后有一个空格）：\n```shell\nsudo xattr -r -d com.apple.quarantine \n```\n***先不要按回车！(重要的事情说三遍)***\n打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：\n```shell\nsudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app\n```\n回到终端窗口按回车，输入系统密码回车即可正常使用\n\n### 设置PicGo\n 下载完成之后，进入界面，选择图床设置->Github\n ![图床设置](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png)\n\n 设定仓库按照上图所示填写：**用户名/仓库名**\n 分支名填main或者master都可以\n token：从Github上获取\n\n ***这里如何获取token？***\n 1. 点击用户头像，点击下拉列表的Settings-设置选项\n ![xx](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png) \n 2. 点击左边列表的Developer settings\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png)\n 3. 点击Personal access tokens->Tokens(classic)\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png)\n 4. 点击Generate new token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png)\n 5. 输入Note，Select scopes选择repo即可,点击Generate token,即可生成token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png)\n 6. 将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床\n\n\n### 测试结果\n**Github仓库截图：**\n![Github仓库截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png)\n\n**markdown截图：**\n![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png)\n\n***这样子，一个使用方便的图床就搭建好了！***\n\n## 别的方式","source":"_posts/PicGo图床搭建.md","raw":"---\ntitle: PicGo图床搭建\ndate: 2023-04-24 17:09:15\ntags:\ncategories: 编程语言及工具笔记\n---\n\n# 三分钟搭建PicGo图床\n参考链接：[跳转至Bilibili](https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click)\n\n原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。\n\n当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）**（已修改，详情见细下文）**\n\n\n ## Github\n ***建议科学上网，否则网速真的很慢***\n1. 登录Github账号，点击右上角的+号\n![截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png)\n2. 在加号的下拉列表中，选择**New repository**--创建新仓库\n![创建新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png)\n3. 进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository\n![配置新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png)\n\n***做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行***\n\n ## PicGo\n ***还是建议科学上网，下载速度会快很多***\n\n 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：[官方下载链接 ](https://github.com/Molunerfinn/PicGo/releases)\n\n### 下载时碰到的问题和解决办法\n在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。\n报错信息：\n```\nPicGo已损坏，无法打开。 您应该将它移到废纸篓。\n```\n\n**解决办法：**\n在终端输入命令（注意最后有一个空格）：\n```shell\nsudo xattr -r -d com.apple.quarantine \n```\n***先不要按回车！(重要的事情说三遍)***\n打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：\n```shell\nsudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app\n```\n回到终端窗口按回车，输入系统密码回车即可正常使用\n\n### 设置PicGo\n 下载完成之后，进入界面，选择图床设置->Github\n ![图床设置](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png)\n\n 设定仓库按照上图所示填写：**用户名/仓库名**\n 分支名填main或者master都可以\n token：从Github上获取\n\n ***这里如何获取token？***\n 1. 点击用户头像，点击下拉列表的Settings-设置选项\n ![xx](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png) \n 2. 点击左边列表的Developer settings\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png)\n 3. 点击Personal access tokens->Tokens(classic)\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png)\n 4. 点击Generate new token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png)\n 5. 输入Note，Select scopes选择repo即可,点击Generate token,即可生成token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png)\n 6. 将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床\n\n\n### 测试结果\n**Github仓库截图：**\n![Github仓库截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png)\n\n**markdown截图：**\n![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png)\n\n***这样子，一个使用方便的图床就搭建好了！***\n\n## 别的方式","slug":"PicGo图床搭建","published":1,"updated":"2023-08-03T03:23:27.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e700076ht05p707kzv","content":"<h1 id=\"三分钟搭建PicGo图床\"><a href=\"#三分钟搭建PicGo图床\" class=\"headerlink\" title=\"三分钟搭建PicGo图床\"></a>三分钟搭建PicGo图床</h1><p>参考链接：<a href=\"https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click\">跳转至Bilibili</a></p>\n<p>原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。</p>\n<p>当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）<strong>（已修改，详情见细下文）</strong></p>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p> <em><strong>建议科学上网，否则网速真的很慢</strong></em></p>\n<ol>\n<li>登录Github账号，点击右上角的+号<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png\" alt=\"截图\"></li>\n<li>在加号的下拉列表中，选择<strong>New repository</strong>–创建新仓库<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png\" alt=\"创建新仓库\"></li>\n<li>进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png\" alt=\"配置新仓库\"></li>\n</ol>\n<p><em><strong>做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行</strong></em></p>\n<h2 id=\"PicGo\"><a href=\"#PicGo\" class=\"headerlink\" title=\"PicGo\"></a>PicGo</h2><p> <em><strong>还是建议科学上网，下载速度会快很多</strong></em></p>\n<p> 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：<a href=\"https://github.com/Molunerfinn/PicGo/releases\">官方下载链接 </a></p>\n<h3 id=\"下载时碰到的问题和解决办法\"><a href=\"#下载时碰到的问题和解决办法\" class=\"headerlink\" title=\"下载时碰到的问题和解决办法\"></a>下载时碰到的问题和解决办法</h3><p>在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。<br>报错信息：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">PicGo已损坏，无法打开。 您应该将它移到废纸篓。<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决办法：</strong><br>在终端输入命令（注意最后有一个空格）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine <br></code></pre></td></tr></table></figure>\n<p><em><strong>先不要按回车！(重要的事情说三遍)</strong></em><br>打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app<br></code></pre></td></tr></table></figure>\n<p>回到终端窗口按回车，输入系统密码回车即可正常使用</p>\n<h3 id=\"设置PicGo\"><a href=\"#设置PicGo\" class=\"headerlink\" title=\"设置PicGo\"></a>设置PicGo</h3><p> 下载完成之后，进入界面，选择图床设置-&gt;Github<br> <img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png\" alt=\"图床设置\"></p>\n<p> 设定仓库按照上图所示填写：<strong>用户名/仓库名</strong><br> 分支名填main或者master都可以<br> token：从Github上获取</p>\n<p> <em><strong>这里如何获取token？</strong></em></p>\n<ol>\n<li>点击用户头像，点击下拉列表的Settings-设置选项<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png\" alt=\"xx\"> </li>\n<li>点击左边列表的Developer settings<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png\"></li>\n<li>点击Personal access tokens-&gt;Tokens(classic)<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png\"></li>\n<li>点击Generate new token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png\"></li>\n<li>输入Note，Select scopes选择repo即可,点击Generate token,即可生成token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png\"></li>\n<li>将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床</li>\n</ol>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><strong>Github仓库截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png\" alt=\"Github仓库截图\"></p>\n<p><strong>markdown截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png\"></p>\n<p><em><strong>这样子，一个使用方便的图床就搭建好了！</strong></em></p>\n<h2 id=\"别的方式\"><a href=\"#别的方式\" class=\"headerlink\" title=\"别的方式\"></a>别的方式</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"三分钟搭建PicGo图床\"><a href=\"#三分钟搭建PicGo图床\" class=\"headerlink\" title=\"三分钟搭建PicGo图床\"></a>三分钟搭建PicGo图床</h1><p>参考链接：<a href=\"https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click\">跳转至Bilibili</a></p>\n<p>原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。</p>\n<p>当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）<strong>（已修改，详情见细下文）</strong></p>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p> <em><strong>建议科学上网，否则网速真的很慢</strong></em></p>\n<ol>\n<li>登录Github账号，点击右上角的+号<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png\" alt=\"截图\"></li>\n<li>在加号的下拉列表中，选择<strong>New repository</strong>–创建新仓库<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png\" alt=\"创建新仓库\"></li>\n<li>进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png\" alt=\"配置新仓库\"></li>\n</ol>\n<p><em><strong>做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行</strong></em></p>\n<h2 id=\"PicGo\"><a href=\"#PicGo\" class=\"headerlink\" title=\"PicGo\"></a>PicGo</h2><p> <em><strong>还是建议科学上网，下载速度会快很多</strong></em></p>\n<p> 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：<a href=\"https://github.com/Molunerfinn/PicGo/releases\">官方下载链接 </a></p>\n<h3 id=\"下载时碰到的问题和解决办法\"><a href=\"#下载时碰到的问题和解决办法\" class=\"headerlink\" title=\"下载时碰到的问题和解决办法\"></a>下载时碰到的问题和解决办法</h3><p>在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。<br>报错信息：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">PicGo已损坏，无法打开。 您应该将它移到废纸篓。<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决办法：</strong><br>在终端输入命令（注意最后有一个空格）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine <br></code></pre></td></tr></table></figure>\n<p><em><strong>先不要按回车！(重要的事情说三遍)</strong></em><br>打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app<br></code></pre></td></tr></table></figure>\n<p>回到终端窗口按回车，输入系统密码回车即可正常使用</p>\n<h3 id=\"设置PicGo\"><a href=\"#设置PicGo\" class=\"headerlink\" title=\"设置PicGo\"></a>设置PicGo</h3><p> 下载完成之后，进入界面，选择图床设置-&gt;Github<br> <img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png\" alt=\"图床设置\"></p>\n<p> 设定仓库按照上图所示填写：<strong>用户名/仓库名</strong><br> 分支名填main或者master都可以<br> token：从Github上获取</p>\n<p> <em><strong>这里如何获取token？</strong></em></p>\n<ol>\n<li>点击用户头像，点击下拉列表的Settings-设置选项<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png\" alt=\"xx\"> </li>\n<li>点击左边列表的Developer settings<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png\"></li>\n<li>点击Personal access tokens-&gt;Tokens(classic)<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png\"></li>\n<li>点击Generate new token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png\"></li>\n<li>输入Note，Select scopes选择repo即可,点击Generate token,即可生成token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png\"></li>\n<li>将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床</li>\n</ol>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><strong>Github仓库截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png\" alt=\"Github仓库截图\"></p>\n<p><strong>markdown截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png\"></p>\n<p><em><strong>这样子，一个使用方便的图床就搭建好了！</strong></em></p>\n<h2 id=\"别的方式\"><a href=\"#别的方式\" class=\"headerlink\" title=\"别的方式\"></a>别的方式</h2>"},{"title":"Java","date":"2023-11-17T15:10:34.000Z","_content":"# Java大纲\nhttps://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\n\n密码：1#1DZ(rJ\n## Java抽奖网站\n\n涉及技术栈：\n前端：html，css，js\n后端：springboot，maven，nginx，aliyun，ajax\n\n项目文档：[抽奖网站]()\n\n## 掘金项目\n涉及技术栈：\n前端：\n后端：\n","source":"_posts/Java.md","raw":"---\ntitle: Java\ndate: 2023-11-17 23:10:34\ntags:\ncategories: 编程语言及工具\n---\n# Java大纲\nhttps://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\n\n密码：1#1DZ(rJ\n## Java抽奖网站\n\n涉及技术栈：\n前端：html，css，js\n后端：springboot，maven，nginx，aliyun，ajax\n\n项目文档：[抽奖网站]()\n\n## 掘金项目\n涉及技术栈：\n前端：\n后端：\n","slug":"Java","published":1,"updated":"2023-11-29T12:52:15.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e700096ht009rh2g4m","content":"<h1 id=\"Java大纲\"><a href=\"#Java大纲\" class=\"headerlink\" title=\"Java大纲\"></a>Java大纲</h1><p><a href=\"https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\">https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g</a></p>\n<p>密码：1#1DZ(rJ</p>\n<h2 id=\"Java抽奖网站\"><a href=\"#Java抽奖网站\" class=\"headerlink\" title=\"Java抽奖网站\"></a>Java抽奖网站</h2><p>涉及技术栈：<br>前端：html，css，js<br>后端：springboot，maven，nginx，aliyun，ajax</p>\n<p>项目文档：<a href=\"\">抽奖网站</a></p>\n<h2 id=\"掘金项目\"><a href=\"#掘金项目\" class=\"headerlink\" title=\"掘金项目\"></a>掘金项目</h2><p>涉及技术栈：<br>前端：<br>后端：</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java大纲\"><a href=\"#Java大纲\" class=\"headerlink\" title=\"Java大纲\"></a>Java大纲</h1><p><a href=\"https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\">https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g</a></p>\n<p>密码：1#1DZ(rJ</p>\n<h2 id=\"Java抽奖网站\"><a href=\"#Java抽奖网站\" class=\"headerlink\" title=\"Java抽奖网站\"></a>Java抽奖网站</h2><p>涉及技术栈：<br>前端：html，css，js<br>后端：springboot，maven，nginx，aliyun，ajax</p>\n<p>项目文档：<a href=\"\">抽奖网站</a></p>\n<h2 id=\"掘金项目\"><a href=\"#掘金项目\" class=\"headerlink\" title=\"掘金项目\"></a>掘金项目</h2><p>涉及技术栈：<br>前端：<br>后端：</p>\n"},{"title":"Java抽奖网站","date":"2023-11-20T07:23:15.000Z","_content":"# Java抽奖网站(学习笔记记录)\n\n## 前期准备\n\n### 后端\n[SpringBoot](https://gooddefense.github.io/2023/11/24/SpringBoot/)\n[maven](https://gooddefense.github.io/2023/11/24/Maven/)\n[Mybatis](https://gooddefense.github.io/2023/11/24/Mybatis/)\n[Git](https://gooddefense.github.io/2023/04/08/git/)\n[Redis](https://gooddefense.github.io/2023/11/24/Redis/)\n\n\n### 前端  \n- HTML：[学习网站](https://www.w3cschool.cn/html)\n  - **canvas(HTML5)**：[学习资料](https://gooddefense.github.io/2023/11/26/canvas/)\n- CSS：[学习网站](https://www.w3school.com.cn/css/index.asp)\n- JavaScript：[学习网站]()\n\n\n\n\n\n","source":"_posts/Java抽奖网站.md","raw":"---\ntitle: Java抽奖网站\ndate: 2023-11-20 15:23:15\ntags:\ncategories: 前后端项目\n---\n# Java抽奖网站(学习笔记记录)\n\n## 前期准备\n\n### 后端\n[SpringBoot](https://gooddefense.github.io/2023/11/24/SpringBoot/)\n[maven](https://gooddefense.github.io/2023/11/24/Maven/)\n[Mybatis](https://gooddefense.github.io/2023/11/24/Mybatis/)\n[Git](https://gooddefense.github.io/2023/04/08/git/)\n[Redis](https://gooddefense.github.io/2023/11/24/Redis/)\n\n\n### 前端  \n- HTML：[学习网站](https://www.w3cschool.cn/html)\n  - **canvas(HTML5)**：[学习资料](https://gooddefense.github.io/2023/11/26/canvas/)\n- CSS：[学习网站](https://www.w3school.com.cn/css/index.asp)\n- JavaScript：[学习网站]()\n\n\n\n\n\n","slug":"Java抽奖网站","published":1,"updated":"2023-12-29T14:37:04.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e7000a6ht0gzuq3xbv","content":"<h1 id=\"Java抽奖网站-学习笔记记录\"><a href=\"#Java抽奖网站-学习笔记记录\" class=\"headerlink\" title=\"Java抽奖网站(学习笔记记录)\"></a>Java抽奖网站(学习笔记记录)</h1><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p><a href=\"https://gooddefense.github.io/2023/11/24/SpringBoot/\">SpringBoot</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Maven/\">maven</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Mybatis/\">Mybatis</a><br><a href=\"https://gooddefense.github.io/2023/04/08/git/\">Git</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Redis/\">Redis</a></p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>HTML：<a href=\"https://www.w3cschool.cn/html\">学习网站</a><ul>\n<li>**canvas(HTML5)**：<a href=\"https://gooddefense.github.io/2023/11/26/canvas/\">学习资料</a></li>\n</ul>\n</li>\n<li>CSS：<a href=\"https://www.w3school.com.cn/css/index.asp\">学习网站</a></li>\n<li>JavaScript：<a href=\"\">学习网站</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java抽奖网站-学习笔记记录\"><a href=\"#Java抽奖网站-学习笔记记录\" class=\"headerlink\" title=\"Java抽奖网站(学习笔记记录)\"></a>Java抽奖网站(学习笔记记录)</h1><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p><a href=\"https://gooddefense.github.io/2023/11/24/SpringBoot/\">SpringBoot</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Maven/\">maven</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Mybatis/\">Mybatis</a><br><a href=\"https://gooddefense.github.io/2023/04/08/git/\">Git</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Redis/\">Redis</a></p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>HTML：<a href=\"https://www.w3cschool.cn/html\">学习网站</a><ul>\n<li>**canvas(HTML5)**：<a href=\"https://gooddefense.github.io/2023/11/26/canvas/\">学习资料</a></li>\n</ul>\n</li>\n<li>CSS：<a href=\"https://www.w3school.com.cn/css/index.asp\">学习网站</a></li>\n<li>JavaScript：<a href=\"\">学习网站</a></li>\n</ul>\n"},{"title":"Redis","date":"2023-11-24T03:27:31.000Z","_content":"","source":"_posts/Redis.md","raw":"---\ntitle: Redis\ndate: 2023-11-24 11:27:31\ntags:\ncategories: 后端\n---\n","slug":"Redis","published":1,"updated":"2023-11-27T01:30:27.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e8000d6ht0cct52x9q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Mybatis","date":"2023-11-24T03:27:40.000Z","_content":"","source":"_posts/Mybatis.md","raw":"---\ntitle: Mybatis\ndate: 2023-11-24 11:27:40\ntags:\ncategories: 后端\n---\n","slug":"Mybatis","published":1,"updated":"2023-11-27T01:31:15.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e8000f6ht0he8p77ra","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"git","date":"2023-04-08T15:21:45.000Z","_content":"\n# git\n\n## git的安装\n### Windows\n有一个我觉得非常详细的教程，就贴在这里：\n[git安装详细教程（CSDN）](https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142^v82^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&spm=1018.2226.3001.4187)\n按照上面的教程一步一步来安装，基本上是没有问题的。\n\n### Mac\n暂时先晾在这，后面再整理\n\n## Git的工作流程\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n\n## Git基本操作\nGit的作用是什么？**Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。**\n\n常用的命令有以下六个命令：\n- git clone\n- git push\n- git add\n- git commit\n- git checkout\n- git pull\n\n## Git创建仓库\n初始化一个仓库的命令：\n- 如果使用当前目录作为Git仓库，使用以下命令：\n```shell\n    git init\n```\n- 如果使用指定目录作为git仓库，使用以下命令：\n```shell\n    git init newrepo\n\n    newrepo是指定目录的路径\n```\n初始化后，会在newrepo下生成 **.git**的目录，**这个目录存放着所有Git需要的数据和资源**。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。\n\n*****\n\n创建仓库可以在空目录下，也可以在非空目录下。**非空目录**下，使用**git add**命令将仓库下的所有文件放入Git中，进行提交即可；**空目录**下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。\n\n克隆仓库的命令：\n```\n    git clone <repo>\n\n    <repo> 是仓库的http地址\n```\n上面这条克隆命令，是将 **repo**地址下的仓库克隆到了当前目录。\n\n将仓库克隆到指定目录下的命令：\n```\n    git clone <repo> <directory>\n\n    <repo>是仓库的http地址\n    <directory>是本地目录\n```\n\n执行了克隆命令后，会在当前目录下创建一个**以克隆的仓库名为文件名的新目录**，新目录下包含一个 **.git**文件，这里的 **.git**文件用于保存下载下来的所有版本记录。\n\n\n如果想要自己定义新目录的名称，可以输入以下命令：\n```\n     git clone <repo> 自定义名\n```\n\n*****\n\n做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。\n\ngit的配置的命令：\n```shell\n    git config\n```\n\n**编辑git的配置文件**\n**只针对当前仓库**\n```shell\n    git config -e  \n```\n\n**针对本地上的所有仓库**\n```shell\n    git config -e -global\n```\n\n**设置提交代码时的用户信息：**\n```shell\n    git config -global user.name \"username\"\n    git config -global user.email user@useremail.com \n    # 注意这里的-global去掉的话，命令只会对当前仓库有效\n```\n\n## Git分支管理\n有一张图可以说明Git分支管理的模式\n![git分支管理](https://static.runoob.com/images/svg/git-brance.svg)\n\n使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。\n\n**创建分支的命令**\n```shell\n    git branch (branchname)\n```\n\n**切换分支的命令**\n```shell\n    git checkout (branchname)\n```\n这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：\n```\n    git checkout -b (branchname)\n```\n*****\n这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录\n\n**合并分支的命令：**\n```shell\n    git merge\n```\n\n**删除分支的命令：**\n```shell\n    git checkout -d (branchname)\n```\n\n## Git查看提交历史\n**常用的一般有两个命令：**\n- git log ---查看历史提交记录 \n- git blame < blame> ---以列表形式查看指定文件的历史修改记录\n\n**git log**\n**查看历史记录的简洁的版本**\n```shell\n    git log -oneline\n```\n\n**查看历史中什么时候出现了分支、合并**\n```shell\n     git log -graph -oneline\n```\n\n**逆向显示所有日志**\n```shell\n    git log -reverse -oneline\n```\n\n**查找指定用户的提交日志**\n```shell\n    git log -author=name -oneline\n```\n\n**指定日期，可以执行几个选项：--since 和 --before，也可以用 --until 和 --after**\n\n```shell\n    git log -oneline -before={2.weeks.ago} -after={2021-04-09} \n```\n\n**还有很多git log命令，可以进入这个网站进行查询：**[Git log命令](https://git-scm.com/docs/git-log)\n\n*****\n\n**git blame**\n作用是：**查看指定文件的修改记录**\n\n\n## Git标签\n创建一个带注解的标签\n```shell\n    git tag -a v1.1\n```\n\n查看所有标签\n```shell\n    git tag\n```\n\n指定标签信息命令：\n```shell\n    git tag -a <tagname> -m \"标签内容\"\n```\n\nPGP签名标签命令：\n```shell\n    git tag -s <tagname> -m \"标签内容\"\n```\n\n## Git 和 Github\n\n上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。\n![Github](https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg)\n\n**这里将Github作为远程仓库，记录用Git连接Github的过程**\n\n***未完待续***\n\n","source":"_posts/git.md","raw":"---\ntitle: git\ndate: 2023-04-08 23:21:45\ntags:\ncategories: 编程语言及工具\n---\n\n# git\n\n## git的安装\n### Windows\n有一个我觉得非常详细的教程，就贴在这里：\n[git安装详细教程（CSDN）](https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142^v82^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&spm=1018.2226.3001.4187)\n按照上面的教程一步一步来安装，基本上是没有问题的。\n\n### Mac\n暂时先晾在这，后面再整理\n\n## Git的工作流程\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n\n## Git基本操作\nGit的作用是什么？**Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。**\n\n常用的命令有以下六个命令：\n- git clone\n- git push\n- git add\n- git commit\n- git checkout\n- git pull\n\n## Git创建仓库\n初始化一个仓库的命令：\n- 如果使用当前目录作为Git仓库，使用以下命令：\n```shell\n    git init\n```\n- 如果使用指定目录作为git仓库，使用以下命令：\n```shell\n    git init newrepo\n\n    newrepo是指定目录的路径\n```\n初始化后，会在newrepo下生成 **.git**的目录，**这个目录存放着所有Git需要的数据和资源**。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。\n\n*****\n\n创建仓库可以在空目录下，也可以在非空目录下。**非空目录**下，使用**git add**命令将仓库下的所有文件放入Git中，进行提交即可；**空目录**下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。\n\n克隆仓库的命令：\n```\n    git clone <repo>\n\n    <repo> 是仓库的http地址\n```\n上面这条克隆命令，是将 **repo**地址下的仓库克隆到了当前目录。\n\n将仓库克隆到指定目录下的命令：\n```\n    git clone <repo> <directory>\n\n    <repo>是仓库的http地址\n    <directory>是本地目录\n```\n\n执行了克隆命令后，会在当前目录下创建一个**以克隆的仓库名为文件名的新目录**，新目录下包含一个 **.git**文件，这里的 **.git**文件用于保存下载下来的所有版本记录。\n\n\n如果想要自己定义新目录的名称，可以输入以下命令：\n```\n     git clone <repo> 自定义名\n```\n\n*****\n\n做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。\n\ngit的配置的命令：\n```shell\n    git config\n```\n\n**编辑git的配置文件**\n**只针对当前仓库**\n```shell\n    git config -e  \n```\n\n**针对本地上的所有仓库**\n```shell\n    git config -e -global\n```\n\n**设置提交代码时的用户信息：**\n```shell\n    git config -global user.name \"username\"\n    git config -global user.email user@useremail.com \n    # 注意这里的-global去掉的话，命令只会对当前仓库有效\n```\n\n## Git分支管理\n有一张图可以说明Git分支管理的模式\n![git分支管理](https://static.runoob.com/images/svg/git-brance.svg)\n\n使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。\n\n**创建分支的命令**\n```shell\n    git branch (branchname)\n```\n\n**切换分支的命令**\n```shell\n    git checkout (branchname)\n```\n这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：\n```\n    git checkout -b (branchname)\n```\n*****\n这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录\n\n**合并分支的命令：**\n```shell\n    git merge\n```\n\n**删除分支的命令：**\n```shell\n    git checkout -d (branchname)\n```\n\n## Git查看提交历史\n**常用的一般有两个命令：**\n- git log ---查看历史提交记录 \n- git blame < blame> ---以列表形式查看指定文件的历史修改记录\n\n**git log**\n**查看历史记录的简洁的版本**\n```shell\n    git log -oneline\n```\n\n**查看历史中什么时候出现了分支、合并**\n```shell\n     git log -graph -oneline\n```\n\n**逆向显示所有日志**\n```shell\n    git log -reverse -oneline\n```\n\n**查找指定用户的提交日志**\n```shell\n    git log -author=name -oneline\n```\n\n**指定日期，可以执行几个选项：--since 和 --before，也可以用 --until 和 --after**\n\n```shell\n    git log -oneline -before={2.weeks.ago} -after={2021-04-09} \n```\n\n**还有很多git log命令，可以进入这个网站进行查询：**[Git log命令](https://git-scm.com/docs/git-log)\n\n*****\n\n**git blame**\n作用是：**查看指定文件的修改记录**\n\n\n## Git标签\n创建一个带注解的标签\n```shell\n    git tag -a v1.1\n```\n\n查看所有标签\n```shell\n    git tag\n```\n\n指定标签信息命令：\n```shell\n    git tag -a <tagname> -m \"标签内容\"\n```\n\nPGP签名标签命令：\n```shell\n    git tag -s <tagname> -m \"标签内容\"\n```\n\n## Git 和 Github\n\n上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。\n![Github](https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg)\n\n**这里将Github作为远程仓库，记录用Git连接Github的过程**\n\n***未完待续***\n\n","slug":"git","published":1,"updated":"2023-04-09T11:41:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e9000i6ht025is51hw","content":"<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h2 id=\"git的安装\"><a href=\"#git的安装\" class=\"headerlink\" title=\"git的安装\"></a>git的安装</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>有一个我觉得非常详细的教程，就贴在这里：<br><a href=\"https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142%5Ev82%5Einsert_down38,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187\">git安装详细教程（CSDN）</a><br>按照上面的教程一步一步来安装，基本上是没有问题的。</p>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><p>暂时先晾在这，后面再整理</p>\n<h2 id=\"Git的工作流程\"><a href=\"#Git的工作流程\" class=\"headerlink\" title=\"Git的工作流程\"></a>Git的工作流程</h2><ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><p>Git的作用是什么？<strong>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</strong></p>\n<p>常用的命令有以下六个命令：</p>\n<ul>\n<li>git clone</li>\n<li>git push</li>\n<li>git add</li>\n<li>git commit</li>\n<li>git checkout</li>\n<li>git pull</li>\n</ul>\n<h2 id=\"Git创建仓库\"><a href=\"#Git创建仓库\" class=\"headerlink\" title=\"Git创建仓库\"></a>Git创建仓库</h2><p>初始化一个仓库的命令：</p>\n<ul>\n<li>如果使用当前目录作为Git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init<br></code></pre></td></tr></table></figure></li>\n<li>如果使用指定目录作为git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init newrepo<br><br>newrepo是指定目录的路径<br></code></pre></td></tr></table></figure>\n初始化后，会在newrepo下生成 <strong>.git</strong>的目录，<strong>这个目录存放着所有Git需要的数据和资源</strong>。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。</li>\n</ul>\n<hr>\n<p>创建仓库可以在空目录下，也可以在非空目录下。<strong>非空目录</strong>下，使用<strong>git add</strong>命令将仓库下的所有文件放入Git中，进行提交即可；<strong>空目录</strong>下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。</p>\n<p>克隆仓库的命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br><br><span class=\"hljs-tag\">&lt;repo&gt;</span> 是仓库的http地址<br></code></pre></td></tr></table></figure>\n<p>上面这条克隆命令，是将 <strong>repo</strong>地址下的仓库克隆到了当前目录。</p>\n<p>将仓库克隆到指定目录下的命令：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git clone <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span>是仓库的http地址<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>是本地目录<br></code></pre></td></tr></table></figure>\n\n<p>执行了克隆命令后，会在当前目录下创建一个<strong>以克隆的仓库名为文件名的新目录</strong>，新目录下包含一个 <strong>.git</strong>文件，这里的 <strong>.git</strong>文件用于保存下载下来的所有版本记录。</p>\n<p>如果想要自己定义新目录的名称，可以输入以下命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt; 自定义名<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。</p>\n<p>git的配置的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config<br></code></pre></td></tr></table></figure>\n\n<p><strong>编辑git的配置文件</strong><br><strong>只针对当前仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e  <br></code></pre></td></tr></table></figure>\n\n<p><strong>针对本地上的所有仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e -global<br></code></pre></td></tr></table></figure>\n\n<p><strong>设置提交代码时的用户信息：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -global user.name &quot;username&quot;<br>git config -global user.email user@useremail.com <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意这里的-global去掉的话，命令只会对当前仓库有效</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git分支管理\"><a href=\"#Git分支管理\" class=\"headerlink\" title=\"Git分支管理\"></a>Git分支管理</h2><p>有一张图可以说明Git分支管理的模式<br><img src=\"https://static.runoob.com/images/svg/git-brance.svg\" alt=\"git分支管理\"></p>\n<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>\n<p><strong>创建分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git branch (branchname)<br></code></pre></td></tr></table></figure>\n\n<p><strong>切换分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout (branchname)<br></code></pre></td></tr></table></figure>\n<p>这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> checkout -<span class=\"hljs-keyword\">b</span> (branchname)<br></code></pre></td></tr></table></figure>\n<hr>\n<p>这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录</p>\n<p><strong>合并分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git merge<br></code></pre></td></tr></table></figure>\n\n<p><strong>删除分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout -d (branchname)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git查看提交历史\"><a href=\"#Git查看提交历史\" class=\"headerlink\" title=\"Git查看提交历史\"></a>Git查看提交历史</h2><p><strong>常用的一般有两个命令：</strong></p>\n<ul>\n<li>git log —查看历史提交记录 </li>\n<li>git blame &lt; blame&gt; —以列表形式查看指定文件的历史修改记录</li>\n</ul>\n<p><strong>git log</strong><br><strong>查看历史记录的简洁的版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看历史中什么时候出现了分支、合并</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -graph -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>逆向显示所有日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -reverse -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查找指定用户的提交日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -author=name -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>指定日期，可以执行几个选项：–since 和 –before，也可以用 –until 和 –after</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline -before=&#123;2.weeks.ago&#125; -after=&#123;2021-04-09&#125; <br></code></pre></td></tr></table></figure>\n\n<p><strong>还有很多git log命令，可以进入这个网站进行查询：</strong><a href=\"https://git-scm.com/docs/git-log\">Git log命令</a></p>\n<hr>\n<p><strong>git blame</strong><br>作用是：<strong>查看指定文件的修改记录</strong></p>\n<h2 id=\"Git标签\"><a href=\"#Git标签\" class=\"headerlink\" title=\"Git标签\"></a>Git标签</h2><p>创建一个带注解的标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a v1.1<br></code></pre></td></tr></table></figure>\n\n<p>查看所有标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag<br></code></pre></td></tr></table></figure>\n\n<p>指定标签信息命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<p>PGP签名标签命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -s &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git-和-Github\"><a href=\"#Git-和-Github\" class=\"headerlink\" title=\"Git 和 Github\"></a>Git 和 Github</h2><p>上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。<br><img src=\"https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg\" alt=\"Github\"></p>\n<p><strong>这里将Github作为远程仓库，记录用Git连接Github的过程</strong></p>\n<p><em><strong>未完待续</strong></em></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h2 id=\"git的安装\"><a href=\"#git的安装\" class=\"headerlink\" title=\"git的安装\"></a>git的安装</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>有一个我觉得非常详细的教程，就贴在这里：<br><a href=\"https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142%5Ev82%5Einsert_down38,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187\">git安装详细教程（CSDN）</a><br>按照上面的教程一步一步来安装，基本上是没有问题的。</p>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><p>暂时先晾在这，后面再整理</p>\n<h2 id=\"Git的工作流程\"><a href=\"#Git的工作流程\" class=\"headerlink\" title=\"Git的工作流程\"></a>Git的工作流程</h2><ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><p>Git的作用是什么？<strong>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</strong></p>\n<p>常用的命令有以下六个命令：</p>\n<ul>\n<li>git clone</li>\n<li>git push</li>\n<li>git add</li>\n<li>git commit</li>\n<li>git checkout</li>\n<li>git pull</li>\n</ul>\n<h2 id=\"Git创建仓库\"><a href=\"#Git创建仓库\" class=\"headerlink\" title=\"Git创建仓库\"></a>Git创建仓库</h2><p>初始化一个仓库的命令：</p>\n<ul>\n<li>如果使用当前目录作为Git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init<br></code></pre></td></tr></table></figure></li>\n<li>如果使用指定目录作为git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init newrepo<br><br>newrepo是指定目录的路径<br></code></pre></td></tr></table></figure>\n初始化后，会在newrepo下生成 <strong>.git</strong>的目录，<strong>这个目录存放着所有Git需要的数据和资源</strong>。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。</li>\n</ul>\n<hr>\n<p>创建仓库可以在空目录下，也可以在非空目录下。<strong>非空目录</strong>下，使用<strong>git add</strong>命令将仓库下的所有文件放入Git中，进行提交即可；<strong>空目录</strong>下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。</p>\n<p>克隆仓库的命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br><br><span class=\"hljs-tag\">&lt;repo&gt;</span> 是仓库的http地址<br></code></pre></td></tr></table></figure>\n<p>上面这条克隆命令，是将 <strong>repo</strong>地址下的仓库克隆到了当前目录。</p>\n<p>将仓库克隆到指定目录下的命令：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git clone <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span>是仓库的http地址<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>是本地目录<br></code></pre></td></tr></table></figure>\n\n<p>执行了克隆命令后，会在当前目录下创建一个<strong>以克隆的仓库名为文件名的新目录</strong>，新目录下包含一个 <strong>.git</strong>文件，这里的 <strong>.git</strong>文件用于保存下载下来的所有版本记录。</p>\n<p>如果想要自己定义新目录的名称，可以输入以下命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt; 自定义名<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。</p>\n<p>git的配置的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config<br></code></pre></td></tr></table></figure>\n\n<p><strong>编辑git的配置文件</strong><br><strong>只针对当前仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e  <br></code></pre></td></tr></table></figure>\n\n<p><strong>针对本地上的所有仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e -global<br></code></pre></td></tr></table></figure>\n\n<p><strong>设置提交代码时的用户信息：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -global user.name &quot;username&quot;<br>git config -global user.email user@useremail.com <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意这里的-global去掉的话，命令只会对当前仓库有效</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git分支管理\"><a href=\"#Git分支管理\" class=\"headerlink\" title=\"Git分支管理\"></a>Git分支管理</h2><p>有一张图可以说明Git分支管理的模式<br><img src=\"https://static.runoob.com/images/svg/git-brance.svg\" alt=\"git分支管理\"></p>\n<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>\n<p><strong>创建分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git branch (branchname)<br></code></pre></td></tr></table></figure>\n\n<p><strong>切换分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout (branchname)<br></code></pre></td></tr></table></figure>\n<p>这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> checkout -<span class=\"hljs-keyword\">b</span> (branchname)<br></code></pre></td></tr></table></figure>\n<hr>\n<p>这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录</p>\n<p><strong>合并分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git merge<br></code></pre></td></tr></table></figure>\n\n<p><strong>删除分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout -d (branchname)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git查看提交历史\"><a href=\"#Git查看提交历史\" class=\"headerlink\" title=\"Git查看提交历史\"></a>Git查看提交历史</h2><p><strong>常用的一般有两个命令：</strong></p>\n<ul>\n<li>git log —查看历史提交记录 </li>\n<li>git blame &lt; blame&gt; —以列表形式查看指定文件的历史修改记录</li>\n</ul>\n<p><strong>git log</strong><br><strong>查看历史记录的简洁的版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看历史中什么时候出现了分支、合并</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -graph -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>逆向显示所有日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -reverse -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查找指定用户的提交日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -author=name -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>指定日期，可以执行几个选项：–since 和 –before，也可以用 –until 和 –after</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline -before=&#123;2.weeks.ago&#125; -after=&#123;2021-04-09&#125; <br></code></pre></td></tr></table></figure>\n\n<p><strong>还有很多git log命令，可以进入这个网站进行查询：</strong><a href=\"https://git-scm.com/docs/git-log\">Git log命令</a></p>\n<hr>\n<p><strong>git blame</strong><br>作用是：<strong>查看指定文件的修改记录</strong></p>\n<h2 id=\"Git标签\"><a href=\"#Git标签\" class=\"headerlink\" title=\"Git标签\"></a>Git标签</h2><p>创建一个带注解的标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a v1.1<br></code></pre></td></tr></table></figure>\n\n<p>查看所有标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag<br></code></pre></td></tr></table></figure>\n\n<p>指定标签信息命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<p>PGP签名标签命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -s &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git-和-Github\"><a href=\"#Git-和-Github\" class=\"headerlink\" title=\"Git 和 Github\"></a>Git 和 Github</h2><p>上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。<br><img src=\"https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg\" alt=\"Github\"></p>\n<p><strong>这里将Github作为远程仓库，记录用Git连接Github的过程</strong></p>\n<p><em><strong>未完待续</strong></em></p>\n"},{"title":"SpringBoot","date":"2023-11-24T03:26:56.000Z","_content":"","source":"_posts/SpringBoot.md","raw":"---\ntitle: SpringBoot\ndate: 2023-11-24 11:26:56\ntags:\ncategories: 后端\n---\n","slug":"SpringBoot","published":1,"updated":"2023-11-27T01:31:25.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e9000j6ht031r0aw4z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo博客自定义","date":"2023-03-07T10:12:22.000Z","_content":"\n## Next主题\nHexo博客支持很多种主题，这里的话只记录Next主题的配置方法\n### Next主题的安装和配置\n1. 在博客主目录下执行\n```\n    git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n2. 配置_config.yml文件\n```\n    theme:next\n```\n3. Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换\n- **注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml**\n```\n    override：false #表示是否将主题置为默认样式\ncache:\n\tenable:true #表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快\nmenu: #设置博客各个页面的相对路径，默认根路径是blog/source\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar #日历\n  #sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取\n  #commonweal: /404/ || heartbeat # 腾讯公益404\n\n# Enable/Disable menu icons / item badges.\nmenu_settings:\n  icons: true # 是否显示各个页面的图标\n  badges: true # 是否显示分类/标签/归档页的内容量\n# Schemes\nscheme: Gemini\n```\n### Next各种新鲜玩法\n目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法\n1. 在每篇文章末尾统一添加“本文结束”标记\\\n**实现效果图:**\n![](https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png)\n**实现方法：**\n1. 在路径 \\themes\\next\\layout\\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：\n```\n    <div>\n        {% if not is_index %}\n            <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n        {% endif %}\n    </div>\n```\n2. 接着打开路径\\themes\\next\\layout\\_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）\n```\n      {%- if not is_index %}\n        {{ partial('_macro/passage-end-tag.swig') }}\n      {%- endif %}\n```\n3. 打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：\n```\n    # 文章末尾添加“本文结束”标记\n    passage_end_tag:\n        enabled: true\n```\n完成后即可显示对应标记\n\n### 参考链接\n[hexo博客如何写作和更新](https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187)\\\n[hexo博客优化和美化](https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187)\\\n[macOS刷新DNS](https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187)\\\n[hexo攻略添加分类和标签](https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187)\\\n[hexo美化加强版](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n\n## fluid主题\n参考文档---[fluid主题用户手册](https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B)\n**具体配置参考用户手册即可**","source":"_posts/hexo博客自定义.md","raw":"---\ntitle: hexo博客自定义\ndate: 2023-03-07 18:12:22\ntags:\ncategories: Hexo\n---\n\n## Next主题\nHexo博客支持很多种主题，这里的话只记录Next主题的配置方法\n### Next主题的安装和配置\n1. 在博客主目录下执行\n```\n    git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n2. 配置_config.yml文件\n```\n    theme:next\n```\n3. Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换\n- **注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml**\n```\n    override：false #表示是否将主题置为默认样式\ncache:\n\tenable:true #表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快\nmenu: #设置博客各个页面的相对路径，默认根路径是blog/source\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar #日历\n  #sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取\n  #commonweal: /404/ || heartbeat # 腾讯公益404\n\n# Enable/Disable menu icons / item badges.\nmenu_settings:\n  icons: true # 是否显示各个页面的图标\n  badges: true # 是否显示分类/标签/归档页的内容量\n# Schemes\nscheme: Gemini\n```\n### Next各种新鲜玩法\n目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法\n1. 在每篇文章末尾统一添加“本文结束”标记\\\n**实现效果图:**\n![](https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png)\n**实现方法：**\n1. 在路径 \\themes\\next\\layout\\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：\n```\n    <div>\n        {% if not is_index %}\n            <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n        {% endif %}\n    </div>\n```\n2. 接着打开路径\\themes\\next\\layout\\_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）\n```\n      {%- if not is_index %}\n        {{ partial('_macro/passage-end-tag.swig') }}\n      {%- endif %}\n```\n3. 打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：\n```\n    # 文章末尾添加“本文结束”标记\n    passage_end_tag:\n        enabled: true\n```\n完成后即可显示对应标记\n\n### 参考链接\n[hexo博客如何写作和更新](https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187)\\\n[hexo博客优化和美化](https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187)\\\n[macOS刷新DNS](https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187)\\\n[hexo攻略添加分类和标签](https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187)\\\n[hexo美化加强版](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n\n## fluid主题\n参考文档---[fluid主题用户手册](https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B)\n**具体配置参考用户手册即可**","slug":"hexo博客自定义","published":1,"updated":"2023-03-09T15:44:08.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1e9000m6ht0ffnb8pyk","content":"<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><p>Hexo博客支持很多种主题，这里的话只记录Next主题的配置方法</p>\n<h3 id=\"Next主题的安装和配置\"><a href=\"#Next主题的安装和配置\" class=\"headerlink\" title=\"Next主题的安装和配置\"></a>Next主题的安装和配置</h3><ol>\n<li>在博客主目录下执行<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/theme-next/</span>hexo-theme-<span class=\"hljs-keyword\">next</span> themes/<span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>配置_config.yml文件<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\"><span class=\"hljs-symbol\">theme:</span><span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换</li>\n</ol>\n<ul>\n<li><strong>注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml</strong><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\">    override：false <span class=\"hljs-meta\">#表示是否将主题置为默认样式</span><br><span class=\"hljs-symbol\">cache:</span><br><span class=\"hljs-symbol\">\tenable:</span>true <span class=\"hljs-meta\">#表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快</span><br><span class=\"hljs-symbol\">menu:</span> <span class=\"hljs-meta\">#设置博客各个页面的相对路径，默认根路径是blog/source</span><br><span class=\"hljs-symbol\">  home:</span> / || home<br><span class=\"hljs-symbol\">  about:</span> <span class=\"hljs-keyword\">/about/</span> || user<br><span class=\"hljs-symbol\">  tags:</span> <span class=\"hljs-keyword\">/tags/</span> || tags<br><span class=\"hljs-symbol\">  categories:</span> <span class=\"hljs-keyword\">/categories/</span> || th<br><span class=\"hljs-symbol\">  archives:</span> <span class=\"hljs-keyword\">/archives/</span> || archive<br>  <span class=\"hljs-meta\">#schedule: /schedule/ || calendar #日历</span><br>  <span class=\"hljs-meta\">#sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取</span><br>  <span class=\"hljs-meta\">#commonweal: /404/ || heartbeat # 腾讯公益404</span><br><br><span class=\"hljs-meta\"># Enable/Disable menu icons / item badges.</span><br><span class=\"hljs-symbol\">menu_settings:</span><br><span class=\"hljs-symbol\">  icons:</span> true <span class=\"hljs-meta\"># 是否显示各个页面的图标</span><br><span class=\"hljs-symbol\">  badges:</span> true <span class=\"hljs-meta\"># 是否显示分类/标签/归档页的内容量</span><br><span class=\"hljs-meta\"># Schemes</span><br><span class=\"hljs-symbol\">scheme:</span> Gemini<br></code></pre></td></tr></table></figure>\n<h3 id=\"Next各种新鲜玩法\"><a href=\"#Next各种新鲜玩法\" class=\"headerlink\" title=\"Next各种新鲜玩法\"></a>Next各种新鲜玩法</h3>目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法</li>\n</ul>\n<ol>\n<li>在每篇文章末尾统一添加“本文结束”标记\\</li>\n</ol>\n<p><strong>实现效果图:</strong><br><img src=\"https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png\"><br><strong>实现方法：</strong></p>\n<ol>\n<li>在路径 \\themes\\next\\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">if</span></span> not is_index %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;fa fa-paw&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>感谢您的阅读-------------<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">endif</span></span> %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li>\n<li>接着打开路径\\themes\\next\\layout_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">&#123;%- if not is_index %&#125;</span><br><span class=\"language-xml\">  </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\"><span class=\"hljs-built_in\">partial</span></span>(<span class=\"hljs-name\">&#x27;_macro/passage-end-tag.swig&#x27;</span>) &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">&#123;%- endif %&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># 文章末尾添加“本文结束”标记</span><br><span class=\"hljs-attr\">passage_end_tag:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n完成后即可显示对应标记</li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187\">hexo博客如何写作和更新</a><br><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187\">hexo博客优化和美化</a><br><a href=\"https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187\">macOS刷新DNS</a><br><a href=\"https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187\">hexo攻略添加分类和标签</a><br><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\">hexo美化加强版</a></p>\n<h2 id=\"fluid主题\"><a href=\"#fluid主题\" class=\"headerlink\" title=\"fluid主题\"></a>fluid主题</h2><p>参考文档—<a href=\"https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B\">fluid主题用户手册</a><br><strong>具体配置参考用户手册即可</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><p>Hexo博客支持很多种主题，这里的话只记录Next主题的配置方法</p>\n<h3 id=\"Next主题的安装和配置\"><a href=\"#Next主题的安装和配置\" class=\"headerlink\" title=\"Next主题的安装和配置\"></a>Next主题的安装和配置</h3><ol>\n<li>在博客主目录下执行<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/theme-next/</span>hexo-theme-<span class=\"hljs-keyword\">next</span> themes/<span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>配置_config.yml文件<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\"><span class=\"hljs-symbol\">theme:</span><span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换</li>\n</ol>\n<ul>\n<li><strong>注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml</strong><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\">    override：false <span class=\"hljs-meta\">#表示是否将主题置为默认样式</span><br><span class=\"hljs-symbol\">cache:</span><br><span class=\"hljs-symbol\">\tenable:</span>true <span class=\"hljs-meta\">#表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快</span><br><span class=\"hljs-symbol\">menu:</span> <span class=\"hljs-meta\">#设置博客各个页面的相对路径，默认根路径是blog/source</span><br><span class=\"hljs-symbol\">  home:</span> / || home<br><span class=\"hljs-symbol\">  about:</span> <span class=\"hljs-keyword\">/about/</span> || user<br><span class=\"hljs-symbol\">  tags:</span> <span class=\"hljs-keyword\">/tags/</span> || tags<br><span class=\"hljs-symbol\">  categories:</span> <span class=\"hljs-keyword\">/categories/</span> || th<br><span class=\"hljs-symbol\">  archives:</span> <span class=\"hljs-keyword\">/archives/</span> || archive<br>  <span class=\"hljs-meta\">#schedule: /schedule/ || calendar #日历</span><br>  <span class=\"hljs-meta\">#sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取</span><br>  <span class=\"hljs-meta\">#commonweal: /404/ || heartbeat # 腾讯公益404</span><br><br><span class=\"hljs-meta\"># Enable/Disable menu icons / item badges.</span><br><span class=\"hljs-symbol\">menu_settings:</span><br><span class=\"hljs-symbol\">  icons:</span> true <span class=\"hljs-meta\"># 是否显示各个页面的图标</span><br><span class=\"hljs-symbol\">  badges:</span> true <span class=\"hljs-meta\"># 是否显示分类/标签/归档页的内容量</span><br><span class=\"hljs-meta\"># Schemes</span><br><span class=\"hljs-symbol\">scheme:</span> Gemini<br></code></pre></td></tr></table></figure>\n<h3 id=\"Next各种新鲜玩法\"><a href=\"#Next各种新鲜玩法\" class=\"headerlink\" title=\"Next各种新鲜玩法\"></a>Next各种新鲜玩法</h3>目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法</li>\n</ul>\n<ol>\n<li>在每篇文章末尾统一添加“本文结束”标记\\</li>\n</ol>\n<p><strong>实现效果图:</strong><br><img src=\"https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png\"><br><strong>实现方法：</strong></p>\n<ol>\n<li>在路径 \\themes\\next\\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">if</span></span> not is_index %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;fa fa-paw&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>感谢您的阅读-------------<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">endif</span></span> %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li>\n<li>接着打开路径\\themes\\next\\layout_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">&#123;%- if not is_index %&#125;</span><br><span class=\"language-xml\">  </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\"><span class=\"hljs-built_in\">partial</span></span>(<span class=\"hljs-name\">&#x27;_macro/passage-end-tag.swig&#x27;</span>) &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">&#123;%- endif %&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># 文章末尾添加“本文结束”标记</span><br><span class=\"hljs-attr\">passage_end_tag:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n完成后即可显示对应标记</li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187\">hexo博客如何写作和更新</a><br><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187\">hexo博客优化和美化</a><br><a href=\"https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187\">macOS刷新DNS</a><br><a href=\"https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187\">hexo攻略添加分类和标签</a><br><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\">hexo美化加强版</a></p>\n<h2 id=\"fluid主题\"><a href=\"#fluid主题\" class=\"headerlink\" title=\"fluid主题\"></a>fluid主题</h2><p>参考文档—<a href=\"https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B\">fluid主题用户手册</a><br><strong>具体配置参考用户手册即可</strong></p>\n"},{"title":"canvas","date":"2023-11-26T13:19:02.000Z","_content":"\n# Canvas\n\n## 什么是Canvas？\nHTML5 元素用于图形的绘制，通过**脚本** (通常是JavaScript)来完成.\n\n**适配问题**\n基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如**Internet Explorer 8 及更早 IE 版本的浏览器**，这些浏览器是不支持canvas元素的。\n\n\n## 创建一个画布\n画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。\n\n通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置**width**和**height**属性，定义画布的大小；使用style属性设置边框；\n\n示例代码如下：\n```HTML\n<p>test_demo_1</p>\n<canvas id=\"canvas1\" width=\"200\" height=\"100\" style=\"border: 1px solid #000000;\">\n    \n</canvas>\n```\n\n## canvas绘图\n### canvas - 坐标\ncanvas是一个二维网格，画布的左上角坐标为(0,0)。\n\n想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。\n\nJavaScript怎么使用canvas进行绘图()？\n- 找到canvas元素\n```JavaScript\n    var c = document.getElementById(\"canvas1\")\n```\n\n- 创建context对象\n```JavaScript\n    var ctx = c.getContext(\"2d\")\n```\n- 根据自己的需求，对context对象进行操作\n\n这里使用绘制一个矩形作为参考\n```JavaScript\n    ctx.fillStyle=\"ff0000\"\n    ctx.fillRect(0,0,150,75)\n```\n\n**fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)**\n\n**fillRect(x,y,width,height) 方法定义了矩形当前的填充方式**\n\n\n### canvas - 路径\n画线的两种方法：\n- moveTo(x,y)  定义线条开始坐标\n- lineTo(x,y)  定义线条结束坐标\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n画圆的方法：\n- arc(x,y,r,start,stop)\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n### canvas - 文本\n重要属性和方法：\n- font - 定义字体\n- fillText(text,x,y) - 在 canvas 上绘制实心的文本\n- strokeText(text,x,y) - 在 canvas 上绘制空心的文本\n### canvas - 渐变\n设置渐变的两种方法：\n- createLinearGradient(x,y,x1,y1) - 创建线条渐变\n- createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变\n\n**createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：**\n- x 表示渐变的开始圆的 x 坐标\n- y 表示渐变的开始圆的 y 坐标\n- r 表示开始圆的半径\n- x1 表示渐变的结束圆的 x 坐标\n- y1 表示渐变的结束圆的 y 坐标\n- r1 表示结束圆的半径\n\n使用渐变对象时，必须使用两种或两种以上的渐变颜色\n**addColorStop()** 方法指定颜色停止，参数使用坐标来描述，可以是0至1\n### canvas - 图像\n把一幅图像放置到画布上, 使用以下方法:\n- drawImage(image,x,y)\n\n实例代码：\n```JavaScript\n        //在画布上画线\n        var c =document.getElementById(\"canvas1\")\n        var ctx = c.getContext(\"2d\")\n        ctx.fillStyle=\"#FF0000\"\n        ctx.fillRect(0,0,200,100)\n        ctx.moveTo(0,0)\n        ctx.lineTo(200,100)\n        ctx.stroke()\n\n        //在画布上画圆\n        var c =document.getElementById(\"canvas2\")\n        var ctx_2 = c.getContext(\"2d\")\n        ctx_2.fillStyle=\"#FF0000\"\n        ctx_2.fillRect(0,0,200,100)\n        ctx_2.beginPath()\n        ctx_2.arc(95,50,40,0,2*Math.PI)\n        ctx_2.stroke()\n\n        //在画布上写字\n        var c =document.getElementById(\"canvas3\")\n        var ctx_3 = c.getContext(\"2d\")\n        ctx_3.font=\"30px Arial\";\n        ctx_3.fillText(\"Hello World\",10,50)\n\n        //在画布上实现渐变效果\n        var c =document.getElementById(\"canvas4\")\n        var ctx_4 = c.getContext(\"2d\")\n        \n        //创造gradient\n        //实现线性渐变\n        var grd = ctx_4.createLinearGradient(0,0,200,0)\n        //实现圆形渐变\n        //var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)\n        grd.addColorStop(0,\"red\")\n        grd.addColorStop(1,\"white\")\n\n        //将grd对象当成fillStyle覆盖整个画板\n        ctx_4.fillStyle = grd\n        ctx_4.fillRect(10,10,150,80)\n\n\n```\n\n\n[canvas参考手册](https://www.w3cschool.cn/htmltags/ref-canvas.html)","source":"_posts/canvas.md","raw":"---\ntitle: canvas\ndate: 2023-11-26 21:19:02\ntags:\ncategories: 前端\n---\n\n# Canvas\n\n## 什么是Canvas？\nHTML5 元素用于图形的绘制，通过**脚本** (通常是JavaScript)来完成.\n\n**适配问题**\n基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如**Internet Explorer 8 及更早 IE 版本的浏览器**，这些浏览器是不支持canvas元素的。\n\n\n## 创建一个画布\n画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。\n\n通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置**width**和**height**属性，定义画布的大小；使用style属性设置边框；\n\n示例代码如下：\n```HTML\n<p>test_demo_1</p>\n<canvas id=\"canvas1\" width=\"200\" height=\"100\" style=\"border: 1px solid #000000;\">\n    \n</canvas>\n```\n\n## canvas绘图\n### canvas - 坐标\ncanvas是一个二维网格，画布的左上角坐标为(0,0)。\n\n想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。\n\nJavaScript怎么使用canvas进行绘图()？\n- 找到canvas元素\n```JavaScript\n    var c = document.getElementById(\"canvas1\")\n```\n\n- 创建context对象\n```JavaScript\n    var ctx = c.getContext(\"2d\")\n```\n- 根据自己的需求，对context对象进行操作\n\n这里使用绘制一个矩形作为参考\n```JavaScript\n    ctx.fillStyle=\"ff0000\"\n    ctx.fillRect(0,0,150,75)\n```\n\n**fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)**\n\n**fillRect(x,y,width,height) 方法定义了矩形当前的填充方式**\n\n\n### canvas - 路径\n画线的两种方法：\n- moveTo(x,y)  定义线条开始坐标\n- lineTo(x,y)  定义线条结束坐标\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n画圆的方法：\n- arc(x,y,r,start,stop)\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n### canvas - 文本\n重要属性和方法：\n- font - 定义字体\n- fillText(text,x,y) - 在 canvas 上绘制实心的文本\n- strokeText(text,x,y) - 在 canvas 上绘制空心的文本\n### canvas - 渐变\n设置渐变的两种方法：\n- createLinearGradient(x,y,x1,y1) - 创建线条渐变\n- createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变\n\n**createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：**\n- x 表示渐变的开始圆的 x 坐标\n- y 表示渐变的开始圆的 y 坐标\n- r 表示开始圆的半径\n- x1 表示渐变的结束圆的 x 坐标\n- y1 表示渐变的结束圆的 y 坐标\n- r1 表示结束圆的半径\n\n使用渐变对象时，必须使用两种或两种以上的渐变颜色\n**addColorStop()** 方法指定颜色停止，参数使用坐标来描述，可以是0至1\n### canvas - 图像\n把一幅图像放置到画布上, 使用以下方法:\n- drawImage(image,x,y)\n\n实例代码：\n```JavaScript\n        //在画布上画线\n        var c =document.getElementById(\"canvas1\")\n        var ctx = c.getContext(\"2d\")\n        ctx.fillStyle=\"#FF0000\"\n        ctx.fillRect(0,0,200,100)\n        ctx.moveTo(0,0)\n        ctx.lineTo(200,100)\n        ctx.stroke()\n\n        //在画布上画圆\n        var c =document.getElementById(\"canvas2\")\n        var ctx_2 = c.getContext(\"2d\")\n        ctx_2.fillStyle=\"#FF0000\"\n        ctx_2.fillRect(0,0,200,100)\n        ctx_2.beginPath()\n        ctx_2.arc(95,50,40,0,2*Math.PI)\n        ctx_2.stroke()\n\n        //在画布上写字\n        var c =document.getElementById(\"canvas3\")\n        var ctx_3 = c.getContext(\"2d\")\n        ctx_3.font=\"30px Arial\";\n        ctx_3.fillText(\"Hello World\",10,50)\n\n        //在画布上实现渐变效果\n        var c =document.getElementById(\"canvas4\")\n        var ctx_4 = c.getContext(\"2d\")\n        \n        //创造gradient\n        //实现线性渐变\n        var grd = ctx_4.createLinearGradient(0,0,200,0)\n        //实现圆形渐变\n        //var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)\n        grd.addColorStop(0,\"red\")\n        grd.addColorStop(1,\"white\")\n\n        //将grd对象当成fillStyle覆盖整个画板\n        ctx_4.fillStyle = grd\n        ctx_4.fillRect(10,10,150,80)\n\n\n```\n\n\n[canvas参考手册](https://www.w3cschool.cn/htmltags/ref-canvas.html)","slug":"canvas","published":1,"updated":"2023-11-27T01:30:13.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1ea000o6ht03307gvhc","content":"<h1 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h1><h2 id=\"什么是Canvas？\"><a href=\"#什么是Canvas？\" class=\"headerlink\" title=\"什么是Canvas？\"></a>什么是Canvas？</h2><p>HTML5 元素用于图形的绘制，通过<strong>脚本</strong> (通常是JavaScript)来完成.</p>\n<p><strong>适配问题</strong><br>基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如<strong>Internet Explorer 8 及更早 IE 版本的浏览器</strong>，这些浏览器是不支持canvas元素的。</p>\n<h2 id=\"创建一个画布\"><a href=\"#创建一个画布\" class=\"headerlink\" title=\"创建一个画布\"></a>创建一个画布</h2><p>画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。</p>\n<p>通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置<strong>width</strong>和<strong>height</strong>属性，定义画布的大小；使用style属性设置边框；</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>test_demo_1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas1&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;200&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;border: 1px solid #000000;&quot;</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"canvas绘图\"><a href=\"#canvas绘图\" class=\"headerlink\" title=\"canvas绘图\"></a>canvas绘图</h2><h3 id=\"canvas-坐标\"><a href=\"#canvas-坐标\" class=\"headerlink\" title=\"canvas - 坐标\"></a>canvas - 坐标</h3><p>canvas是一个二维网格，画布的左上角坐标为(0,0)。</p>\n<p>想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。</p>\n<p>JavaScript怎么使用canvas进行绘图()？</p>\n<ul>\n<li><p>找到canvas元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>创建context对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>根据自己的需求，对context对象进行操作</p>\n</li>\n</ul>\n<p>这里使用绘制一个矩形作为参考</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\">ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;ff0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">75</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)</strong></p>\n<p><strong>fillRect(x,y,width,height) 方法定义了矩形当前的填充方式</strong></p>\n<h3 id=\"canvas-路径\"><a href=\"#canvas-路径\" class=\"headerlink\" title=\"canvas - 路径\"></a>canvas - 路径</h3><p>画线的两种方法：</p>\n<ul>\n<li>moveTo(x,y)  定义线条开始坐标</li>\n<li>lineTo(x,y)  定义线条结束坐标</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<p>画圆的方法：</p>\n<ul>\n<li>arc(x,y,r,start,stop)</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<h3 id=\"canvas-文本\"><a href=\"#canvas-文本\" class=\"headerlink\" title=\"canvas - 文本\"></a>canvas - 文本</h3><p>重要属性和方法：</p>\n<ul>\n<li>font - 定义字体</li>\n<li>fillText(text,x,y) - 在 canvas 上绘制实心的文本</li>\n<li>strokeText(text,x,y) - 在 canvas 上绘制空心的文本<h3 id=\"canvas-渐变\"><a href=\"#canvas-渐变\" class=\"headerlink\" title=\"canvas - 渐变\"></a>canvas - 渐变</h3>设置渐变的两种方法：</li>\n<li>createLinearGradient(x,y,x1,y1) - 创建线条渐变</li>\n<li>createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变</li>\n</ul>\n<p><strong>createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：</strong></p>\n<ul>\n<li>x 表示渐变的开始圆的 x 坐标</li>\n<li>y 表示渐变的开始圆的 y 坐标</li>\n<li>r 表示开始圆的半径</li>\n<li>x1 表示渐变的结束圆的 x 坐标</li>\n<li>y1 表示渐变的结束圆的 y 坐标</li>\n<li>r1 表示结束圆的半径</li>\n</ul>\n<p>使用渐变对象时，必须使用两种或两种以上的渐变颜色<br><strong>addColorStop()</strong> 方法指定颜色停止，参数使用坐标来描述，可以是0至1</p>\n<h3 id=\"canvas-图像\"><a href=\"#canvas-图像\" class=\"headerlink\" title=\"canvas - 图像\"></a>canvas - 图像</h3><p>把一幅图像放置到画布上, 使用以下方法:</p>\n<ul>\n<li>drawImage(image,x,y)</li>\n</ul>\n<p>实例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//在画布上画线</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">moveTo</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)<br>ctx.<span class=\"hljs-title function_\">lineTo</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上画圆</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas2&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_2 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_2.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx_2.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx_2.<span class=\"hljs-title function_\">beginPath</span>()<br>ctx_2.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-number\">95</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>*<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>)<br>ctx_2.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上写字</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas3&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_3 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_3.<span class=\"hljs-property\">font</span>=<span class=\"hljs-string\">&quot;30px Arial&quot;</span>;<br>ctx_3.<span class=\"hljs-title function_\">fillText</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">50</span>)<br><br><span class=\"hljs-comment\">//在画布上实现渐变效果</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas4&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_4 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br><br><span class=\"hljs-comment\">//创造gradient</span><br><span class=\"hljs-comment\">//实现线性渐变</span><br><span class=\"hljs-keyword\">var</span> grd = ctx_4.<span class=\"hljs-title function_\">createLinearGradient</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-comment\">//实现圆形渐变</span><br><span class=\"hljs-comment\">//var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)</span><br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;red&quot;</span>)<br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;white&quot;</span>)<br><br><span class=\"hljs-comment\">//将grd对象当成fillStyle覆盖整个画板</span><br>ctx_4.<span class=\"hljs-property\">fillStyle</span> = grd<br>ctx_4.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">80</span>)<br><br><br></code></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://www.w3cschool.cn/htmltags/ref-canvas.html\">canvas参考手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h1><h2 id=\"什么是Canvas？\"><a href=\"#什么是Canvas？\" class=\"headerlink\" title=\"什么是Canvas？\"></a>什么是Canvas？</h2><p>HTML5 元素用于图形的绘制，通过<strong>脚本</strong> (通常是JavaScript)来完成.</p>\n<p><strong>适配问题</strong><br>基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如<strong>Internet Explorer 8 及更早 IE 版本的浏览器</strong>，这些浏览器是不支持canvas元素的。</p>\n<h2 id=\"创建一个画布\"><a href=\"#创建一个画布\" class=\"headerlink\" title=\"创建一个画布\"></a>创建一个画布</h2><p>画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。</p>\n<p>通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置<strong>width</strong>和<strong>height</strong>属性，定义画布的大小；使用style属性设置边框；</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>test_demo_1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas1&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;200&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;border: 1px solid #000000;&quot;</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"canvas绘图\"><a href=\"#canvas绘图\" class=\"headerlink\" title=\"canvas绘图\"></a>canvas绘图</h2><h3 id=\"canvas-坐标\"><a href=\"#canvas-坐标\" class=\"headerlink\" title=\"canvas - 坐标\"></a>canvas - 坐标</h3><p>canvas是一个二维网格，画布的左上角坐标为(0,0)。</p>\n<p>想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。</p>\n<p>JavaScript怎么使用canvas进行绘图()？</p>\n<ul>\n<li><p>找到canvas元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>创建context对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>根据自己的需求，对context对象进行操作</p>\n</li>\n</ul>\n<p>这里使用绘制一个矩形作为参考</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\">ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;ff0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">75</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)</strong></p>\n<p><strong>fillRect(x,y,width,height) 方法定义了矩形当前的填充方式</strong></p>\n<h3 id=\"canvas-路径\"><a href=\"#canvas-路径\" class=\"headerlink\" title=\"canvas - 路径\"></a>canvas - 路径</h3><p>画线的两种方法：</p>\n<ul>\n<li>moveTo(x,y)  定义线条开始坐标</li>\n<li>lineTo(x,y)  定义线条结束坐标</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<p>画圆的方法：</p>\n<ul>\n<li>arc(x,y,r,start,stop)</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<h3 id=\"canvas-文本\"><a href=\"#canvas-文本\" class=\"headerlink\" title=\"canvas - 文本\"></a>canvas - 文本</h3><p>重要属性和方法：</p>\n<ul>\n<li>font - 定义字体</li>\n<li>fillText(text,x,y) - 在 canvas 上绘制实心的文本</li>\n<li>strokeText(text,x,y) - 在 canvas 上绘制空心的文本<h3 id=\"canvas-渐变\"><a href=\"#canvas-渐变\" class=\"headerlink\" title=\"canvas - 渐变\"></a>canvas - 渐变</h3>设置渐变的两种方法：</li>\n<li>createLinearGradient(x,y,x1,y1) - 创建线条渐变</li>\n<li>createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变</li>\n</ul>\n<p><strong>createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：</strong></p>\n<ul>\n<li>x 表示渐变的开始圆的 x 坐标</li>\n<li>y 表示渐变的开始圆的 y 坐标</li>\n<li>r 表示开始圆的半径</li>\n<li>x1 表示渐变的结束圆的 x 坐标</li>\n<li>y1 表示渐变的结束圆的 y 坐标</li>\n<li>r1 表示结束圆的半径</li>\n</ul>\n<p>使用渐变对象时，必须使用两种或两种以上的渐变颜色<br><strong>addColorStop()</strong> 方法指定颜色停止，参数使用坐标来描述，可以是0至1</p>\n<h3 id=\"canvas-图像\"><a href=\"#canvas-图像\" class=\"headerlink\" title=\"canvas - 图像\"></a>canvas - 图像</h3><p>把一幅图像放置到画布上, 使用以下方法:</p>\n<ul>\n<li>drawImage(image,x,y)</li>\n</ul>\n<p>实例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//在画布上画线</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">moveTo</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)<br>ctx.<span class=\"hljs-title function_\">lineTo</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上画圆</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas2&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_2 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_2.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx_2.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx_2.<span class=\"hljs-title function_\">beginPath</span>()<br>ctx_2.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-number\">95</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>*<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>)<br>ctx_2.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上写字</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas3&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_3 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_3.<span class=\"hljs-property\">font</span>=<span class=\"hljs-string\">&quot;30px Arial&quot;</span>;<br>ctx_3.<span class=\"hljs-title function_\">fillText</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">50</span>)<br><br><span class=\"hljs-comment\">//在画布上实现渐变效果</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas4&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_4 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br><br><span class=\"hljs-comment\">//创造gradient</span><br><span class=\"hljs-comment\">//实现线性渐变</span><br><span class=\"hljs-keyword\">var</span> grd = ctx_4.<span class=\"hljs-title function_\">createLinearGradient</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-comment\">//实现圆形渐变</span><br><span class=\"hljs-comment\">//var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)</span><br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;red&quot;</span>)<br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;white&quot;</span>)<br><br><span class=\"hljs-comment\">//将grd对象当成fillStyle覆盖整个画板</span><br>ctx_4.<span class=\"hljs-property\">fillStyle</span> = grd<br>ctx_4.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">80</span>)<br><br><br></code></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://www.w3cschool.cn/htmltags/ref-canvas.html\">canvas参考手册</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-02-08T07:41:07.140Z","updated":"2023-02-08T07:41:07.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1ea000q6ht0gcs0bh9o","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"个人博客搭建教程及避坑指南","date":"2023-02-08T17:06:46.000Z","_content":"# 搭建一个个人博客\n```\n    本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善\n```\n\n## 写在前面\n### 提示\n搭建环境：macOS\\\nmd文件编辑器；vs code\\\n如何使用markdown语言编写博客：[markdown教程](https://www.runoob.com/markdown/md-table.html)\\\n博客GitHub地址：[点击跳转](https://github.com/gooddefense/gooddefense.github.io)\n\n\n### 作者想说 \n今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。\n\n[参考链接](https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&spm=1018.2226.3001.4187)\n\n## 可能会用到的一些异常解决办法(持续更新)\n**提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料**\n### 输入指令后长时间没有响应\n碰到以下情况：\n- 输入指令\n```\n    git push\n    git pull\n```\n- 出现长时间无法登陆GitHub\n\n**解决办法：**\n\n刷新DNS缓存：\n在终端输入以下指令\n```\n    sudo killall -HUP mDNSResponder\n```\n\n\n\n## 搭建过程\n```\n我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。\n```\n\n### 创建Github仓库\n- 登录GitHub账号，如果没有的话就先注册一个\n- 登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了\n\n### 配置SSH keys\n1. 打开终端，输入命令\n```\n    cd ~/.ssh    #进入电脑下的ssh文件\n```\n2. 生成新的SSH keys\n```\n    ssh-keygen -t rsa -C \"你的邮箱地址\"\n```\n执行此条命令后，最后出现类似长方形的字符画即表示成功。\n3. 将SSH keys添加进Github\n- 打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)\n- 复制所有内容\n- 进入Github->点击头像栏的settings->选择SSH and GPG keys->点击New SSH Key->将内容复制进key->点击add SSH Key\n4. 进行测试，输入以下指令：\n```\nssh -T git@GitHub.com #全部复制，无需更改\n```\n接下来会出现\n```\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?<输入yes>\nHi 你的用户名! You've successfully authenticated, but GitHub does not provide shell access.\n```\n出现以上提示，则证明添加SSH Keys成功\n5. 测试Github Pages是否创建成功，输入以下命令：\n```\necho \"# 你的用户名.github.io\" >> README.md\ngit init    \ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/你的用户名/你的用户名.github.io.git\ngit push -u origin master\n```\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。\n\n\n### 安装nvm(避坑)\n    这里需要注意，先安装好nvm，再去安装nodejs\n#### 原因\n- nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错\n![引用自csdn](https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70)\n导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面\n\n#### 开始安装\n- 开始之前先确认node和npm都已经卸载完成\n- 从github上获取nvm最新下载命令进行下载\n[nvm github网址](https://github.com/nvm-sh/nvm)\n```\n    这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。\n    解决方案如下：\n    1. 进入该网址： https://www.ipaddress.com/ \n    2. 查询拒绝访问的网址的IP地址，拉到最下面，复制下来\n    3. 终端输入：sudo vim /etc/hosts\n    4. 在文件最后输入：（IP地址）（网址）\n    5. 保存文件后，重新执行最新下载命令即可\n    6. 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决\n    7. 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。\n    8. 输入：nvm -v查看版本号，有显示说明安装成功\n```\n![](https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png)\n \n\n### 安装nodejs\n- 在nvm安装完成的基础上，执行命令：\n```\n    nvm install node\n```\n等待完成即可\n### 安装hexo\n- 执行以下代码：\n```\n    npm install -g hexo-cli\n    hexo init blog\n    cd blog\n    npm install\n```\n- 测试hexo是否可以运行\n```\n    cd blog\n    hexo s\n```\n在浏览器上输入**http://localhost:4000/**，如果显示网页，则证明成功\n当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器\n### 部署hexo到Github服务器上\n1. 安装hexo-deployer-git\n```\nnpm install hexo-deployer-git --save\n```\n2. 修改_config.yml (路径：/blog/_config.yml)\n```\ndeploy:\n  type: git\n  repo: <repository url> #你的 【你的名字】.github.io  这一项目的git地址#\n  branch: master \n  message: [message] #可不填写#\n```\n3. 执行命令将hexo部署到服务器上\n```\n    hexo clean\n    hexo g\n    hexo d\n```\n- 如果执行命令后出现错误，就重复执行下列语句\n```\n    npm install hexo-deployer-git --save\n```\n执行完毕后，应该就可以在**你的名字.github.io**看到你的网页了\n\n### 更新博客文章\n1. 创建新文章\n```\n    hexo new \"新文章\"\n```\n2. 编写文章\n这里推荐使用vscode，typora也行，但是typora需要付费\n3. 更新main分支\n```\n    hexo clean #可忽略\n    hexo generate #使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹\n    hexo s #启动本地服务器\n    hexo d #一键部署\n```\n4. 更新hexo分支\n```\n    git add -A （此命令用来添加所有文件到暂存区）\n    git commit -m \"新增博客文章\"  （此命令用来提交，双引号内可自定义内容，双引号前有空格）\n    git push origin hexo （此命令用来推送hexo分支到Github）\n    # 此条命令有时候会上传失败，可以使用下面这个命令\n    # git push origin HEAD:hexo\n```\n**** \n搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中--[Hexo博客自定义]()，有需要的可以移步观看。","source":"_posts/readme.md","raw":"---\ntitle: 个人博客搭建教程及避坑指南\ndate: 2023-02-09 01:06:46\ntags: \ncategories: Hexo\n---\n# 搭建一个个人博客\n```\n    本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善\n```\n\n## 写在前面\n### 提示\n搭建环境：macOS\\\nmd文件编辑器；vs code\\\n如何使用markdown语言编写博客：[markdown教程](https://www.runoob.com/markdown/md-table.html)\\\n博客GitHub地址：[点击跳转](https://github.com/gooddefense/gooddefense.github.io)\n\n\n### 作者想说 \n今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。\n\n[参考链接](https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&spm=1018.2226.3001.4187)\n\n## 可能会用到的一些异常解决办法(持续更新)\n**提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料**\n### 输入指令后长时间没有响应\n碰到以下情况：\n- 输入指令\n```\n    git push\n    git pull\n```\n- 出现长时间无法登陆GitHub\n\n**解决办法：**\n\n刷新DNS缓存：\n在终端输入以下指令\n```\n    sudo killall -HUP mDNSResponder\n```\n\n\n\n## 搭建过程\n```\n我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。\n```\n\n### 创建Github仓库\n- 登录GitHub账号，如果没有的话就先注册一个\n- 登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了\n\n### 配置SSH keys\n1. 打开终端，输入命令\n```\n    cd ~/.ssh    #进入电脑下的ssh文件\n```\n2. 生成新的SSH keys\n```\n    ssh-keygen -t rsa -C \"你的邮箱地址\"\n```\n执行此条命令后，最后出现类似长方形的字符画即表示成功。\n3. 将SSH keys添加进Github\n- 打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)\n- 复制所有内容\n- 进入Github->点击头像栏的settings->选择SSH and GPG keys->点击New SSH Key->将内容复制进key->点击add SSH Key\n4. 进行测试，输入以下指令：\n```\nssh -T git@GitHub.com #全部复制，无需更改\n```\n接下来会出现\n```\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?<输入yes>\nHi 你的用户名! You've successfully authenticated, but GitHub does not provide shell access.\n```\n出现以上提示，则证明添加SSH Keys成功\n5. 测试Github Pages是否创建成功，输入以下命令：\n```\necho \"# 你的用户名.github.io\" >> README.md\ngit init    \ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/你的用户名/你的用户名.github.io.git\ngit push -u origin master\n```\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。\n\n\n### 安装nvm(避坑)\n    这里需要注意，先安装好nvm，再去安装nodejs\n#### 原因\n- nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错\n![引用自csdn](https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70)\n导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面\n\n#### 开始安装\n- 开始之前先确认node和npm都已经卸载完成\n- 从github上获取nvm最新下载命令进行下载\n[nvm github网址](https://github.com/nvm-sh/nvm)\n```\n    这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。\n    解决方案如下：\n    1. 进入该网址： https://www.ipaddress.com/ \n    2. 查询拒绝访问的网址的IP地址，拉到最下面，复制下来\n    3. 终端输入：sudo vim /etc/hosts\n    4. 在文件最后输入：（IP地址）（网址）\n    5. 保存文件后，重新执行最新下载命令即可\n    6. 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决\n    7. 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。\n    8. 输入：nvm -v查看版本号，有显示说明安装成功\n```\n![](https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png)\n \n\n### 安装nodejs\n- 在nvm安装完成的基础上，执行命令：\n```\n    nvm install node\n```\n等待完成即可\n### 安装hexo\n- 执行以下代码：\n```\n    npm install -g hexo-cli\n    hexo init blog\n    cd blog\n    npm install\n```\n- 测试hexo是否可以运行\n```\n    cd blog\n    hexo s\n```\n在浏览器上输入**http://localhost:4000/**，如果显示网页，则证明成功\n当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器\n### 部署hexo到Github服务器上\n1. 安装hexo-deployer-git\n```\nnpm install hexo-deployer-git --save\n```\n2. 修改_config.yml (路径：/blog/_config.yml)\n```\ndeploy:\n  type: git\n  repo: <repository url> #你的 【你的名字】.github.io  这一项目的git地址#\n  branch: master \n  message: [message] #可不填写#\n```\n3. 执行命令将hexo部署到服务器上\n```\n    hexo clean\n    hexo g\n    hexo d\n```\n- 如果执行命令后出现错误，就重复执行下列语句\n```\n    npm install hexo-deployer-git --save\n```\n执行完毕后，应该就可以在**你的名字.github.io**看到你的网页了\n\n### 更新博客文章\n1. 创建新文章\n```\n    hexo new \"新文章\"\n```\n2. 编写文章\n这里推荐使用vscode，typora也行，但是typora需要付费\n3. 更新main分支\n```\n    hexo clean #可忽略\n    hexo generate #使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹\n    hexo s #启动本地服务器\n    hexo d #一键部署\n```\n4. 更新hexo分支\n```\n    git add -A （此命令用来添加所有文件到暂存区）\n    git commit -m \"新增博客文章\"  （此命令用来提交，双引号内可自定义内容，双引号前有空格）\n    git push origin hexo （此命令用来推送hexo分支到Github）\n    # 此条命令有时候会上传失败，可以使用下面这个命令\n    # git push origin HEAD:hexo\n```\n**** \n搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中--[Hexo博客自定义]()，有需要的可以移步观看。","slug":"readme","published":1,"updated":"2023-11-27T01:33:31.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1ea000t6ht05aty80gq","content":"<h1 id=\"搭建一个个人博客\"><a href=\"#搭建一个个人博客\" class=\"headerlink\" title=\"搭建一个个人博客\"></a>搭建一个个人博客</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>搭建环境：macOS<br>md文件编辑器；vs code<br>如何使用markdown语言编写博客：<a href=\"https://www.runoob.com/markdown/md-table.html\">markdown教程</a><br>博客GitHub地址：<a href=\"https://github.com/gooddefense/gooddefense.github.io\">点击跳转</a></p>\n<h3 id=\"作者想说\"><a href=\"#作者想说\" class=\"headerlink\" title=\"作者想说\"></a>作者想说</h3><p>今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。</p>\n<p><a href=\"https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&spm=1018.2226.3001.4187\">参考链接</a></p>\n<h2 id=\"可能会用到的一些异常解决办法-持续更新\"><a href=\"#可能会用到的一些异常解决办法-持续更新\" class=\"headerlink\" title=\"可能会用到的一些异常解决办法(持续更新)\"></a>可能会用到的一些异常解决办法(持续更新)</h2><p><strong>提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料</strong></p>\n<h3 id=\"输入指令后长时间没有响应\"><a href=\"#输入指令后长时间没有响应\" class=\"headerlink\" title=\"输入指令后长时间没有响应\"></a>输入指令后长时间没有响应</h3><p>碰到以下情况：</p>\n<ul>\n<li>输入指令<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">git <span class=\"hljs-built_in\">push</span><br>git pull<br></code></pre></td></tr></table></figure></li>\n<li>出现长时间无法登陆GitHub</li>\n</ul>\n<p><strong>解决办法：</strong></p>\n<p>刷新DNS缓存：<br>在终端输入以下指令</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sudo killall -HUP mDNSResponder</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><ul>\n<li>登录GitHub账号，如果没有的话就先注册一个</li>\n<li>登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了</li>\n</ul>\n<h3 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h3><ol>\n<li>打开终端，输入命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/.ssh    <span class=\"hljs-comment\">#进入电脑下的ssh文件</span><br></code></pre></td></tr></table></figure></li>\n<li>生成新的SSH keys<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;你的邮箱地址&quot;</span><br></code></pre></td></tr></table></figure>\n执行此条命令后，最后出现类似长方形的字符画即表示成功。</li>\n<li>将SSH keys添加进Github</li>\n</ol>\n<ul>\n<li>打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)</li>\n<li>复制所有内容</li>\n<li>进入Github-&gt;点击头像栏的settings-&gt;选择SSH and GPG keys-&gt;点击New SSH Key-&gt;将内容复制进key-&gt;点击add SSH Key</li>\n</ul>\n<ol start=\"4\">\n<li>进行测试，输入以下指令：<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@GitHub</span>.com <span class=\"hljs-comment\">#全部复制，无需更改</span><br></code></pre></td></tr></table></figure>\n接下来会出现<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">The</span> authenticity of host &#x27;GitHub.com (<span class=\"hljs-number\">207.97.227.239</span>)&#x27; can&#x27;t be established.<br><span class=\"hljs-attribute\">RSA</span> key fingerprint is <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">27</span>:ac:a5:<span class=\"hljs-number\">76</span>:<span class=\"hljs-number\">28</span>:<span class=\"hljs-number\">2</span>d:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">1</span>b:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">4</span>d:eb:df:a6:<span class=\"hljs-number\">48</span>.<br><span class=\"hljs-attribute\">Are</span> you sure you want to continue connecting (yes/no)?&lt;输入yes&gt;<br><span class=\"hljs-attribute\">Hi</span> 你的用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n出现以上提示，则证明添加SSH Keys成功</li>\n<li>测试Github Pages是否创建成功，输入以下命令：<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">echo</span> <span class=\"hljs-string\">&quot;# 你的用户名.github.io&quot;</span> &gt;&gt; README.md<br><span class=\"hljs-symbol\">git</span> init    <br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> README.md<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br><span class=\"hljs-symbol\">git</span> remote <span class=\"hljs-keyword\">add</span> origin https:<span class=\"hljs-comment\">//github.com/你的用户名/你的用户名.github.io.git</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push</span> -u origin master<br></code></pre></td></tr></table></figure>\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。</li>\n</ol>\n<h3 id=\"安装nvm-避坑\"><a href=\"#安装nvm-避坑\" class=\"headerlink\" title=\"安装nvm(避坑)\"></a>安装nvm(避坑)</h3><pre><code class=\"hljs\">这里需要注意，先安装好nvm，再去安装nodejs\n</code></pre>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错<br><img src=\"https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70\" alt=\"引用自csdn\"><br>导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面</li>\n</ul>\n<h4 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h4><ul>\n<li>开始之前先确认node和npm都已经卸载完成</li>\n<li>从github上获取nvm最新下载命令进行下载<br><a href=\"https://github.com/nvm-sh/nvm\">nvm github网址</a><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。<br>解决方案如下：<br><span class=\"hljs-bullet\">1.</span> 进入该网址： https://www.ipaddress.com/ <br><span class=\"hljs-bullet\">2.</span> 查询拒绝访问的网址的IP地址，拉到最下面，复制下来<br><span class=\"hljs-bullet\">3.</span> 终端输入：sudo vim /etc/hosts<br><span class=\"hljs-bullet\">4.</span> 在文件最后输入：（IP地址）（网址）<br><span class=\"hljs-bullet\">5.</span> 保存文件后，重新执行最新下载命令即可<br><span class=\"hljs-bullet\">6.</span> 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决<br><span class=\"hljs-bullet\">7.</span> 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。<br><span class=\"hljs-bullet\">8.</span> 输入：nvm -v查看版本号，有显示说明安装成功<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png\"></li>\n</ul>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ul>\n<li>在nvm安装完成的基础上，执行命令：<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">nvm install <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span><br></code></pre></td></tr></table></figure>\n等待完成即可<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3></li>\n<li>执行以下代码：<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">npm <span class=\"hljs-keyword\">install </span>-g hexo-cli<br>hexo init <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>cd <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>npm <span class=\"hljs-keyword\">install</span><br></code></pre></td></tr></table></figure></li>\n<li>测试hexo是否可以运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> blog<br>hexo s<br></code></pre></td></tr></table></figure>\n在浏览器上输入**<a href=\"http://localhost:4000/**%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%EF%BC%8C%E5%88%99%E8%AF%81%E6%98%8E%E6%88%90%E5%8A%9F\">http://localhost:4000/**，如果显示网页，则证明成功</a><br>当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器<h3 id=\"部署hexo到Github服务器上\"><a href=\"#部署hexo到Github服务器上\" class=\"headerlink\" title=\"部署hexo到Github服务器上\"></a>部署hexo到Github服务器上</h3></li>\n</ul>\n<ol>\n<li>安装hexo-deployer-git<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure></li>\n<li>修改_config.yml (路径：/blog/_config.yml)<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">deploy:</span><br><span class=\"hljs-symbol\">  type:</span> git<br><span class=\"hljs-symbol\">  repo:</span> <span class=\"hljs-params\">&lt;repository url&gt;</span> <span class=\"hljs-meta\">#你的 【你的名字】.github.io  这一项目的git地址#</span><br><span class=\"hljs-symbol\">  branch:</span> master <br><span class=\"hljs-symbol\">  message:</span> [message] <span class=\"hljs-meta\">#可不填写#</span><br></code></pre></td></tr></table></figure></li>\n<li>执行命令将hexo部署到服务器上<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo clean</span><br><span class=\"hljs-attribute\">hexo g</span><br><span class=\"hljs-attribute\">hexo d</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>如果执行命令后出现错误，就重复执行下列语句<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure>\n执行完毕后，应该就可以在<strong>你的名字.github.io</strong>看到你的网页了</li>\n</ul>\n<h3 id=\"更新博客文章\"><a href=\"#更新博客文章\" class=\"headerlink\" title=\"更新博客文章\"></a>更新博客文章</h3><ol>\n<li>创建新文章<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-string\">&quot;新文章&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li>编写文章<br>这里推荐使用vscode，typora也行，但是typora需要付费</li>\n<li>更新main分支<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">hexo</span> clean <span class=\"hljs-comment\">#可忽略</span><br>hexo generate <span class=\"hljs-comment\">#使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹</span><br>hexo s <span class=\"hljs-comment\">#启动本地服务器</span><br>hexo d <span class=\"hljs-comment\">#一键部署</span><br></code></pre></td></tr></table></figure></li>\n<li>更新hexo分支<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">git <span class=\"hljs-keyword\">add </span>-A （此命令用来添加所有文件到暂存区）<br>git commit -m <span class=\"hljs-string\">&quot;新增博客文章&quot;</span>  （此命令用来提交，双引号内可自定义内容，双引号前有空格）<br>git push <span class=\"hljs-keyword\">origin </span>hexo （此命令用来推送hexo分支到Github）<br><span class=\"hljs-comment\"># 此条命令有时候会上传失败，可以使用下面这个命令</span><br><span class=\"hljs-comment\"># git push origin HEAD:hexo</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中–<a href=\"\">Hexo博客自定义</a>，有需要的可以移步观看。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建一个个人博客\"><a href=\"#搭建一个个人博客\" class=\"headerlink\" title=\"搭建一个个人博客\"></a>搭建一个个人博客</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>搭建环境：macOS<br>md文件编辑器；vs code<br>如何使用markdown语言编写博客：<a href=\"https://www.runoob.com/markdown/md-table.html\">markdown教程</a><br>博客GitHub地址：<a href=\"https://github.com/gooddefense/gooddefense.github.io\">点击跳转</a></p>\n<h3 id=\"作者想说\"><a href=\"#作者想说\" class=\"headerlink\" title=\"作者想说\"></a>作者想说</h3><p>今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。</p>\n<p><a href=\"https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&spm=1018.2226.3001.4187\">参考链接</a></p>\n<h2 id=\"可能会用到的一些异常解决办法-持续更新\"><a href=\"#可能会用到的一些异常解决办法-持续更新\" class=\"headerlink\" title=\"可能会用到的一些异常解决办法(持续更新)\"></a>可能会用到的一些异常解决办法(持续更新)</h2><p><strong>提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料</strong></p>\n<h3 id=\"输入指令后长时间没有响应\"><a href=\"#输入指令后长时间没有响应\" class=\"headerlink\" title=\"输入指令后长时间没有响应\"></a>输入指令后长时间没有响应</h3><p>碰到以下情况：</p>\n<ul>\n<li>输入指令<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">git <span class=\"hljs-built_in\">push</span><br>git pull<br></code></pre></td></tr></table></figure></li>\n<li>出现长时间无法登陆GitHub</li>\n</ul>\n<p><strong>解决办法：</strong></p>\n<p>刷新DNS缓存：<br>在终端输入以下指令</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sudo killall -HUP mDNSResponder</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><ul>\n<li>登录GitHub账号，如果没有的话就先注册一个</li>\n<li>登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了</li>\n</ul>\n<h3 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h3><ol>\n<li>打开终端，输入命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/.ssh    <span class=\"hljs-comment\">#进入电脑下的ssh文件</span><br></code></pre></td></tr></table></figure></li>\n<li>生成新的SSH keys<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;你的邮箱地址&quot;</span><br></code></pre></td></tr></table></figure>\n执行此条命令后，最后出现类似长方形的字符画即表示成功。</li>\n<li>将SSH keys添加进Github</li>\n</ol>\n<ul>\n<li>打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)</li>\n<li>复制所有内容</li>\n<li>进入Github-&gt;点击头像栏的settings-&gt;选择SSH and GPG keys-&gt;点击New SSH Key-&gt;将内容复制进key-&gt;点击add SSH Key</li>\n</ul>\n<ol start=\"4\">\n<li>进行测试，输入以下指令：<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@GitHub</span>.com <span class=\"hljs-comment\">#全部复制，无需更改</span><br></code></pre></td></tr></table></figure>\n接下来会出现<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">The</span> authenticity of host &#x27;GitHub.com (<span class=\"hljs-number\">207.97.227.239</span>)&#x27; can&#x27;t be established.<br><span class=\"hljs-attribute\">RSA</span> key fingerprint is <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">27</span>:ac:a5:<span class=\"hljs-number\">76</span>:<span class=\"hljs-number\">28</span>:<span class=\"hljs-number\">2</span>d:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">1</span>b:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">4</span>d:eb:df:a6:<span class=\"hljs-number\">48</span>.<br><span class=\"hljs-attribute\">Are</span> you sure you want to continue connecting (yes/no)?&lt;输入yes&gt;<br><span class=\"hljs-attribute\">Hi</span> 你的用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n出现以上提示，则证明添加SSH Keys成功</li>\n<li>测试Github Pages是否创建成功，输入以下命令：<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">echo</span> <span class=\"hljs-string\">&quot;# 你的用户名.github.io&quot;</span> &gt;&gt; README.md<br><span class=\"hljs-symbol\">git</span> init    <br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> README.md<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br><span class=\"hljs-symbol\">git</span> remote <span class=\"hljs-keyword\">add</span> origin https:<span class=\"hljs-comment\">//github.com/你的用户名/你的用户名.github.io.git</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push</span> -u origin master<br></code></pre></td></tr></table></figure>\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。</li>\n</ol>\n<h3 id=\"安装nvm-避坑\"><a href=\"#安装nvm-避坑\" class=\"headerlink\" title=\"安装nvm(避坑)\"></a>安装nvm(避坑)</h3><pre><code>这里需要注意，先安装好nvm，再去安装nodejs\n</code></pre>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错<br><img src=\"https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70\" alt=\"引用自csdn\"><br>导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面</li>\n</ul>\n<h4 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h4><ul>\n<li>开始之前先确认node和npm都已经卸载完成</li>\n<li>从github上获取nvm最新下载命令进行下载<br><a href=\"https://github.com/nvm-sh/nvm\">nvm github网址</a><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。<br>解决方案如下：<br><span class=\"hljs-bullet\">1.</span> 进入该网址： https://www.ipaddress.com/ <br><span class=\"hljs-bullet\">2.</span> 查询拒绝访问的网址的IP地址，拉到最下面，复制下来<br><span class=\"hljs-bullet\">3.</span> 终端输入：sudo vim /etc/hosts<br><span class=\"hljs-bullet\">4.</span> 在文件最后输入：（IP地址）（网址）<br><span class=\"hljs-bullet\">5.</span> 保存文件后，重新执行最新下载命令即可<br><span class=\"hljs-bullet\">6.</span> 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决<br><span class=\"hljs-bullet\">7.</span> 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。<br><span class=\"hljs-bullet\">8.</span> 输入：nvm -v查看版本号，有显示说明安装成功<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png\"></li>\n</ul>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ul>\n<li>在nvm安装完成的基础上，执行命令：<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">nvm install <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span><br></code></pre></td></tr></table></figure>\n等待完成即可<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3></li>\n<li>执行以下代码：<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">npm <span class=\"hljs-keyword\">install </span>-g hexo-cli<br>hexo init <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>cd <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>npm <span class=\"hljs-keyword\">install</span><br></code></pre></td></tr></table></figure></li>\n<li>测试hexo是否可以运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> blog<br>hexo s<br></code></pre></td></tr></table></figure>\n在浏览器上输入**<a href=\"http://localhost:4000/**%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%EF%BC%8C%E5%88%99%E8%AF%81%E6%98%8E%E6%88%90%E5%8A%9F\">http://localhost:4000/**，如果显示网页，则证明成功</a><br>当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器<h3 id=\"部署hexo到Github服务器上\"><a href=\"#部署hexo到Github服务器上\" class=\"headerlink\" title=\"部署hexo到Github服务器上\"></a>部署hexo到Github服务器上</h3></li>\n</ul>\n<ol>\n<li>安装hexo-deployer-git<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure></li>\n<li>修改_config.yml (路径：/blog/_config.yml)<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">deploy:</span><br><span class=\"hljs-symbol\">  type:</span> git<br><span class=\"hljs-symbol\">  repo:</span> <span class=\"hljs-params\">&lt;repository url&gt;</span> <span class=\"hljs-meta\">#你的 【你的名字】.github.io  这一项目的git地址#</span><br><span class=\"hljs-symbol\">  branch:</span> master <br><span class=\"hljs-symbol\">  message:</span> [message] <span class=\"hljs-meta\">#可不填写#</span><br></code></pre></td></tr></table></figure></li>\n<li>执行命令将hexo部署到服务器上<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo clean</span><br><span class=\"hljs-attribute\">hexo g</span><br><span class=\"hljs-attribute\">hexo d</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>如果执行命令后出现错误，就重复执行下列语句<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure>\n执行完毕后，应该就可以在<strong>你的名字.github.io</strong>看到你的网页了</li>\n</ul>\n<h3 id=\"更新博客文章\"><a href=\"#更新博客文章\" class=\"headerlink\" title=\"更新博客文章\"></a>更新博客文章</h3><ol>\n<li>创建新文章<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-string\">&quot;新文章&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li>编写文章<br>这里推荐使用vscode，typora也行，但是typora需要付费</li>\n<li>更新main分支<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">hexo</span> clean <span class=\"hljs-comment\">#可忽略</span><br>hexo generate <span class=\"hljs-comment\">#使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹</span><br>hexo s <span class=\"hljs-comment\">#启动本地服务器</span><br>hexo d <span class=\"hljs-comment\">#一键部署</span><br></code></pre></td></tr></table></figure></li>\n<li>更新hexo分支<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">git <span class=\"hljs-keyword\">add </span>-A （此命令用来添加所有文件到暂存区）<br>git commit -m <span class=\"hljs-string\">&quot;新增博客文章&quot;</span>  （此命令用来提交，双引号内可自定义内容，双引号前有空格）<br>git push <span class=\"hljs-keyword\">origin </span>hexo （此命令用来推送hexo分支到Github）<br><span class=\"hljs-comment\"># 此条命令有时候会上传失败，可以使用下面这个命令</span><br><span class=\"hljs-comment\"># git push origin HEAD:hexo</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中–<a href=\"\">Hexo博客自定义</a>，有需要的可以移步观看。</p>\n"},{"title":"用51单片机控制SG90舵机","date":"2023-03-07T10:23:41.000Z","_content":"​\n什么是舵机？\n这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。\n\n百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。\n\n![](https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png)\n\n怎么驱动这个东西？\nPWM信号\n\n什么是PWM信号？\nPWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进\n行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通\n过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的\n时间占据整个信号周期的百分比，例如方波的占空比就是50%.\n使用PWM来控制舵机，理解占空比是关键。\n![](https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg)\n\n如何实现PWM信号输出？\n有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。\n\n怎么控制舵机？\n向黄色信号线“灌入”PWM信号\n\n![](https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png)\n\n怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。\n\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n编程实现\n用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。\n\n先来配置定时器\n```C\nvoid Time0Init()\n{\n    //定时器模式选择\n    TMOD = 0X01;\n    //给定初始值  我们先定一个0.5ms\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    //开启定时器\n    TF0 = 0;\n    TR0 = 1;\n}\n```\n定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。\n\n所以完整的定时器配置应该是这样的：\n```C\nvoid Time0Init()\n{\n    TMOD = 0X01;\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    TR0 = 1;\n    TF0 = 0;\n    //开启定时器0中断\n    ET0 = 1;\n    //开启总中断\n    EA = 1; \n}\n```\n有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：\n\n占空比：\n\n就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n中断处理函数\n```C\nvoid Time0Handler() interrupt 1\n{\n    cnt++;  //统计爆表次数\n    //重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    if(cnt < jd)   //jd  角度\n    {\n        sg90_con = 1;  //给舵机高电平\n    }else{\n        sg90_con = 0;  //给舵机低电平\n    }\n\n    if(cnt == 40)   //一个周期20ms   0.5*40\n    {\n        cnt = 0;\n    }\n}\n```\n主函数\n```C\nvoid main()\n{\n    jd = 1;\n    Time0Init();  //定时器初始化\n    sg90_con = 1; //舵机初始状态是高电平\n    \n    while(1)\n    { \n        jd = 3;    //转动90度\n        cnt = 0;\n        Delay2000ms();\n        jd = 1;\n        cnt = 0;\n        Delay2000ms();\n    }\n    \n}\n```\n全部代码：\n```C\n#include \"reg52.h\"\n\nsbit sg90_con = P1^1;\n\nint jd;\nint cnt = 0;\n\nvoid Delay2000ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\t\n\ti = 15;\n\tj = 2;\n\tk = 235;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\nvoid Delay300ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\n\ti = 3;\n\tj = 26;\n\tk = 223;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\n\nvoid Time0Init()\n{\n\t\n\tTMOD = 0X01;\n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\t\n\tTR0 = 1;\n\tTF0 = 0;\n\t\n\tET0 = 1;\n\t\n\tEA = 1;\n\t\n}\nvoid main()\n{\n\t1\n\tjd = 1;  \n\tTime0Init();  \n\tsg90_con = 1;  \n\t\n\twhile(1)\n\t{\n\t\tjd = 3; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t\tjd = 1; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t}\n}\n\nvoid Time0Handler() interrupt 1\n{\n\tcnt++;  \n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\tif(cnt < jd)   \n\t{\n\t\tsg90_con = 1; \n\t}else{\n\t\tsg90_con = 0;\t\t\n\t}\n\t\n\tif(cnt == 40)   \n\t{\n\t\tcnt = 0;\n\t\tsg90_con = 1;\n\t}\n}\n```\n\n​","source":"_posts/用51单片机控制SG90舵机.md","raw":"---\ntitle: 用51单片机控制SG90舵机\ndate: 2023-03-07 18:23:41\ntags:\ncategories: 51单片机\n---\n​\n什么是舵机？\n这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。\n\n百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。\n\n![](https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png)\n\n怎么驱动这个东西？\nPWM信号\n\n什么是PWM信号？\nPWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进\n行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通\n过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的\n时间占据整个信号周期的百分比，例如方波的占空比就是50%.\n使用PWM来控制舵机，理解占空比是关键。\n![](https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg)\n\n如何实现PWM信号输出？\n有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。\n\n怎么控制舵机？\n向黄色信号线“灌入”PWM信号\n\n![](https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png)\n\n怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。\n\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n编程实现\n用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。\n\n先来配置定时器\n```C\nvoid Time0Init()\n{\n    //定时器模式选择\n    TMOD = 0X01;\n    //给定初始值  我们先定一个0.5ms\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    //开启定时器\n    TF0 = 0;\n    TR0 = 1;\n}\n```\n定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。\n\n所以完整的定时器配置应该是这样的：\n```C\nvoid Time0Init()\n{\n    TMOD = 0X01;\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    TR0 = 1;\n    TF0 = 0;\n    //开启定时器0中断\n    ET0 = 1;\n    //开启总中断\n    EA = 1; \n}\n```\n有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：\n\n占空比：\n\n就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n中断处理函数\n```C\nvoid Time0Handler() interrupt 1\n{\n    cnt++;  //统计爆表次数\n    //重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    if(cnt < jd)   //jd  角度\n    {\n        sg90_con = 1;  //给舵机高电平\n    }else{\n        sg90_con = 0;  //给舵机低电平\n    }\n\n    if(cnt == 40)   //一个周期20ms   0.5*40\n    {\n        cnt = 0;\n    }\n}\n```\n主函数\n```C\nvoid main()\n{\n    jd = 1;\n    Time0Init();  //定时器初始化\n    sg90_con = 1; //舵机初始状态是高电平\n    \n    while(1)\n    { \n        jd = 3;    //转动90度\n        cnt = 0;\n        Delay2000ms();\n        jd = 1;\n        cnt = 0;\n        Delay2000ms();\n    }\n    \n}\n```\n全部代码：\n```C\n#include \"reg52.h\"\n\nsbit sg90_con = P1^1;\n\nint jd;\nint cnt = 0;\n\nvoid Delay2000ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\t\n\ti = 15;\n\tj = 2;\n\tk = 235;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\nvoid Delay300ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\n\ti = 3;\n\tj = 26;\n\tk = 223;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\n\nvoid Time0Init()\n{\n\t\n\tTMOD = 0X01;\n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\t\n\tTR0 = 1;\n\tTF0 = 0;\n\t\n\tET0 = 1;\n\t\n\tEA = 1;\n\t\n}\nvoid main()\n{\n\t1\n\tjd = 1;  \n\tTime0Init();  \n\tsg90_con = 1;  \n\t\n\twhile(1)\n\t{\n\t\tjd = 3; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t\tjd = 1; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t}\n}\n\nvoid Time0Handler() interrupt 1\n{\n\tcnt++;  \n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\tif(cnt < jd)   \n\t{\n\t\tsg90_con = 1; \n\t}else{\n\t\tsg90_con = 0;\t\t\n\t}\n\t\n\tif(cnt == 40)   \n\t{\n\t\tcnt = 0;\n\t\tsg90_con = 1;\n\t}\n}\n```\n\n​","slug":"用51单片机控制SG90舵机","published":1,"updated":"2023-04-02T12:59:03.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1ea000v6ht0bjmlb34o","content":"<p>​<br>什么是舵机？<br>这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。</p>\n<p>百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png\"></p>\n<p>怎么驱动这个东西？<br>PWM信号</p>\n<p>什么是PWM信号？<br>PWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进<br>行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通<br>过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的<br>时间占据整个信号周期的百分比，例如方波的占空比就是50%.<br>使用PWM来控制舵机，理解占空比是关键。<br><img src=\"https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg\"></p>\n<p>如何实现PWM信号输出？<br>有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。</p>\n<p>怎么控制舵机？<br>向黄色信号线“灌入”PWM信号</p>\n<p><img src=\"https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png\"></p>\n<p>怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。</p>\n<p> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>编程实现<br>用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。</p>\n<p>先来配置定时器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//定时器模式选择</span><br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    <span class=\"hljs-comment\">//给定初始值  我们先定一个0.5ms</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-comment\">//开启定时器</span><br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。</p>\n<p>所以完整的定时器配置应该是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//开启定时器0中断</span><br>    ET0 = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-comment\">//开启总中断</span><br>    EA = <span class=\"hljs-number\">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：</p>\n<p>占空比：</p>\n<p>就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比<br> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>中断处理函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>    cnt++;  <span class=\"hljs-comment\">//统计爆表次数</span><br>    <span class=\"hljs-comment\">//重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <span class=\"hljs-comment\">//jd  角度</span><br>    &#123;<br>        sg90_con = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//给舵机高电平</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        sg90_con = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">//给舵机低电平</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <span class=\"hljs-comment\">//一个周期20ms   0.5*40</span><br>    &#123;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>主函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    jd = <span class=\"hljs-number\">1</span>;<br>    Time0Init();  <span class=\"hljs-comment\">//定时器初始化</span><br>    sg90_con = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//舵机初始状态是高电平</span><br>    <br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>    &#123; <br>        jd = <span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">//转动90度</span><br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>        jd = <span class=\"hljs-number\">1</span>;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>全部代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;reg52.h&quot;</span></span><br><br>sbit sg90_con = P1^<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-type\">int</span> jd;<br><span class=\"hljs-type\">int</span> cnt = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay2000ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br>\t<br>\ti = <span class=\"hljs-number\">15</span>;<br>\tj = <span class=\"hljs-number\">2</span>;<br>\tk = <span class=\"hljs-number\">235</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay300ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br><br>\ti = <span class=\"hljs-number\">3</span>;<br>\tj = <span class=\"hljs-number\">26</span>;<br>\tk = <span class=\"hljs-number\">223</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<br>\tTMOD = <span class=\"hljs-number\">0X01</span>;<br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<br>\tTR0 = <span class=\"hljs-number\">1</span>;<br>\tTF0 = <span class=\"hljs-number\">0</span>;<br>\t<br>\tET0 = <span class=\"hljs-number\">1</span>;<br>\t<br>\tEA = <span class=\"hljs-number\">1</span>;<br>\t<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<span class=\"hljs-number\">1</span><br>\tjd = <span class=\"hljs-number\">1</span>;  <br>\tTime0Init();  <br>\tsg90_con = <span class=\"hljs-number\">1</span>;  <br>\t<br>\t<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>\t&#123;<br>\t\tjd = <span class=\"hljs-number\">3</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t\tjd = <span class=\"hljs-number\">1</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>\tcnt++;  <br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <br>\t&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>; <br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">0</span>;\t\t<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <br>\t&#123;<br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​<br>什么是舵机？<br>这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。</p>\n<p>百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png\"></p>\n<p>怎么驱动这个东西？<br>PWM信号</p>\n<p>什么是PWM信号？<br>PWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进<br>行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通<br>过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的<br>时间占据整个信号周期的百分比，例如方波的占空比就是50%.<br>使用PWM来控制舵机，理解占空比是关键。<br><img src=\"https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg\"></p>\n<p>如何实现PWM信号输出？<br>有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。</p>\n<p>怎么控制舵机？<br>向黄色信号线“灌入”PWM信号</p>\n<p><img src=\"https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png\"></p>\n<p>怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。</p>\n<p> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>编程实现<br>用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。</p>\n<p>先来配置定时器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//定时器模式选择</span><br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    <span class=\"hljs-comment\">//给定初始值  我们先定一个0.5ms</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-comment\">//开启定时器</span><br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。</p>\n<p>所以完整的定时器配置应该是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//开启定时器0中断</span><br>    ET0 = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-comment\">//开启总中断</span><br>    EA = <span class=\"hljs-number\">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：</p>\n<p>占空比：</p>\n<p>就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比<br> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>中断处理函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>    cnt++;  <span class=\"hljs-comment\">//统计爆表次数</span><br>    <span class=\"hljs-comment\">//重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <span class=\"hljs-comment\">//jd  角度</span><br>    &#123;<br>        sg90_con = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//给舵机高电平</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        sg90_con = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">//给舵机低电平</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <span class=\"hljs-comment\">//一个周期20ms   0.5*40</span><br>    &#123;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>主函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    jd = <span class=\"hljs-number\">1</span>;<br>    Time0Init();  <span class=\"hljs-comment\">//定时器初始化</span><br>    sg90_con = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//舵机初始状态是高电平</span><br>    <br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>    &#123; <br>        jd = <span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">//转动90度</span><br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>        jd = <span class=\"hljs-number\">1</span>;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>全部代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;reg52.h&quot;</span></span><br><br>sbit sg90_con = P1^<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-type\">int</span> jd;<br><span class=\"hljs-type\">int</span> cnt = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay2000ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br>\t<br>\ti = <span class=\"hljs-number\">15</span>;<br>\tj = <span class=\"hljs-number\">2</span>;<br>\tk = <span class=\"hljs-number\">235</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay300ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br><br>\ti = <span class=\"hljs-number\">3</span>;<br>\tj = <span class=\"hljs-number\">26</span>;<br>\tk = <span class=\"hljs-number\">223</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<br>\tTMOD = <span class=\"hljs-number\">0X01</span>;<br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<br>\tTR0 = <span class=\"hljs-number\">1</span>;<br>\tTF0 = <span class=\"hljs-number\">0</span>;<br>\t<br>\tET0 = <span class=\"hljs-number\">1</span>;<br>\t<br>\tEA = <span class=\"hljs-number\">1</span>;<br>\t<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<span class=\"hljs-number\">1</span><br>\tjd = <span class=\"hljs-number\">1</span>;  <br>\tTime0Init();  <br>\tsg90_con = <span class=\"hljs-number\">1</span>;  <br>\t<br>\t<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>\t&#123;<br>\t\tjd = <span class=\"hljs-number\">3</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t\tjd = <span class=\"hljs-number\">1</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>\tcnt++;  <br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <br>\t&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>; <br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">0</span>;\t\t<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <br>\t&#123;<br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​</p>\n"},{"title":"学习日志","date":"2023-02-15T15:41:45.000Z","_content":"\n# 更新日志\n\n## 2023年12月24日\n\n完成任务：\n    1. Github加速\n    2. 在Mac电脑上跑通Git\n    3. 继续完善Java入门项目：抽奖网站","source":"_posts/更新日志.md","raw":"---\ntitle: 学习日志\ndate: 2023-02-15 23:41:45\ntags:\ncategories: 博客介绍及更新日志\n---\n\n# 更新日志\n\n## 2023年12月24日\n\n完成任务：\n    1. Github加速\n    2. 在Mac电脑上跑通Git\n    3. 继续完善Java入门项目：抽奖网站","slug":"更新日志","published":1,"updated":"2023-12-24T11:50:53.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1eb000y6ht027s98wqq","content":"<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><h2 id=\"2023年12月24日\"><a href=\"#2023年12月24日\" class=\"headerlink\" title=\"2023年12月24日\"></a>2023年12月24日</h2><p>完成任务：<br>    1. Github加速<br>    2. 在Mac电脑上跑通Git<br>    3. 继续完善Java入门项目：抽奖网站</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><h2 id=\"2023年12月24日\"><a href=\"#2023年12月24日\" class=\"headerlink\" title=\"2023年12月24日\"></a>2023年12月24日</h2><p>完成任务：<br>    1. Github加速<br>    2. 在Mac电脑上跑通Git<br>    3. 继续完善Java入门项目：抽奖网站</p>\n"},{"title":"科学上网","date":"2023-03-10T09:37:32.000Z","_content":"","source":"_posts/科学上网.md","raw":"---\ntitle: 科学上网\ndate: 2023-03-10 17:37:32\ntags:\n---\n","slug":"科学上网","published":1,"updated":"2023-03-10T09:37:32.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1eb00106ht0bnjygntv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"markdown语法","date":"2023-03-27T11:33:34.000Z","_content":"# markdown语法\n\n## 前言\n每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。\n\n学习的参考网址在这里： [markdown语法教程](https://www.runoob.com/markdown/md-tutorial.html)\n\n## 编辑器\n**vscode**\n市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。\n\n### 一个关于markdown的插件\n名字叫做 **Markdown Preview Enhanced**\n这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。\n\n## 标题\n1. 使用 = 和 - 标记一级和二级标题\n```\n我展示的是一级标题\n==================\n我展示的是二级标题\n------------------\n```\n2. 使用 # 号标记\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n## 段落\nmarkdown语法里对于段落并没有特殊的语法，直接编辑文字即可  \n**注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落**  \n\n## 字体\n```\n*斜体文字*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n## 分隔线\n用三个以上的星号，减号，底线即可建立分隔线\n\n## 删除线\n在文字的两端加上两个波浪线 ~~ 即可\n\n## 下划线\n通过html中的**< u>**来实现\n例子：\n```\n<u>带下划线文本</u>\n```\n效果如下：\n<u>带下划线文本</u>\n\n## 脚注\n脚注是什么？\n脚注是对文本的补充说明\n在markdown语法中，脚注的语法格式为：\n```\n[^要注明的文本]\n```\n实例演示：\n输入的语法格式：\n```\n勒布朗.詹姆斯[^简介]\n[^简介]: 一位著名的篮球运动员\n```\n\n实际效果演示：\n\n勒布朗.詹姆斯[^简介]。\n [^简介]: 美国nba篮球运动员\n\n## 列表\n1. 无序列表\n无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空\n```\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n```\n\n显示效果：\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n\n2. 有序列表\n使用数字并加上 . 号来表示\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n显示效果：\n1. 第一项\n2. 第二项\n3. 第三项\n\n列表嵌套\n```\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n\n显示效果：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n\n## 区块\n在段落开头使用 > 符号 ，然后后面紧跟一个空格符号\n```\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n```\n\n显示效果：\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n\n***区块之间可以进行嵌套***\n```\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n```\n\n显示效果：\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n\n***在区块中使用列表***\n```\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n```\n\n显示效果：\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n\n***在列表中使用区块***\n```\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n```\n\n显示效果：\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n\n## 代码\n***函数名或者小的代码片段***\n当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。\n\n类似于下面的效果\n`exit()`函数\n\n***代码区块***\n1. Tab键或4个空格\n当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键\n\n显示效果\n\n    #include <stdio.h>\n    int main()\n    {\n        printf(\"Hello world!\\n\");\n        return 0;\n    }\n\n2. 用两个```包裹\n显示效果\n```Java\npublic class Person\n{\n    private String name;\n    private int age;\n    \n    public String getName(){\n        return name;\n    }\n\n    public void setName(String name){\n        this.name = name;\n    }\n\n    public int getAge(){\n        return age;\n    }\n\n    public void setAge(){\n        this.age = age;\n    }\n}\n```\n\n## 链接\n有些时候，我们需要将链接引入到文档中，方便我们查看。\n链接的使用方法是：\n```\n[链接名称](链接地址)\n或者\n<链接地址>\n```\n\n显示效果：\n[百度首页](https://www.baidu.com)\n\n<https://www.baidu.com>\n\n***高级链接***\n相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。\n```\n这个链接是百度的官网[百度]\n[1]\n这个链接是google的官网[google][2]\n\n[1]: https://www.baidu.com\n[2]: https://www.google.com\n```\n\n显示效果：\n这个链接是百度的官网[百度官网][3]\n这个链接是google的官网[google官网][2]\n\n[3]: https://www.baidu.com\n[2]: https://www.google.com\n\n## 图片\n\n","source":"_posts/markdown语法.md","raw":"---\ntitle: markdown语法\ndate: 2023-03-27 19:33:34\ntags:\ncategories: 编程语言及工具笔记\n---\n# markdown语法\n\n## 前言\n每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。\n\n学习的参考网址在这里： [markdown语法教程](https://www.runoob.com/markdown/md-tutorial.html)\n\n## 编辑器\n**vscode**\n市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。\n\n### 一个关于markdown的插件\n名字叫做 **Markdown Preview Enhanced**\n这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。\n\n## 标题\n1. 使用 = 和 - 标记一级和二级标题\n```\n我展示的是一级标题\n==================\n我展示的是二级标题\n------------------\n```\n2. 使用 # 号标记\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n## 段落\nmarkdown语法里对于段落并没有特殊的语法，直接编辑文字即可  \n**注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落**  \n\n## 字体\n```\n*斜体文字*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n## 分隔线\n用三个以上的星号，减号，底线即可建立分隔线\n\n## 删除线\n在文字的两端加上两个波浪线 ~~ 即可\n\n## 下划线\n通过html中的**< u>**来实现\n例子：\n```\n<u>带下划线文本</u>\n```\n效果如下：\n<u>带下划线文本</u>\n\n## 脚注\n脚注是什么？\n脚注是对文本的补充说明\n在markdown语法中，脚注的语法格式为：\n```\n[^要注明的文本]\n```\n实例演示：\n输入的语法格式：\n```\n勒布朗.詹姆斯[^简介]\n[^简介]: 一位著名的篮球运动员\n```\n\n实际效果演示：\n\n勒布朗.詹姆斯[^简介]。\n [^简介]: 美国nba篮球运动员\n\n## 列表\n1. 无序列表\n无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空\n```\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n```\n\n显示效果：\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n\n2. 有序列表\n使用数字并加上 . 号来表示\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n显示效果：\n1. 第一项\n2. 第二项\n3. 第三项\n\n列表嵌套\n```\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n\n显示效果：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n\n## 区块\n在段落开头使用 > 符号 ，然后后面紧跟一个空格符号\n```\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n```\n\n显示效果：\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n\n***区块之间可以进行嵌套***\n```\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n```\n\n显示效果：\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n\n***在区块中使用列表***\n```\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n```\n\n显示效果：\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n\n***在列表中使用区块***\n```\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n```\n\n显示效果：\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n\n## 代码\n***函数名或者小的代码片段***\n当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。\n\n类似于下面的效果\n`exit()`函数\n\n***代码区块***\n1. Tab键或4个空格\n当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键\n\n显示效果\n\n    #include <stdio.h>\n    int main()\n    {\n        printf(\"Hello world!\\n\");\n        return 0;\n    }\n\n2. 用两个```包裹\n显示效果\n```Java\npublic class Person\n{\n    private String name;\n    private int age;\n    \n    public String getName(){\n        return name;\n    }\n\n    public void setName(String name){\n        this.name = name;\n    }\n\n    public int getAge(){\n        return age;\n    }\n\n    public void setAge(){\n        this.age = age;\n    }\n}\n```\n\n## 链接\n有些时候，我们需要将链接引入到文档中，方便我们查看。\n链接的使用方法是：\n```\n[链接名称](链接地址)\n或者\n<链接地址>\n```\n\n显示效果：\n[百度首页](https://www.baidu.com)\n\n<https://www.baidu.com>\n\n***高级链接***\n相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。\n```\n这个链接是百度的官网[百度]\n[1]\n这个链接是google的官网[google][2]\n\n[1]: https://www.baidu.com\n[2]: https://www.google.com\n```\n\n显示效果：\n这个链接是百度的官网[百度官网][3]\n这个链接是google的官网[google官网][2]\n\n[3]: https://www.baidu.com\n[2]: https://www.google.com\n\n## 图片\n\n","slug":"markdown语法","published":1,"updated":"2023-04-02T12:58:57.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1eb00136ht0ge7sc1jm","content":"<h1 id=\"markdown语法\"><a href=\"#markdown语法\" class=\"headerlink\" title=\"markdown语法\"></a>markdown语法</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。</p>\n<p>学习的参考网址在这里： <a href=\"https://www.runoob.com/markdown/md-tutorial.html\">markdown语法教程</a></p>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><p><strong>vscode</strong><br>市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。</p>\n<h3 id=\"一个关于markdown的插件\"><a href=\"#一个关于markdown的插件\" class=\"headerlink\" title=\"一个关于markdown的插件\"></a>一个关于markdown的插件</h3><p>名字叫做 <strong>Markdown Preview Enhanced</strong><br>这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><ol>\n<li>使用 = 和 - 标记一级和二级标题<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">我展示的是一级标题</span><br><span class=\"hljs-section\">==================</span><br><span class=\"hljs-section\">我展示的是二级标题</span><br><span class=\"hljs-section\">------------------</span><br></code></pre></td></tr></table></figure></li>\n<li>使用 # 号标记<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>markdown语法里对于段落并没有特殊的语法，直接编辑文字即可<br><strong>注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落</strong>  </p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-strong\">*斜体文字*</span><br><span class=\"hljs-emphasis\">_斜体文本_</span><br><span class=\"hljs-strong\">**粗体文本**</span><br><span class=\"hljs-emphasis\">__粗体文本__</span><br><span class=\"hljs-strong\">***粗斜体文本**</span>*<br><span class=\"hljs-emphasis\">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>用三个以上的星号，减号，底线即可建立分隔线</p>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>在文字的两端加上两个波浪线 ~~ 即可</p>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>通过html中的**&lt; u&gt;**来实现<br>例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">u</span>&gt;</span>带下划线文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">u</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>效果如下：<br><u>带下划线文本</u></p>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是什么？<br>脚注是对文本的补充说明<br>在markdown语法中，脚注的语法格式为：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-string\">[^要注明的文本]</span><br></code></pre></td></tr></table></figure>\n<p>实例演示：<br>输入的语法格式：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">勒布朗.詹姆斯[^简介]<br>[<span class=\"hljs-symbol\">^简介</span>]: <span class=\"hljs-link\">一位著名的篮球运动员</span><br></code></pre></td></tr></table></figure>\n\n<p>实际效果演示：</p>\n<p>勒布朗.詹姆斯[^简介]。<br> [^简介]: 美国nba篮球运动员</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><ol>\n<li>无序列表<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">*</span> 第一项<br><span class=\"hljs-bullet\">*</span> 第二项<br><span class=\"hljs-bullet\">*</span> 第三项<br><br><span class=\"hljs-bullet\">+</span> 第一项<br><span class=\"hljs-bullet\">+</span> 第二项<br><span class=\"hljs-bullet\">+</span> 第三项<br><br><span class=\"hljs-bullet\">-</span> 第一项<br><span class=\"hljs-bullet\">-</span> 第二项<br><span class=\"hljs-bullet\">-</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ol start=\"2\">\n<li>有序列表<br>使用数字并加上 . 号来表示<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项<br><span class=\"hljs-bullet\">2.</span> 第二项<br><span class=\"hljs-bullet\">3.</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<p>列表嵌套</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项：<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第二个元素<br><span class=\"hljs-bullet\">2.</span> 第二项：<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ol>\n<li>第一项：<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><p>在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">安东尼.戴维斯</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队<br>勒布朗.詹姆斯<br>安东尼.戴维斯</p>\n</blockquote>\n<p><em><strong>区块之间可以进行嵌套</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; 勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; &gt; 小前锋</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队</p>\n<blockquote>\n<p>勒布朗.詹姆斯</p>\n<blockquote>\n<p>小前锋</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em><strong>在区块中使用列表</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">任务列表</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">1.</span> 第一项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">2.</span> 第二项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 吃饭</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 睡觉</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>任务列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>吃饭</li>\n<li>睡觉</li>\n</ul>\n</blockquote>\n<p><em><strong>在列表中使用区块</strong></em></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>第一项<br><span class=\"hljs-code\">    &gt; 吃饭</span><br><span class=\"hljs-code\">    &gt; 睡觉</span><br><span class=\"hljs-bullet\">* </span>第二项<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ul>\n<li>第一项<blockquote>\n<p>吃饭<br>睡觉</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><em><strong>函数名或者小的代码片段</strong></em><br>当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。</p>\n<p>类似于下面的效果<br><code>exit()</code>函数</p>\n<p><em><strong>代码区块</strong></em></p>\n<ol>\n<li>Tab键或4个空格<br>当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键</li>\n</ol>\n<p>显示效果</p>\n<pre><code class=\"hljs\">#include &lt;stdio.h&gt;\nint main()\n&#123;\n    printf(&quot;Hello world!\\n&quot;);\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>用两个```包裹<br>显示效果<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span><br>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>有些时候，我们需要将链接引入到文档中，方便我们查看。<br>链接的使用方法是：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-selector-attr\">[链接名称]</span>(链接地址)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br><a href=\"https://www.baidu.com/\">百度首页</a></p>\n<p><a href=\"https://www.baidu.com/\">https://www.baidu.com</a></p>\n<p><em><strong>高级链接</strong></em><br>相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\">这个链接是百度的官网<span class=\"hljs-selector-attr\">[百度]</span><br><span class=\"hljs-selector-attr\">[1]</span><br>这个链接是<span class=\"hljs-selector-tag\">google</span>的官网<span class=\"hljs-selector-attr\">[google]</span><span class=\"hljs-selector-attr\">[2]</span><br><br><span class=\"hljs-selector-attr\">[1]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.baidu.com</span><br><span class=\"hljs-selector-attr\">[2]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.google.com</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br>这个链接是百度的官网<a href=\"https://www.baidu.com/\">百度官网</a><br>这个链接是google的官网<a href=\"https://www.google.com/\">google官网</a></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"markdown语法\"><a href=\"#markdown语法\" class=\"headerlink\" title=\"markdown语法\"></a>markdown语法</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。</p>\n<p>学习的参考网址在这里： <a href=\"https://www.runoob.com/markdown/md-tutorial.html\">markdown语法教程</a></p>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><p><strong>vscode</strong><br>市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。</p>\n<h3 id=\"一个关于markdown的插件\"><a href=\"#一个关于markdown的插件\" class=\"headerlink\" title=\"一个关于markdown的插件\"></a>一个关于markdown的插件</h3><p>名字叫做 <strong>Markdown Preview Enhanced</strong><br>这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><ol>\n<li>使用 = 和 - 标记一级和二级标题<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">我展示的是一级标题</span><br><span class=\"hljs-section\">==================</span><br><span class=\"hljs-section\">我展示的是二级标题</span><br><span class=\"hljs-section\">------------------</span><br></code></pre></td></tr></table></figure></li>\n<li>使用 # 号标记<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>markdown语法里对于段落并没有特殊的语法，直接编辑文字即可<br><strong>注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落</strong>  </p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-strong\">*斜体文字*</span><br><span class=\"hljs-emphasis\">_斜体文本_</span><br><span class=\"hljs-strong\">**粗体文本**</span><br><span class=\"hljs-emphasis\">__粗体文本__</span><br><span class=\"hljs-strong\">***粗斜体文本**</span>*<br><span class=\"hljs-emphasis\">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>用三个以上的星号，减号，底线即可建立分隔线</p>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>在文字的两端加上两个波浪线 ~~ 即可</p>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>通过html中的**&lt; u&gt;**来实现<br>例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">u</span>&gt;</span>带下划线文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">u</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>效果如下：<br><u>带下划线文本</u></p>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是什么？<br>脚注是对文本的补充说明<br>在markdown语法中，脚注的语法格式为：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-string\">[^要注明的文本]</span><br></code></pre></td></tr></table></figure>\n<p>实例演示：<br>输入的语法格式：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">勒布朗.詹姆斯[^简介]<br>[<span class=\"hljs-symbol\">^简介</span>]: <span class=\"hljs-link\">一位著名的篮球运动员</span><br></code></pre></td></tr></table></figure>\n\n<p>实际效果演示：</p>\n<p>勒布朗.詹姆斯[^简介]。<br> [^简介]: 美国nba篮球运动员</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><ol>\n<li>无序列表<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">*</span> 第一项<br><span class=\"hljs-bullet\">*</span> 第二项<br><span class=\"hljs-bullet\">*</span> 第三项<br><br><span class=\"hljs-bullet\">+</span> 第一项<br><span class=\"hljs-bullet\">+</span> 第二项<br><span class=\"hljs-bullet\">+</span> 第三项<br><br><span class=\"hljs-bullet\">-</span> 第一项<br><span class=\"hljs-bullet\">-</span> 第二项<br><span class=\"hljs-bullet\">-</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ol start=\"2\">\n<li>有序列表<br>使用数字并加上 . 号来表示<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项<br><span class=\"hljs-bullet\">2.</span> 第二项<br><span class=\"hljs-bullet\">3.</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<p>列表嵌套</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项：<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第二个元素<br><span class=\"hljs-bullet\">2.</span> 第二项：<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ol>\n<li>第一项：<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><p>在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">安东尼.戴维斯</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队<br>勒布朗.詹姆斯<br>安东尼.戴维斯</p>\n</blockquote>\n<p><em><strong>区块之间可以进行嵌套</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; 勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; &gt; 小前锋</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队</p>\n<blockquote>\n<p>勒布朗.詹姆斯</p>\n<blockquote>\n<p>小前锋</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em><strong>在区块中使用列表</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">任务列表</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">1.</span> 第一项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">2.</span> 第二项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 吃饭</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 睡觉</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>任务列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>吃饭</li>\n<li>睡觉</li>\n</ul>\n</blockquote>\n<p><em><strong>在列表中使用区块</strong></em></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>第一项<br><span class=\"hljs-code\">    &gt; 吃饭</span><br><span class=\"hljs-code\">    &gt; 睡觉</span><br><span class=\"hljs-bullet\">* </span>第二项<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ul>\n<li>第一项<blockquote>\n<p>吃饭<br>睡觉</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><em><strong>函数名或者小的代码片段</strong></em><br>当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。</p>\n<p>类似于下面的效果<br><code>exit()</code>函数</p>\n<p><em><strong>代码区块</strong></em></p>\n<ol>\n<li>Tab键或4个空格<br>当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键</li>\n</ol>\n<p>显示效果</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n&#123;\n    printf(&quot;Hello world!\\n&quot;);\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>用两个```包裹<br>显示效果<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span><br>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>有些时候，我们需要将链接引入到文档中，方便我们查看。<br>链接的使用方法是：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-selector-attr\">[链接名称]</span>(链接地址)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br><a href=\"https://www.baidu.com/\">百度首页</a></p>\n<p><a href=\"https://www.baidu.com/\">https://www.baidu.com</a></p>\n<p><em><strong>高级链接</strong></em><br>相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\">这个链接是百度的官网<span class=\"hljs-selector-attr\">[百度]</span><br><span class=\"hljs-selector-attr\">[1]</span><br>这个链接是<span class=\"hljs-selector-tag\">google</span>的官网<span class=\"hljs-selector-attr\">[google]</span><span class=\"hljs-selector-attr\">[2]</span><br><br><span class=\"hljs-selector-attr\">[1]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.baidu.com</span><br><span class=\"hljs-selector-attr\">[2]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.google.com</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br>这个链接是百度的官网<a href=\"https://www.baidu.com/\">百度官网</a><br>这个链接是google的官网<a href=\"https://www.google.com/\">google官网</a></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2>"},{"title":"蓝牙Wi-Fi助手","date":"2023-11-29T12:59:22.000Z","_content":"\n# 蓝牙Wi-Fi助手\n\n## Android APP如何和硬件进行通信？\n\n开发板搭配蓝牙模块或者WI-FI模块。\n\nWI-FI模块常用型号：ESP8266\n蓝牙模块常用型号：HC08\n\n\n**esp8266的三种工作模式：**\n1. station（客户端模式）：类似于手机，小爱音响等设备（client）\n2. AP（接入点模式）：类似于路由器(server)，可以让其他设备访问\n3. station+AP（客户端+接入点模式）\n\n\n**使用手机APP连接WI-FI模块控制单片机硬件的逻辑：**\n将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能\n\n\n**使用手机APP连接蓝牙模块控制单片机硬件的逻辑：**\n![蓝牙连接逻辑图](https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png)\n\n\n## 逻辑设计\n### 主界面\n可选**WI-FI**模式和**蓝牙**模式\n\nWI-FI模式下端口号和IP地址输入的审核逻辑：\n\n1. 若端口号和IP地址输入为空，则提示对应异常\n2. 输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n蓝牙模式下的操作逻辑：\n搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n### 操作界面\n1. 显示当前连接的IP地址/蓝牙名称\n2. 提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。\n3. 返回值显示框\n\n## Android APP WI-FI部分实现\n\n引用：\n[AndroidWIFI使用简述](https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142^v96^pc_search_result_base5&spm=1018.2226.3001.4187) ----（xml配置比较详细）\n[APP和ESP8266进行联网传输](https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142^v96^pc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187)--(xml只配置了网络)\n**配置项目的静态权限**\n在 **AndroidManifest.xml** 增加代码\n```\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```\n\n在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。\n\n但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。\n```\n        <!--Android 6 ~ 12 使用定位权限-->\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"\n        tools:ignore=\"CoarseFineLocation\" />\n\n    <!--Android 13及以上使用权限-->\n    <uses-permission\n        android:name=\"android.permission.NEARBY_WIFI_DEVICES\"\n        android:usesPermissionFlags=\"neverForLocation\"\n        tools:targetApi=\"Tiramisu\" />\n\n```\n\n## Android Studio安装(mac)\n\n[参考文章](https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n[参考文章2](https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n\n\n","source":"_posts/蓝牙Wi-Fi助手.md","raw":"---\ntitle: 蓝牙Wi-Fi助手\ndate: 2023-11-29 20:59:22\ntags:\ncategories: APP & 小程序\n---\n\n# 蓝牙Wi-Fi助手\n\n## Android APP如何和硬件进行通信？\n\n开发板搭配蓝牙模块或者WI-FI模块。\n\nWI-FI模块常用型号：ESP8266\n蓝牙模块常用型号：HC08\n\n\n**esp8266的三种工作模式：**\n1. station（客户端模式）：类似于手机，小爱音响等设备（client）\n2. AP（接入点模式）：类似于路由器(server)，可以让其他设备访问\n3. station+AP（客户端+接入点模式）\n\n\n**使用手机APP连接WI-FI模块控制单片机硬件的逻辑：**\n将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能\n\n\n**使用手机APP连接蓝牙模块控制单片机硬件的逻辑：**\n![蓝牙连接逻辑图](https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png)\n\n\n## 逻辑设计\n### 主界面\n可选**WI-FI**模式和**蓝牙**模式\n\nWI-FI模式下端口号和IP地址输入的审核逻辑：\n\n1. 若端口号和IP地址输入为空，则提示对应异常\n2. 输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n蓝牙模式下的操作逻辑：\n搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n### 操作界面\n1. 显示当前连接的IP地址/蓝牙名称\n2. 提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。\n3. 返回值显示框\n\n## Android APP WI-FI部分实现\n\n引用：\n[AndroidWIFI使用简述](https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142^v96^pc_search_result_base5&spm=1018.2226.3001.4187) ----（xml配置比较详细）\n[APP和ESP8266进行联网传输](https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142^v96^pc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187)--(xml只配置了网络)\n**配置项目的静态权限**\n在 **AndroidManifest.xml** 增加代码\n```\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```\n\n在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。\n\n但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。\n```\n        <!--Android 6 ~ 12 使用定位权限-->\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"\n        tools:ignore=\"CoarseFineLocation\" />\n\n    <!--Android 13及以上使用权限-->\n    <uses-permission\n        android:name=\"android.permission.NEARBY_WIFI_DEVICES\"\n        android:usesPermissionFlags=\"neverForLocation\"\n        tools:targetApi=\"Tiramisu\" />\n\n```\n\n## Android Studio安装(mac)\n\n[参考文章](https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n[参考文章2](https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n\n\n","slug":"蓝牙Wi-Fi助手","published":1,"updated":"2023-12-23T07:06:27.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1eb00156ht04xg57qr3","content":"<h1 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h1><h2 id=\"Android-APP如何和硬件进行通信？\"><a href=\"#Android-APP如何和硬件进行通信？\" class=\"headerlink\" title=\"Android APP如何和硬件进行通信？\"></a>Android APP如何和硬件进行通信？</h2><p>开发板搭配蓝牙模块或者WI-FI模块。</p>\n<p>WI-FI模块常用型号：ESP8266<br>蓝牙模块常用型号：HC08</p>\n<p><strong>esp8266的三种工作模式：</strong></p>\n<ol>\n<li>station（客户端模式）：类似于手机，小爱音响等设备（client）</li>\n<li>AP（接入点模式）：类似于路由器(server)，可以让其他设备访问</li>\n<li>station+AP（客户端+接入点模式）</li>\n</ol>\n<p><strong>使用手机APP连接WI-FI模块控制单片机硬件的逻辑：</strong><br>将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能</p>\n<p><strong>使用手机APP连接蓝牙模块控制单片机硬件的逻辑：</strong><br><img src=\"https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png\" alt=\"蓝牙连接逻辑图\"></p>\n<h2 id=\"逻辑设计\"><a href=\"#逻辑设计\" class=\"headerlink\" title=\"逻辑设计\"></a>逻辑设计</h2><h3 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h3><p>可选<strong>WI-FI</strong>模式和<strong>蓝牙</strong>模式</p>\n<p>WI-FI模式下端口号和IP地址输入的审核逻辑：</p>\n<ol>\n<li>若端口号和IP地址输入为空，则提示对应异常</li>\n<li>输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</li>\n</ol>\n<p>蓝牙模式下的操作逻辑：<br>搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</p>\n<h3 id=\"操作界面\"><a href=\"#操作界面\" class=\"headerlink\" title=\"操作界面\"></a>操作界面</h3><ol>\n<li>显示当前连接的IP地址/蓝牙名称</li>\n<li>提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。</li>\n<li>返回值显示框</li>\n</ol>\n<h2 id=\"Android-APP-WI-FI部分实现\"><a href=\"#Android-APP-WI-FI部分实现\" class=\"headerlink\" title=\"Android APP WI-FI部分实现\"></a>Android APP WI-FI部分实现</h2><p>引用：<br><a href=\"https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142%5Ev96%5Epc_search_result_base5&spm=1018.2226.3001.4187\">AndroidWIFI使用简述</a> —-（xml配置比较详细）<br><a href=\"https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187\">APP和ESP8266进行联网传输</a>–(xml只配置了网络)<br><strong>配置项目的静态权限</strong><br>在 <strong>AndroidManifest.xml</strong> 增加代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。</p>\n<p>但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">    <span class=\"hljs-comment\">&lt;!--Android 6 ~ 12 使用定位权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:ignore</span>=<span class=\"hljs-string\">&quot;CoarseFineLocation&quot;</span> /&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--Android 13及以上使用权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.NEARBY_WIFI_DEVICES&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:usesPermissionFlags</span>=<span class=\"hljs-string\">&quot;neverForLocation&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:targetApi</span>=<span class=\"hljs-string\">&quot;Tiramisu&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Android-Studio安装-mac\"><a href=\"#Android-Studio安装-mac\" class=\"headerlink\" title=\"Android Studio安装(mac)\"></a>Android Studio安装(mac)</h2><p><a href=\"https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h1><h2 id=\"Android-APP如何和硬件进行通信？\"><a href=\"#Android-APP如何和硬件进行通信？\" class=\"headerlink\" title=\"Android APP如何和硬件进行通信？\"></a>Android APP如何和硬件进行通信？</h2><p>开发板搭配蓝牙模块或者WI-FI模块。</p>\n<p>WI-FI模块常用型号：ESP8266<br>蓝牙模块常用型号：HC08</p>\n<p><strong>esp8266的三种工作模式：</strong></p>\n<ol>\n<li>station（客户端模式）：类似于手机，小爱音响等设备（client）</li>\n<li>AP（接入点模式）：类似于路由器(server)，可以让其他设备访问</li>\n<li>station+AP（客户端+接入点模式）</li>\n</ol>\n<p><strong>使用手机APP连接WI-FI模块控制单片机硬件的逻辑：</strong><br>将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能</p>\n<p><strong>使用手机APP连接蓝牙模块控制单片机硬件的逻辑：</strong><br><img src=\"https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png\" alt=\"蓝牙连接逻辑图\"></p>\n<h2 id=\"逻辑设计\"><a href=\"#逻辑设计\" class=\"headerlink\" title=\"逻辑设计\"></a>逻辑设计</h2><h3 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h3><p>可选<strong>WI-FI</strong>模式和<strong>蓝牙</strong>模式</p>\n<p>WI-FI模式下端口号和IP地址输入的审核逻辑：</p>\n<ol>\n<li>若端口号和IP地址输入为空，则提示对应异常</li>\n<li>输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</li>\n</ol>\n<p>蓝牙模式下的操作逻辑：<br>搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</p>\n<h3 id=\"操作界面\"><a href=\"#操作界面\" class=\"headerlink\" title=\"操作界面\"></a>操作界面</h3><ol>\n<li>显示当前连接的IP地址/蓝牙名称</li>\n<li>提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。</li>\n<li>返回值显示框</li>\n</ol>\n<h2 id=\"Android-APP-WI-FI部分实现\"><a href=\"#Android-APP-WI-FI部分实现\" class=\"headerlink\" title=\"Android APP WI-FI部分实现\"></a>Android APP WI-FI部分实现</h2><p>引用：<br><a href=\"https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142%5Ev96%5Epc_search_result_base5&spm=1018.2226.3001.4187\">AndroidWIFI使用简述</a> —-（xml配置比较详细）<br><a href=\"https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187\">APP和ESP8266进行联网传输</a>–(xml只配置了网络)<br><strong>配置项目的静态权限</strong><br>在 <strong>AndroidManifest.xml</strong> 增加代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。</p>\n<p>但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">    <span class=\"hljs-comment\">&lt;!--Android 6 ~ 12 使用定位权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:ignore</span>=<span class=\"hljs-string\">&quot;CoarseFineLocation&quot;</span> /&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--Android 13及以上使用权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.NEARBY_WIFI_DEVICES&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:usesPermissionFlags</span>=<span class=\"hljs-string\">&quot;neverForLocation&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:targetApi</span>=<span class=\"hljs-string\">&quot;Tiramisu&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Android-Studio安装-mac\"><a href=\"#Android-Studio安装-mac\" class=\"headerlink\" title=\"Android Studio安装(mac)\"></a>Android Studio安装(mac)</h2><p><a href=\"https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章2</a></p>\n"},{"title":"我的博客说明","date":"2023-02-09T17:01:46.000Z","_content":"## 记录内容的范围\n1. 生活\n2. 学习\n3. 敲代码\n4. 娱乐\n## 后续的优化\n本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主","source":"_posts/我的博客说明.md","raw":"---\ntitle: 我的博客说明\ndate: 2023-02-10 01:01:46\ntags:\ncategories: 博客介绍及更新日志\n---\n## 记录内容的范围\n1. 生活\n2. 学习\n3. 敲代码\n4. 娱乐\n## 后续的优化\n本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主","slug":"我的博客说明","published":1,"updated":"2023-02-15T17:08:54.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1ec00186ht0bgjj0gfj","content":"<h2 id=\"记录内容的范围\"><a href=\"#记录内容的范围\" class=\"headerlink\" title=\"记录内容的范围\"></a>记录内容的范围</h2><ol>\n<li>生活</li>\n<li>学习</li>\n<li>敲代码</li>\n<li>娱乐<h2 id=\"后续的优化\"><a href=\"#后续的优化\" class=\"headerlink\" title=\"后续的优化\"></a>后续的优化</h2>本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记录内容的范围\"><a href=\"#记录内容的范围\" class=\"headerlink\" title=\"记录内容的范围\"></a>记录内容的范围</h2><ol>\n<li>生活</li>\n<li>学习</li>\n<li>敲代码</li>\n<li>娱乐<h2 id=\"后续的优化\"><a href=\"#后续的优化\" class=\"headerlink\" title=\"后续的优化\"></a>后续的优化</h2>本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主</li>\n</ol>\n"},{"title":"项目计划","date":"2023-05-06T14:31:19.000Z","_content":"\n# 2023暑假项目列表   \n\n## C语言版贪吃蛇游戏\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n## 基于STM32的智能宠物喂食系统\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于STM32的智能小车\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于ARM+Linux的项目（待定）\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n","source":"_posts/项目计划.md","raw":"---\ntitle: 项目计划\ndate: 2023-05-06 22:31:19\ntags:\ncategories: 学习计划\n---\n\n# 2023暑假项目列表   \n\n## C语言版贪吃蛇游戏\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n## 基于STM32的智能宠物喂食系统\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于STM32的智能小车\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于ARM+Linux的项目（待定）\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n","slug":"项目计划","published":1,"updated":"2023-08-04T15:49:13.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clquku1ec00196ht06jx58z2n","content":"<h1 id=\"2023暑假项目列表\"><a href=\"#2023暑假项目列表\" class=\"headerlink\" title=\"2023暑假项目列表\"></a>2023暑假项目列表</h1><h2 id=\"C语言版贪吃蛇游戏\"><a href=\"#C语言版贪吃蛇游戏\" class=\"headerlink\" title=\"C语言版贪吃蛇游戏\"></a>C语言版贪吃蛇游戏</h2><h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档\"><a href=\"#项目文档\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能宠物喂食系统\"><a href=\"#基于STM32的智能宠物喂食系统\" class=\"headerlink\" title=\"基于STM32的智能宠物喂食系统\"></a>基于STM32的智能宠物喂食系统</h2><h3 id=\"状态-1\"><a href=\"#状态-1\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-1\"><a href=\"#项目文档-1\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-1\"><a href=\"#项目源码地址-1\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能小车\"><a href=\"#基于STM32的智能小车\" class=\"headerlink\" title=\"基于STM32的智能小车\"></a>基于STM32的智能小车</h2><h3 id=\"状态-2\"><a href=\"#状态-2\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-2\"><a href=\"#项目文档-2\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-2\"><a href=\"#项目源码地址-2\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于ARM-Linux的项目（待定）\"><a href=\"#基于ARM-Linux的项目（待定）\" class=\"headerlink\" title=\"基于ARM+Linux的项目（待定）\"></a>基于ARM+Linux的项目（待定）</h2><h3 id=\"状态-3\"><a href=\"#状态-3\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-3\"><a href=\"#项目文档-3\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-3\"><a href=\"#项目源码地址-3\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2023暑假项目列表\"><a href=\"#2023暑假项目列表\" class=\"headerlink\" title=\"2023暑假项目列表\"></a>2023暑假项目列表</h1><h2 id=\"C语言版贪吃蛇游戏\"><a href=\"#C语言版贪吃蛇游戏\" class=\"headerlink\" title=\"C语言版贪吃蛇游戏\"></a>C语言版贪吃蛇游戏</h2><h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档\"><a href=\"#项目文档\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能宠物喂食系统\"><a href=\"#基于STM32的智能宠物喂食系统\" class=\"headerlink\" title=\"基于STM32的智能宠物喂食系统\"></a>基于STM32的智能宠物喂食系统</h2><h3 id=\"状态-1\"><a href=\"#状态-1\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-1\"><a href=\"#项目文档-1\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-1\"><a href=\"#项目源码地址-1\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能小车\"><a href=\"#基于STM32的智能小车\" class=\"headerlink\" title=\"基于STM32的智能小车\"></a>基于STM32的智能小车</h2><h3 id=\"状态-2\"><a href=\"#状态-2\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-2\"><a href=\"#项目文档-2\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-2\"><a href=\"#项目源码地址-2\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于ARM-Linux的项目（待定）\"><a href=\"#基于ARM-Linux的项目（待定）\" class=\"headerlink\" title=\"基于ARM+Linux的项目（待定）\"></a>基于ARM+Linux的项目（待定）</h2><h3 id=\"状态-3\"><a href=\"#状态-3\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-3\"><a href=\"#项目文档-3\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-3\"><a href=\"#项目源码地址-3\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clquku1e300016ht0c2wnbxzy","category_id":"clquku1e500046ht0dki00hzc","_id":"clquku1e8000b6ht07y0o38qd"},{"post_id":"clquku1e700076ht05p707kzv","category_id":"clquku1e500046ht0dki00hzc","_id":"clquku1e8000e6ht0g8m89j4k"},{"post_id":"clquku1e600056ht0fhkgdxc5","category_id":"clquku1e700086ht035njfwjt","_id":"clquku1e9000g6ht02apch795"},{"post_id":"clquku1e8000d6ht0cct52x9q","category_id":"clquku1e8000c6ht0hckahbgs","_id":"clquku1e9000k6ht075q1gav4"},{"post_id":"clquku1e600066ht01ibrdl9z","category_id":"clquku1e8000c6ht0hckahbgs","_id":"clquku1e9000n6ht015qsdzci"},{"post_id":"clquku1e8000f6ht0he8p77ra","category_id":"clquku1e8000c6ht0hckahbgs","_id":"clquku1ea000p6ht008xi6879"},{"post_id":"clquku1e9000i6ht025is51hw","category_id":"clquku1e9000h6ht026vk14wx","_id":"clquku1ea000r6ht0bialhq5r"},{"post_id":"clquku1e700096ht009rh2g4m","category_id":"clquku1e9000h6ht026vk14wx","_id":"clquku1ea000u6ht02i2kfsx8"},{"post_id":"clquku1e9000j6ht031r0aw4z","category_id":"clquku1e8000c6ht0hckahbgs","_id":"clquku1ea000w6ht0fxnd9rnw"},{"post_id":"clquku1e7000a6ht0gzuq3xbv","category_id":"clquku1e9000l6ht0gbrt5ffo","_id":"clquku1eb000z6ht0bj7x3ri8"},{"post_id":"clquku1ea000t6ht05aty80gq","category_id":"clquku1ea000s6ht06d66857g","_id":"clquku1eb00116ht09rl39ha8"},{"post_id":"clquku1e9000m6ht0ffnb8pyk","category_id":"clquku1ea000s6ht06d66857g","_id":"clquku1eb00146ht01lv4fgsj"},{"post_id":"clquku1ea000o6ht03307gvhc","category_id":"clquku1ea000x6ht0cjdhaypf","_id":"clquku1ec00166ht0d53f4b4q"},{"post_id":"clquku1eb00136ht0ge7sc1jm","category_id":"clquku1e500046ht0dki00hzc","_id":"clquku1ec001a6ht03zi6h4ub"},{"post_id":"clquku1ea000v6ht0bjmlb34o","category_id":"clquku1eb00126ht00hv229jw","_id":"clquku1ec001b6ht0eptc5l81"},{"post_id":"clquku1eb00156ht04xg57qr3","category_id":"clquku1e700086ht035njfwjt","_id":"clquku1ed001d6ht0enkb6od8"},{"post_id":"clquku1eb000y6ht027s98wqq","category_id":"clquku1ec00176ht0aqk56vjp","_id":"clquku1ed001f6ht00sf6co4u"},{"post_id":"clquku1ec00186ht0bgjj0gfj","category_id":"clquku1ec00176ht0aqk56vjp","_id":"clquku1ed001g6ht00ad6ereq"},{"post_id":"clquku1ec00196ht06jx58z2n","category_id":"clquku1ed001e6ht0fn45g4bm","_id":"clquku1ed001h6ht0aib8dzba"}],"PostTag":[],"Tag":[]}}