{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"77c3bba18b6859d7a5197266691555a8999173f3","modified":1691032579905},{"_id":"source/about/index.md","hash":"300905e9c596660d5cf1ecc58eab53c7fae305fa","modified":1704372462492},{"_id":"source/_posts/Android-APP.md","hash":"20d138a42cec0e531afd4c9d888f921b043e8594","modified":1704372462489},{"_id":"source/_posts/Java.md","hash":"0c240085a40580a18cca080f8dac5a7fd7f1a700","modified":1704372462489},{"_id":"source/_posts/C语言学习笔记.md","hash":"7a9db19fd62c7d1e86bc60e30992fec5bfd012f5","modified":1704372462489},{"_id":"source/_posts/.DS_Store","hash":"4dc461da2ecea3430529bf0da67a2b6bbfa92b84","modified":1675969589642},{"_id":"source/_posts/Java抽奖网站.md","hash":"4c6ead7f55008810a7474dc2e3d1d983860c4627","modified":1704372462489},{"_id":"source/_posts/Linux.md","hash":"3adb5f3213ef1c93d7b71263f48757e737e1b60c","modified":1704372462489},{"_id":"source/_posts/Maven.md","hash":"ce34e3614fc5701abf7be8e502c48b22b25839cc","modified":1704372462490},{"_id":"source/_posts/Mybatis.md","hash":"56831095031b72f263dbdbd95aa1687ffff9c4fc","modified":1704372462490},{"_id":"source/_posts/PicGo图床搭建.md","hash":"3c8eca99874e568e8ca5b4b9020fe51e43e99e48","modified":1704372462490},{"_id":"source/_posts/SpringBoot.md","hash":"4cac3b3aaf136ccace94b824c980d282a701f887","modified":1704372462490},{"_id":"source/_posts/Redis.md","hash":"6888a78ef4f0f82501dbf86203a2ae873b706c30","modified":1704372462490},{"_id":"source/_posts/canvas.md","hash":"1cbdb158b7564a8893cb31083f3043068d2fa046","modified":1704372462491},{"_id":"source/_posts/git.md","hash":"659b5f2c86707d791c63a85a44fe017df9406fb6","modified":1704093076008},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1704372462491},{"_id":"source/_posts/readme.md","hash":"30904dbc0d9e1c3fe8b66ad1f9b2caeff90720d5","modified":1704372462491},{"_id":"source/_posts/我的博客说明.md","hash":"42c28996c69cffcf8ee736e5a26b5aa86716912b","modified":1704372462491},{"_id":"source/_posts/用51单片机控制SG90舵机.md","hash":"55a972034ff06d002e602034e89eaca8b1d6be15","modified":1704372462492},{"_id":"source/_posts/项目计划.md","hash":"eeac91a1684204bc97c7d6c4ba8e0a793c96beb5","modified":1704372895799},{"_id":"source/_posts/更新日志.md","hash":"21f3402bbd7a1faa62a36b94ec8f63b70d9624ab","modified":1704372462491},{"_id":"source/categories/index.md","hash":"1ef928785b6c515ec22b807e0321498adaf907a7","modified":1704372462492},{"_id":"source/_posts/markdown语法.md","hash":"53ffd066c251bdfd3b4c833f5f11f8370528b745","modified":1704372462491},{"_id":"source/_posts/科学上网.md","hash":"180d0638eba689ef9c281309de335f3843a648e4","modified":1704372462492},{"_id":"source/_posts/蓝牙Wi-Fi助手.md","hash":"7b5b1c44ee97cc314a62a79970cfbd0d0d4f20ec","modified":1704372462492},{"_id":"source/_posts/hexo博客自定义.md","hash":"4aa79a3e3f1cd5bac2a92f43d89c4e425db4fd6a","modified":1704372462491},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670937168000},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1704372462493},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1704372462493},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1704372462493},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1704372462494},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1704372462495},{"_id":"themes/fluid/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1704372462495},{"_id":"themes/fluid/README_en.md","hash":"10ff41f4b3cf24ad0fece6555b77f61694916133","modified":1704372462495},{"_id":"themes/fluid/_config.yml","hash":"ebec356978d14186043e379c3f278f00d8fe52b1","modified":1704372462495},{"_id":"themes/fluid/package.json","hash":"17d2e8ee29d0aeeaa1e92e4bcfeda208585e415e","modified":1704372462504},{"_id":"themes/fluid/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1704372462495},{"_id":"themes/fluid/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1704372462495},{"_id":"themes/fluid/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1704372462496},{"_id":"themes/fluid/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1704372462496},{"_id":"themes/fluid/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1704372462496},{"_id":"themes/fluid/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1704372462496},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1704372462496},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1704372462496},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1704372462496},{"_id":"themes/fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1704372462497},{"_id":"themes/fluid/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1704372462503},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1704372462503},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1704372462503},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1704372462503},{"_id":"themes/fluid/layout/index.ejs","hash":"1c80e6d8a81034e84271ab2b30058c26378a8e84","modified":1704372462503},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1704372462503},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1704372462504},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1704372462504},{"_id":"themes/fluid/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1704372462504},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1704372462504},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1704372462504},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1704372462493},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1704372462493},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1704372462493},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1704372462493},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1704372462494},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1704372462494},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1704372462494},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1704372462494},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1704372462497},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1704372462497},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1704372462497},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1704372462497},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"0289f61834fd21a8f958f8e18b395a989b285682","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1704372462500},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1704372462500},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1704372462500},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1704372462503},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1704372462503},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1704372462505},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1704372462506},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1704372462506},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1704372462506},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1704372462506},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1704372462506},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1704372462506},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1704372462506},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1704372462507},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1704372462507},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1704372462507},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1704372462507},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1704372462507},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1704372462507},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1704372462507},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9f88c9149e8e7c4f90a5cf833373e4d18ecb2500","modified":1704372462508},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1704372462508},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1704372462508},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1704372462508},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1704372462508},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1704372462508},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1704372462508},{"_id":"themes/fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1704372462508},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1704372462509},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1704372462509},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1704372462509},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1704372462515},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1704372462515},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1704372462515},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1704372462515},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1670937168000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1670937168000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1670937168000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1670937168000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1704372462519},{"_id":"themes/fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1704372462517},{"_id":"themes/fluid/source/js/color-schema.js","hash":"7e15ce2ef16b0705148306a27c6a79d809c3040b","modified":1704372462518},{"_id":"themes/fluid/source/js/events.js","hash":"0eda8690b8e3912d90afe987ea6e80e881338c1f","modified":1704372462518},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1704372462518},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1704372462518},{"_id":"themes/fluid/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1704372462518},{"_id":"themes/fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1704372462518},{"_id":"themes/fluid/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1704372462519},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1704372462497},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1704372462497},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1704372462498},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1704372462498},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1704372462498},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1704372462498},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1704372462498},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1704372462498},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1704372462499},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1704372462500},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"0bc2f480f19e1efe785dec306ba525428aa881b7","modified":1704372462500},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1704372462500},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1704372462500},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1704372462501},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"b40422f56442cd693220652ef4ecec78dca2158f","modified":1704372462501},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1704372462501},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1704372462501},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1704372462501},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"dd2691c5d7c01c90718a11be3768b9f3d55d066d","modified":1704372462501},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1704372462501},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1704372462502},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1704372462502},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"fd1d586b11c7b9f1850da7963ef593e2a7739cf7","modified":1704372462502},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1704372462502},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1704372462502},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1704372462502},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1704372462502},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1704372462502},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1704372462505},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1704372462505},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1704372462505},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1704372462505},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1704372462505},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1704372462505},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1704372462506},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1704372462509},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1704372462509},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1704372462514},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1704372462515},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1704372462509},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1704372462510},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1704372462513},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1704372462513},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1704372462513},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1704372462513},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1704372462513},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1704372462513},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1704372462514},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1704372462514},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1704372462514},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1704372462514},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1704372462514},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1704372462514},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1704372462510},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1704372462510},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1704372462510},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1704372462510},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1704372462510},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1704372462510},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1704372462511},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"5563abb10a40e2f8ece8e521763fe67c6e6bc12b","modified":1704372462511},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1704372462511},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1704372462511},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1704372462512},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1704372462512},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1670937168000},{"_id":"public/atom.xml","hash":"ef8e7f3f18853608a1cb22f51358ddca84d13dbb","modified":1704386139530},{"_id":"public/local-search.xml","hash":"f7aaaaa0e0a8678f5fdc485dec8af1e1f5d95229","modified":1704386139530},{"_id":"public/about/index.html","hash":"03591a1b8ea3d1b83c0b38344a06915d6afd243b","modified":1704386139530},{"_id":"public/categories/APP-小程序/index.html","hash":"2e8075403c7bb8bc4f0de286ec536e5411503491","modified":1704386139530},{"_id":"public/categories/编程语言及工具/index.html","hash":"c77b2eed5b356b0f6430969320d678544eb5c2b9","modified":1704386139530},{"_id":"public/categories/编程语言及工具笔记/index.html","hash":"3b9b7d3aa03b14507036c6be00e756d3ffb03586","modified":1704386139530},{"_id":"public/categories/前后端项目/index.html","hash":"5b2ff894d0fd461e744450683944c14b17ef0335","modified":1704386139530},{"_id":"public/categories/后端/index.html","hash":"3b99afdbd7df6db4d375eb6e82603d9468cf8910","modified":1704386139530},{"_id":"public/categories/前端/index.html","hash":"09d7f89029d71dbe4045c06e2e16334792155202","modified":1704386139530},{"_id":"public/categories/Hexo/index.html","hash":"9eac8473a5d5b0844cb4e080f4a1f6a527e42a90","modified":1704386139530},{"_id":"public/categories/博客介绍及更新日志/index.html","hash":"5769791dcb61a24c6f5c77ead766523a5c528632","modified":1704386139530},{"_id":"public/categories/学习计划/index.html","hash":"8333653cb0a105857505cd8f9f2ed59dc5e06243","modified":1704386139530},{"_id":"public/categories/51单片机/index.html","hash":"24d61384c915b2616690d11a29581f048b4c6739","modified":1704386139530},{"_id":"public/archives/index.html","hash":"a823ea6f4faa21584805c290613cc0bfea17a750","modified":1704386139530},{"_id":"public/archives/page/2/index.html","hash":"4fc383884921b8e70e98e639e54ae8d63176f31c","modified":1704386139530},{"_id":"public/archives/page/3/index.html","hash":"b78ba2108a1997f6218b6e3a76b646e20faffbb9","modified":1704386139530},{"_id":"public/archives/2023/index.html","hash":"49798a0ae5f8eec72a1ddca196e18d9368319fc9","modified":1704386139530},{"_id":"public/archives/2023/page/2/index.html","hash":"39e17e0ac458f48365991804cca8c3ef57114595","modified":1704386139530},{"_id":"public/archives/2023/page/3/index.html","hash":"2ace5767a76b7bbe088425584d2d9e43db80ca00","modified":1704386139530},{"_id":"public/archives/2023/02/index.html","hash":"dccc5d8ad8ae80e234a1fdbbce866087bdf797f0","modified":1704386139530},{"_id":"public/archives/2023/03/index.html","hash":"21995b86d9bde433c2a831aeb560955e915b40e6","modified":1704386139530},{"_id":"public/archives/2023/05/index.html","hash":"1f52200cada35ad103d26042b9972e76fdad8be7","modified":1704386139530},{"_id":"public/archives/2023/04/index.html","hash":"b50781419edb62da74ff955a2f9c71dc69b93fe2","modified":1704386139530},{"_id":"public/archives/2023/11/index.html","hash":"535bb0282cc2c2f78f4b940b9780a9464fc383b7","modified":1704386139530},{"_id":"public/page/3/index.html","hash":"594597b29d75f0511d8a05cb1ae60656006d387a","modified":1704386139530},{"_id":"public/404.html","hash":"ab73663e22052b440365e164b5f87cc4f87c8bbf","modified":1704386139530},{"_id":"public/categories/index.html","hash":"ba0f107e5ae9c66286ce3e1720c372184b116657","modified":1704386139530},{"_id":"public/2023/11/29/蓝牙Wi-Fi助手/index.html","hash":"93c02a6681ea4b7e7ff7a5d5286fd573b15b294b","modified":1704386139530},{"_id":"public/2023/11/29/Android-APP/index.html","hash":"5c5b25787013c3e3dd7619ea9e84966cab69b97f","modified":1704386139530},{"_id":"public/2023/11/26/canvas/index.html","hash":"b238b3fc0f223d72f4c85c5d419744ae406e846a","modified":1704386139530},{"_id":"public/2023/11/24/Mybatis/index.html","hash":"bc63523c14088a64a7f96604eccefb51a81ee083","modified":1704386139530},{"_id":"public/2023/11/24/Redis/index.html","hash":"c38f43cea008ba737fb05d4476ece2cbdad1e14c","modified":1704386139530},{"_id":"public/2023/11/24/Maven/index.html","hash":"ccacd7001eb1c2988f936c01b8756cac3f2c90d1","modified":1704386139530},{"_id":"public/2023/11/24/SpringBoot/index.html","hash":"14992e5d6940c061663d68335c14dfcc0e1dfc8b","modified":1704386139530},{"_id":"public/2023/11/20/Java抽奖网站/index.html","hash":"28f3015032a8c277eb3aa072412ca9327823d06d","modified":1704386139530},{"_id":"public/2023/11/17/Java/index.html","hash":"19e7316fb8fec0f40c4593f3d97d945c44a49c3c","modified":1704386139530},{"_id":"public/2023/05/06/项目计划/index.html","hash":"ac670fcaaf6c98f13851c32cc672a35576a6e601","modified":1704386139530},{"_id":"public/2023/04/24/Linux/index.html","hash":"6b656b46cea798c2562f2128a964e11e0947b7ed","modified":1704386139530},{"_id":"public/2023/04/24/PicGo图床搭建/index.html","hash":"cd42f4e7d89a7e1687bf9ff546602751e41ac22d","modified":1704386139530},{"_id":"public/2023/04/08/git/index.html","hash":"63a7397c1f0e5952bfc8a78a64bded8b2a18d026","modified":1704386139530},{"_id":"public/2023/03/27/markdown语法/index.html","hash":"3b4e873827271d39f8cd7bcefdef718558194adf","modified":1704386139530},{"_id":"public/2023/03/27/C语言学习笔记/index.html","hash":"ab9ae8d87211d2c1d0b2773cf50be08c5da77dae","modified":1704386139530},{"_id":"public/2023/03/10/科学上网/index.html","hash":"4749af7316f19a19312e217f6babe3adc3c097ec","modified":1704386139530},{"_id":"public/2023/03/07/用51单片机控制SG90舵机/index.html","hash":"9b5f5c3841c7a5fb937be7b0d331008d0d90c917","modified":1704386139530},{"_id":"public/2023/03/07/hexo博客自定义/index.html","hash":"96c4e35ec5fca68789a1dcd54c90f900bd8d35b1","modified":1704386139530},{"_id":"public/2023/02/15/更新日志/index.html","hash":"19ec889d93bd31b369048b2d0890b86e063f9122","modified":1704386139530},{"_id":"public/2023/02/10/我的博客说明/index.html","hash":"9406fb008b197cd4d59a10e3d57ce3973c5492d7","modified":1704386139530},{"_id":"public/2023/02/09/readme/index.html","hash":"a468b4865be0e2ee51e843b2cadaa6594307542a","modified":1704386139530},{"_id":"public/2023/02/08/hello-world/index.html","hash":"a923f9db773f90c219539515a1cee88bb4b196f3","modified":1704371208434},{"_id":"public/index.html","hash":"f9d50666a2c91a59c50697b91b9405ddedd53595","modified":1704386139530},{"_id":"public/page/2/index.html","hash":"09c3d4edefe7815a8f8aff98879f3091d45059c6","modified":1704386139530},{"_id":"public/tags/index.html","hash":"89b16f724281fe0b7f691ffb98b12c2dca460355","modified":1704386139530},{"_id":"public/links/index.html","hash":"215ffe052e700244c497922c48e5448815fcd969","modified":1704386139530},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1704371208434},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1704371208434},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1704371208434},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1704386139530},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1704371208434},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1704371208434},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1704371208434},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1704371208434},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1704371208434},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1704371208434},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1704371208434},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1704371208434},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1704371208434},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1704371208434},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1704371208434},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1704371208434},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1704371208434},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1704371208434},{"_id":"source/_posts/C-QT.md","hash":"adca135797890a5050a1793b4e34d9639c28b73e","modified":1704386029384},{"_id":"public/archives/2024/index.html","hash":"b055f902a02ae2bd08f78063fe62c53fcab0389a","modified":1704386139530},{"_id":"public/archives/2024/01/index.html","hash":"97744d270f5b29c4f4bbdb0e2504f06882218a4c","modified":1704386139530},{"_id":"public/2024/01/04/hello-world/index.html","hash":"616dd526e7561cf9fa2896bc1c6c25abfde0f8c4","modified":1704386139530},{"_id":"public/2024/01/05/C-QT/index.html","hash":"68848724de4417f632d7bdabed3fa47bc6909984","modified":1704386139530}],"Category":[{"name":"APP & 小程序","_id":"clqz6m15c0004vpt0b53y1jqd"},{"name":"编程语言及工具","_id":"clqz6m15d0008vpt02shnbozi"},{"name":"编程语言及工具笔记","_id":"clqz6m15e000cvpt0d99873hf"},{"name":"前后端项目","_id":"clqz6m15f000gvpt08kf5b8yc"},{"name":"后端","_id":"clqz6m15f000kvpt0czak2bjy"},{"name":"前端","_id":"clqz6m15i0013vpt09y88hfmf"},{"name":"Hexo","_id":"clqz6m15j0018vpt0761khlcc"},{"name":"博客介绍及更新日志","_id":"clqz6m15j001cvpt01kwv2f5f"},{"name":"51单片机","_id":"clqz6m15k001fvpt088782tjx"},{"name":"学习计划","_id":"clqz6m15k001ivpt01pp85ox0"}],"Data":[],"Page":[{"title":"炸酱面橙子皮","layout":"about","date":"2023-03-09T13:53:47.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 炸酱面橙子皮\nlayout: about\ndate: 2023-03-09 21:53:47\n---\n","updated":"2024-01-04T12:47:42.492Z","path":"about/index.html","_id":"clqz6m1580000vpt0cgntbtxy","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2023-02-10T05:48:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-02-10 13:48:39\ntype: categories\n---\n","updated":"2024-01-04T12:47:42.492Z","path":"categories/index.html","_id":"clqz6m15b0002vpt07temekn4","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android APP项目","date":"2023-11-29T12:51:00.000Z","_content":"\n# Android APP\n\n## 蓝牙Wi-Fi助手\n\n**项目状态：未完成**\n\n[开发文档]()\n\n[代码仓库]()\n\n","source":"_posts/Android-APP.md","raw":"---\ntitle: Android APP项目\ndate: 2023-11-29 20:51:00\ntags:\ncategories: APP & 小程序\n---\n\n# Android APP\n\n## 蓝牙Wi-Fi助手\n\n**项目状态：未完成**\n\n[开发文档]()\n\n[代码仓库]()\n\n","slug":"Android-APP","published":1,"updated":"2024-01-04T12:47:42.489Z","_id":"clqz6m1590001vpt02cue1lrx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Android-APP\"><a href=\"#Android-APP\" class=\"headerlink\" title=\"Android APP\"></a>Android APP</h1><h2 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h2><p><strong>项目状态：未完成</strong></p>\n<p><a href=\"\">开发文档</a></p>\n<p><a href=\"\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android-APP\"><a href=\"#Android-APP\" class=\"headerlink\" title=\"Android APP\"></a>Android APP</h1><h2 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h2><p><strong>项目状态：未完成</strong></p>\n<p><a href=\"\">开发文档</a></p>\n<p><a href=\"\">代码仓库</a></p>\n"},{"title":"Java","date":"2023-11-17T15:10:34.000Z","_content":"# Java大纲\nhttps://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\n\n密码：1#1DZ(rJ\n## Java抽奖网站\n\n涉及技术栈：\n前端：html，css，js\n后端：springboot，maven，nginx，aliyun，ajax\n\n项目文档：[抽奖网站]()\n\n## 掘金项目\n涉及技术栈：\n前端：\n后端：\n","source":"_posts/Java.md","raw":"---\ntitle: Java\ndate: 2023-11-17 23:10:34\ntags:\ncategories: 编程语言及工具\n---\n# Java大纲\nhttps://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\n\n密码：1#1DZ(rJ\n## Java抽奖网站\n\n涉及技术栈：\n前端：html，css，js\n后端：springboot，maven，nginx，aliyun，ajax\n\n项目文档：[抽奖网站]()\n\n## 掘金项目\n涉及技术栈：\n前端：\n后端：\n","slug":"Java","published":1,"updated":"2024-01-04T12:47:42.489Z","_id":"clqz6m15b0003vpt07bmr82ro","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java大纲\"><a href=\"#Java大纲\" class=\"headerlink\" title=\"Java大纲\"></a>Java大纲</h1><p><a href=\"https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\">https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g</a></p>\n<p>密码：1#1DZ(rJ</p>\n<h2 id=\"Java抽奖网站\"><a href=\"#Java抽奖网站\" class=\"headerlink\" title=\"Java抽奖网站\"></a>Java抽奖网站</h2><p>涉及技术栈：<br>前端：html，css，js<br>后端：springboot，maven，nginx，aliyun，ajax</p>\n<p>项目文档：<a href=\"\">抽奖网站</a></p>\n<h2 id=\"掘金项目\"><a href=\"#掘金项目\" class=\"headerlink\" title=\"掘金项目\"></a>掘金项目</h2><p>涉及技术栈：<br>前端：<br>后端：</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java大纲\"><a href=\"#Java大纲\" class=\"headerlink\" title=\"Java大纲\"></a>Java大纲</h1><p><a href=\"https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g\">https://sparrowzoo.feishu.cn/docs/doccnEKcUsEmfLwpnLc6WFCsU3g</a></p>\n<p>密码：1#1DZ(rJ</p>\n<h2 id=\"Java抽奖网站\"><a href=\"#Java抽奖网站\" class=\"headerlink\" title=\"Java抽奖网站\"></a>Java抽奖网站</h2><p>涉及技术栈：<br>前端：html，css，js<br>后端：springboot，maven，nginx，aliyun，ajax</p>\n<p>项目文档：<a href=\"\">抽奖网站</a></p>\n<h2 id=\"掘金项目\"><a href=\"#掘金项目\" class=\"headerlink\" title=\"掘金项目\"></a>掘金项目</h2><p>涉及技术栈：<br>前端：<br>后端：</p>\n"},{"title":"C语言学习笔记","date":"2023-03-27T11:18:27.000Z","_content":"\n# C语言学习笔记\n\n\n","source":"_posts/C语言学习笔记.md","raw":"---\ntitle: C语言学习笔记\ndate: 2023-03-27 19:18:27\ntags:\ncategories: 编程语言及工具笔记\n---\n\n# C语言学习笔记\n\n\n","slug":"C语言学习笔记","published":1,"updated":"2024-01-04T12:47:42.489Z","_id":"clqz6m15c0005vpt0grsrehx4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"C语言学习笔记\"><a href=\"#C语言学习笔记\" class=\"headerlink\" title=\"C语言学习笔记\"></a>C语言学习笔记</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C语言学习笔记\"><a href=\"#C语言学习笔记\" class=\"headerlink\" title=\"C语言学习笔记\"></a>C语言学习笔记</h1>"},{"title":"Java抽奖网站","date":"2023-11-20T07:23:15.000Z","_content":"# Java抽奖网站(学习笔记记录)\n\n## 前期准备\n\n### 后端\n[SpringBoot](https://gooddefense.github.io/2023/11/24/SpringBoot/)\n[maven](https://gooddefense.github.io/2023/11/24/Maven/)\n[Mybatis](https://gooddefense.github.io/2023/11/24/Mybatis/)\n[Git](https://gooddefense.github.io/2023/04/08/git/)\n[Redis](https://gooddefense.github.io/2023/11/24/Redis/)\n\n\n### 前端  \n- HTML：[学习网站](https://www.w3cschool.cn/html)\n  - **canvas(HTML5)**：[学习资料](https://gooddefense.github.io/2023/11/26/canvas/)\n- CSS：[学习网站](https://www.w3school.com.cn/css/index.asp)\n- JavaScript：[学习网站]()\n\n\n\n\n\n","source":"_posts/Java抽奖网站.md","raw":"---\ntitle: Java抽奖网站\ndate: 2023-11-20 15:23:15\ntags:\ncategories: 前后端项目\n---\n# Java抽奖网站(学习笔记记录)\n\n## 前期准备\n\n### 后端\n[SpringBoot](https://gooddefense.github.io/2023/11/24/SpringBoot/)\n[maven](https://gooddefense.github.io/2023/11/24/Maven/)\n[Mybatis](https://gooddefense.github.io/2023/11/24/Mybatis/)\n[Git](https://gooddefense.github.io/2023/04/08/git/)\n[Redis](https://gooddefense.github.io/2023/11/24/Redis/)\n\n\n### 前端  \n- HTML：[学习网站](https://www.w3cschool.cn/html)\n  - **canvas(HTML5)**：[学习资料](https://gooddefense.github.io/2023/11/26/canvas/)\n- CSS：[学习网站](https://www.w3school.com.cn/css/index.asp)\n- JavaScript：[学习网站]()\n\n\n\n\n\n","slug":"Java抽奖网站","published":1,"updated":"2024-01-04T12:47:42.489Z","_id":"clqz6m15d0006vpt07jfc3bw5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java抽奖网站-学习笔记记录\"><a href=\"#Java抽奖网站-学习笔记记录\" class=\"headerlink\" title=\"Java抽奖网站(学习笔记记录)\"></a>Java抽奖网站(学习笔记记录)</h1><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p><a href=\"https://gooddefense.github.io/2023/11/24/SpringBoot/\">SpringBoot</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Maven/\">maven</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Mybatis/\">Mybatis</a><br><a href=\"https://gooddefense.github.io/2023/04/08/git/\">Git</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Redis/\">Redis</a></p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>HTML：<a href=\"https://www.w3cschool.cn/html\">学习网站</a><ul>\n<li>**canvas(HTML5)**：<a href=\"https://gooddefense.github.io/2023/11/26/canvas/\">学习资料</a></li>\n</ul>\n</li>\n<li>CSS：<a href=\"https://www.w3school.com.cn/css/index.asp\">学习网站</a></li>\n<li>JavaScript：<a href=\"\">学习网站</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java抽奖网站-学习笔记记录\"><a href=\"#Java抽奖网站-学习笔记记录\" class=\"headerlink\" title=\"Java抽奖网站(学习笔记记录)\"></a>Java抽奖网站(学习笔记记录)</h1><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p><a href=\"https://gooddefense.github.io/2023/11/24/SpringBoot/\">SpringBoot</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Maven/\">maven</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Mybatis/\">Mybatis</a><br><a href=\"https://gooddefense.github.io/2023/04/08/git/\">Git</a><br><a href=\"https://gooddefense.github.io/2023/11/24/Redis/\">Redis</a></p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>HTML：<a href=\"https://www.w3cschool.cn/html\">学习网站</a><ul>\n<li>**canvas(HTML5)**：<a href=\"https://gooddefense.github.io/2023/11/26/canvas/\">学习资料</a></li>\n</ul>\n</li>\n<li>CSS：<a href=\"https://www.w3school.com.cn/css/index.asp\">学习网站</a></li>\n<li>JavaScript：<a href=\"\">学习网站</a></li>\n</ul>\n"},{"title":"Linux","date":"2023-04-24T12:45:44.000Z","_content":"","source":"_posts/Linux.md","raw":"---\ntitle: Linux\ndate: 2023-04-24 20:45:44\ntags:\n---\n","slug":"Linux","published":1,"updated":"2024-01-04T12:47:42.489Z","_id":"clqz6m15d0007vpt03nk79v3q","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Mybatis","date":"2023-11-24T03:27:40.000Z","_content":"","source":"_posts/Mybatis.md","raw":"---\ntitle: Mybatis\ndate: 2023-11-24 11:27:40\ntags:\ncategories: 后端\n---\n","slug":"Mybatis","published":1,"updated":"2024-01-04T12:47:42.490Z","_id":"clqz6m15d0009vpt074p8fow4","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Maven","date":"2023-11-24T03:27:09.000Z","_content":"\n# Maven\n\n## Maven简介\nMaven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。\n\n**maven的作用**\n- 一键构建\n    构建的过程：编译-测试-运行-打包-安装-部署等\n- 依赖管理\n    maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。\n\n\n## 下载和配置Maven\n\n### 下载\n**[maven下载链接](https://maven.apache.org/download.cgi)**\n\n**文件名后缀为bin.tar.gz**\n\n### 配置maven_home环境变量\n这里只写了mac的实例(windows的自行搜索)：\n```Makefile\n    \n```\n\n\n","source":"_posts/Maven.md","raw":"---\ntitle: Maven\ndate: 2023-11-24 11:27:09\ntags:\ncategories: 后端\n---\n\n# Maven\n\n## Maven简介\nMaven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。\n\n**maven的作用**\n- 一键构建\n    构建的过程：编译-测试-运行-打包-安装-部署等\n- 依赖管理\n    maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。\n\n\n## 下载和配置Maven\n\n### 下载\n**[maven下载链接](https://maven.apache.org/download.cgi)**\n\n**文件名后缀为bin.tar.gz**\n\n### 配置maven_home环境变量\n这里只写了mac的实例(windows的自行搜索)：\n```Makefile\n    \n```\n\n\n","slug":"Maven","published":1,"updated":"2024-01-04T12:47:42.490Z","_id":"clqz6m15e000avpt040qxfkrm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1><h2 id=\"Maven简介\"><a href=\"#Maven简介\" class=\"headerlink\" title=\"Maven简介\"></a>Maven简介</h2><p>Maven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。</p>\n<p><strong>maven的作用</strong></p>\n<ul>\n<li>一键构建<br>  构建的过程：编译-测试-运行-打包-安装-部署等</li>\n<li>依赖管理<br>  maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。</li>\n</ul>\n<h2 id=\"下载和配置Maven\"><a href=\"#下载和配置Maven\" class=\"headerlink\" title=\"下载和配置Maven\"></a>下载和配置Maven</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><strong><a href=\"https://maven.apache.org/download.cgi\">maven下载链接</a></strong></p>\n<p><strong>文件名后缀为bin.tar.gz</strong></p>\n<h3 id=\"配置maven-home环境变量\"><a href=\"#配置maven-home环境变量\" class=\"headerlink\" title=\"配置maven_home环境变量\"></a>配置maven_home环境变量</h3><p>这里只写了mac的实例(windows的自行搜索)：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Makefile\">    <br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1><h2 id=\"Maven简介\"><a href=\"#Maven简介\" class=\"headerlink\" title=\"Maven简介\"></a>Maven简介</h2><p>Maven是一个项目管理工具。它可以帮助程序员构建工程，管理jar包，编译代码，完成测试，项目打包等等。</p>\n<p><strong>maven的作用</strong></p>\n<ul>\n<li>一键构建<br>  构建的过程：编译-测试-运行-打包-安装-部署等</li>\n<li>依赖管理<br>  maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。</li>\n</ul>\n<h2 id=\"下载和配置Maven\"><a href=\"#下载和配置Maven\" class=\"headerlink\" title=\"下载和配置Maven\"></a>下载和配置Maven</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><strong><a href=\"https://maven.apache.org/download.cgi\">maven下载链接</a></strong></p>\n<p><strong>文件名后缀为bin.tar.gz</strong></p>\n<h3 id=\"配置maven-home环境变量\"><a href=\"#配置maven-home环境变量\" class=\"headerlink\" title=\"配置maven_home环境变量\"></a>配置maven_home环境变量</h3><p>这里只写了mac的实例(windows的自行搜索)：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Makefile\">    <br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"PicGo图床搭建","date":"2023-04-24T09:09:15.000Z","_content":"\n# 三分钟搭建PicGo图床\n参考链接：[跳转至Bilibili](https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click)\n\n原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。\n\n当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）**（已修改，详情见细下文）**\n\n\n ## Github\n ***建议科学上网，否则网速真的很慢***\n1. 登录Github账号，点击右上角的+号\n![截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png)\n2. 在加号的下拉列表中，选择**New repository**--创建新仓库\n![创建新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png)\n3. 进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository\n![配置新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png)\n\n***做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行***\n\n ## PicGo\n ***还是建议科学上网，下载速度会快很多***\n\n 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：[官方下载链接 ](https://github.com/Molunerfinn/PicGo/releases)\n\n### 下载时碰到的问题和解决办法\n在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。\n报错信息：\n```\nPicGo已损坏，无法打开。 您应该将它移到废纸篓。\n```\n\n**解决办法：**\n在终端输入命令（注意最后有一个空格）：\n```shell\nsudo xattr -r -d com.apple.quarantine \n```\n***先不要按回车！(重要的事情说三遍)***\n打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：\n```shell\nsudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app\n```\n回到终端窗口按回车，输入系统密码回车即可正常使用\n\n### 设置PicGo\n 下载完成之后，进入界面，选择图床设置->Github\n ![图床设置](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png)\n\n 设定仓库按照上图所示填写：**用户名/仓库名**\n 分支名填main或者master都可以\n token：从Github上获取\n\n ***这里如何获取token？***\n 1. 点击用户头像，点击下拉列表的Settings-设置选项\n ![xx](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png) \n 2. 点击左边列表的Developer settings\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png)\n 3. 点击Personal access tokens->Tokens(classic)\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png)\n 4. 点击Generate new token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png)\n 5. 输入Note，Select scopes选择repo即可,点击Generate token,即可生成token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png)\n 6. 将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床\n\n\n### 测试结果\n**Github仓库截图：**\n![Github仓库截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png)\n\n**markdown截图：**\n![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png)\n\n***这样子，一个使用方便的图床就搭建好了！***\n\n## 别的方式","source":"_posts/PicGo图床搭建.md","raw":"---\ntitle: PicGo图床搭建\ndate: 2023-04-24 17:09:15\ntags:\ncategories: 编程语言及工具笔记\n---\n\n# 三分钟搭建PicGo图床\n参考链接：[跳转至Bilibili](https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click)\n\n原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。\n\n当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）**（已修改，详情见细下文）**\n\n\n ## Github\n ***建议科学上网，否则网速真的很慢***\n1. 登录Github账号，点击右上角的+号\n![截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png)\n2. 在加号的下拉列表中，选择**New repository**--创建新仓库\n![创建新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png)\n3. 进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository\n![配置新仓库](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png)\n\n***做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行***\n\n ## PicGo\n ***还是建议科学上网，下载速度会快很多***\n\n 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：[官方下载链接 ](https://github.com/Molunerfinn/PicGo/releases)\n\n### 下载时碰到的问题和解决办法\n在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。\n报错信息：\n```\nPicGo已损坏，无法打开。 您应该将它移到废纸篓。\n```\n\n**解决办法：**\n在终端输入命令（注意最后有一个空格）：\n```shell\nsudo xattr -r -d com.apple.quarantine \n```\n***先不要按回车！(重要的事情说三遍)***\n打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：\n```shell\nsudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app\n```\n回到终端窗口按回车，输入系统密码回车即可正常使用\n\n### 设置PicGo\n 下载完成之后，进入界面，选择图床设置->Github\n ![图床设置](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png)\n\n 设定仓库按照上图所示填写：**用户名/仓库名**\n 分支名填main或者master都可以\n token：从Github上获取\n\n ***这里如何获取token？***\n 1. 点击用户头像，点击下拉列表的Settings-设置选项\n ![xx](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png) \n 2. 点击左边列表的Developer settings\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png)\n 3. 点击Personal access tokens->Tokens(classic)\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png)\n 4. 点击Generate new token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png)\n 5. 输入Note，Select scopes选择repo即可,点击Generate token,即可生成token\n ![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png)\n 6. 将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床\n\n\n### 测试结果\n**Github仓库截图：**\n![Github仓库截图](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png)\n\n**markdown截图：**\n![](https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png)\n\n***这样子，一个使用方便的图床就搭建好了！***\n\n## 别的方式","slug":"PicGo图床搭建","published":1,"updated":"2024-01-04T12:47:42.490Z","_id":"clqz6m15e000dvpt0b6iuckoz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"三分钟搭建PicGo图床\"><a href=\"#三分钟搭建PicGo图床\" class=\"headerlink\" title=\"三分钟搭建PicGo图床\"></a>三分钟搭建PicGo图床</h1><p>参考链接：<a href=\"https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click\">跳转至Bilibili</a></p>\n<p>原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。</p>\n<p>当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）<strong>（已修改，详情见细下文）</strong></p>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p> <em><strong>建议科学上网，否则网速真的很慢</strong></em></p>\n<ol>\n<li>登录Github账号，点击右上角的+号<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png\" alt=\"截图\"></li>\n<li>在加号的下拉列表中，选择<strong>New repository</strong>–创建新仓库<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png\" alt=\"创建新仓库\"></li>\n<li>进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png\" alt=\"配置新仓库\"></li>\n</ol>\n<p><em><strong>做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行</strong></em></p>\n<h2 id=\"PicGo\"><a href=\"#PicGo\" class=\"headerlink\" title=\"PicGo\"></a>PicGo</h2><p> <em><strong>还是建议科学上网，下载速度会快很多</strong></em></p>\n<p> 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：<a href=\"https://github.com/Molunerfinn/PicGo/releases\">官方下载链接 </a></p>\n<h3 id=\"下载时碰到的问题和解决办法\"><a href=\"#下载时碰到的问题和解决办法\" class=\"headerlink\" title=\"下载时碰到的问题和解决办法\"></a>下载时碰到的问题和解决办法</h3><p>在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。<br>报错信息：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">PicGo已损坏，无法打开。 您应该将它移到废纸篓。<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决办法：</strong><br>在终端输入命令（注意最后有一个空格）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine <br></code></pre></td></tr></table></figure>\n<p><em><strong>先不要按回车！(重要的事情说三遍)</strong></em><br>打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app<br></code></pre></td></tr></table></figure>\n<p>回到终端窗口按回车，输入系统密码回车即可正常使用</p>\n<h3 id=\"设置PicGo\"><a href=\"#设置PicGo\" class=\"headerlink\" title=\"设置PicGo\"></a>设置PicGo</h3><p> 下载完成之后，进入界面，选择图床设置-&gt;Github<br> <img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png\" alt=\"图床设置\"></p>\n<p> 设定仓库按照上图所示填写：<strong>用户名/仓库名</strong><br> 分支名填main或者master都可以<br> token：从Github上获取</p>\n<p> <em><strong>这里如何获取token？</strong></em></p>\n<ol>\n<li>点击用户头像，点击下拉列表的Settings-设置选项<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png\" alt=\"xx\"> </li>\n<li>点击左边列表的Developer settings<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png\"></li>\n<li>点击Personal access tokens-&gt;Tokens(classic)<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png\"></li>\n<li>点击Generate new token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png\"></li>\n<li>输入Note，Select scopes选择repo即可,点击Generate token,即可生成token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png\"></li>\n<li>将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床</li>\n</ol>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><strong>Github仓库截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png\" alt=\"Github仓库截图\"></p>\n<p><strong>markdown截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png\"></p>\n<p><em><strong>这样子，一个使用方便的图床就搭建好了！</strong></em></p>\n<h2 id=\"别的方式\"><a href=\"#别的方式\" class=\"headerlink\" title=\"别的方式\"></a>别的方式</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"三分钟搭建PicGo图床\"><a href=\"#三分钟搭建PicGo图床\" class=\"headerlink\" title=\"三分钟搭建PicGo图床\"></a>三分钟搭建PicGo图床</h1><p>参考链接：<a href=\"https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click\">跳转至Bilibili</a></p>\n<p>原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。</p>\n<p>当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）<strong>（已修改，详情见细下文）</strong></p>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><p> <em><strong>建议科学上网，否则网速真的很慢</strong></em></p>\n<ol>\n<li>登录Github账号，点击右上角的+号<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png\" alt=\"截图\"></li>\n<li>在加号的下拉列表中，选择<strong>New repository</strong>–创建新仓库<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png\" alt=\"创建新仓库\"></li>\n<li>进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png\" alt=\"配置新仓库\"></li>\n</ol>\n<p><em><strong>做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行</strong></em></p>\n<h2 id=\"PicGo\"><a href=\"#PicGo\" class=\"headerlink\" title=\"PicGo\"></a>PicGo</h2><p> <em><strong>还是建议科学上网，下载速度会快很多</strong></em></p>\n<p> 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：<a href=\"https://github.com/Molunerfinn/PicGo/releases\">官方下载链接 </a></p>\n<h3 id=\"下载时碰到的问题和解决办法\"><a href=\"#下载时碰到的问题和解决办法\" class=\"headerlink\" title=\"下载时碰到的问题和解决办法\"></a>下载时碰到的问题和解决办法</h3><p>在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。<br>报错信息：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">PicGo已损坏，无法打开。 您应该将它移到废纸篓。<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决办法：</strong><br>在终端输入命令（注意最后有一个空格）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine <br></code></pre></td></tr></table></figure>\n<p><em><strong>先不要按回车！(重要的事情说三遍)</strong></em><br>打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app<br></code></pre></td></tr></table></figure>\n<p>回到终端窗口按回车，输入系统密码回车即可正常使用</p>\n<h3 id=\"设置PicGo\"><a href=\"#设置PicGo\" class=\"headerlink\" title=\"设置PicGo\"></a>设置PicGo</h3><p> 下载完成之后，进入界面，选择图床设置-&gt;Github<br> <img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png\" alt=\"图床设置\"></p>\n<p> 设定仓库按照上图所示填写：<strong>用户名/仓库名</strong><br> 分支名填main或者master都可以<br> token：从Github上获取</p>\n<p> <em><strong>这里如何获取token？</strong></em></p>\n<ol>\n<li>点击用户头像，点击下拉列表的Settings-设置选项<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png\" alt=\"xx\"> </li>\n<li>点击左边列表的Developer settings<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png\"></li>\n<li>点击Personal access tokens-&gt;Tokens(classic)<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png\"></li>\n<li>点击Generate new token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png\"></li>\n<li>输入Note，Select scopes选择repo即可,点击Generate token,即可生成token<br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png\"></li>\n<li>将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床</li>\n</ol>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><strong>Github仓库截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png\" alt=\"Github仓库截图\"></p>\n<p><strong>markdown截图：</strong><br><img src=\"https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png\"></p>\n<p><em><strong>这样子，一个使用方便的图床就搭建好了！</strong></em></p>\n<h2 id=\"别的方式\"><a href=\"#别的方式\" class=\"headerlink\" title=\"别的方式\"></a>别的方式</h2>"},{"title":"SpringBoot","date":"2023-11-24T03:26:56.000Z","_content":"","source":"_posts/SpringBoot.md","raw":"---\ntitle: SpringBoot\ndate: 2023-11-24 11:26:56\ntags:\ncategories: 后端\n---\n","slug":"SpringBoot","published":1,"updated":"2024-01-04T12:47:42.490Z","_id":"clqz6m15e000evpt0h8bb4hz3","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Redis","date":"2023-11-24T03:27:31.000Z","_content":"","source":"_posts/Redis.md","raw":"---\ntitle: Redis\ndate: 2023-11-24 11:27:31\ntags:\ncategories: 后端\n---\n","slug":"Redis","published":1,"updated":"2024-01-04T12:47:42.490Z","_id":"clqz6m15f000hvpt0c5d76mjl","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"canvas","date":"2023-11-26T13:19:02.000Z","_content":"\n# Canvas\n\n## 什么是Canvas？\nHTML5 元素用于图形的绘制，通过**脚本** (通常是JavaScript)来完成.\n\n**适配问题**\n基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如**Internet Explorer 8 及更早 IE 版本的浏览器**，这些浏览器是不支持canvas元素的。\n\n\n## 创建一个画布\n画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。\n\n通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置**width**和**height**属性，定义画布的大小；使用style属性设置边框；\n\n示例代码如下：\n```HTML\n<p>test_demo_1</p>\n<canvas id=\"canvas1\" width=\"200\" height=\"100\" style=\"border: 1px solid #000000;\">\n    \n</canvas>\n```\n\n## canvas绘图\n### canvas - 坐标\ncanvas是一个二维网格，画布的左上角坐标为(0,0)。\n\n想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。\n\nJavaScript怎么使用canvas进行绘图()？\n- 找到canvas元素\n```JavaScript\n    var c = document.getElementById(\"canvas1\")\n```\n\n- 创建context对象\n```JavaScript\n    var ctx = c.getContext(\"2d\")\n```\n- 根据自己的需求，对context对象进行操作\n\n这里使用绘制一个矩形作为参考\n```JavaScript\n    ctx.fillStyle=\"ff0000\"\n    ctx.fillRect(0,0,150,75)\n```\n\n**fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)**\n\n**fillRect(x,y,width,height) 方法定义了矩形当前的填充方式**\n\n\n### canvas - 路径\n画线的两种方法：\n- moveTo(x,y)  定义线条开始坐标\n- lineTo(x,y)  定义线条结束坐标\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n画圆的方法：\n- arc(x,y,r,start,stop)\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n### canvas - 文本\n重要属性和方法：\n- font - 定义字体\n- fillText(text,x,y) - 在 canvas 上绘制实心的文本\n- strokeText(text,x,y) - 在 canvas 上绘制空心的文本\n### canvas - 渐变\n设置渐变的两种方法：\n- createLinearGradient(x,y,x1,y1) - 创建线条渐变\n- createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变\n\n**createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：**\n- x 表示渐变的开始圆的 x 坐标\n- y 表示渐变的开始圆的 y 坐标\n- r 表示开始圆的半径\n- x1 表示渐变的结束圆的 x 坐标\n- y1 表示渐变的结束圆的 y 坐标\n- r1 表示结束圆的半径\n\n使用渐变对象时，必须使用两种或两种以上的渐变颜色\n**addColorStop()** 方法指定颜色停止，参数使用坐标来描述，可以是0至1\n### canvas - 图像\n把一幅图像放置到画布上, 使用以下方法:\n- drawImage(image,x,y)\n\n实例代码：\n```JavaScript\n        //在画布上画线\n        var c =document.getElementById(\"canvas1\")\n        var ctx = c.getContext(\"2d\")\n        ctx.fillStyle=\"#FF0000\"\n        ctx.fillRect(0,0,200,100)\n        ctx.moveTo(0,0)\n        ctx.lineTo(200,100)\n        ctx.stroke()\n\n        //在画布上画圆\n        var c =document.getElementById(\"canvas2\")\n        var ctx_2 = c.getContext(\"2d\")\n        ctx_2.fillStyle=\"#FF0000\"\n        ctx_2.fillRect(0,0,200,100)\n        ctx_2.beginPath()\n        ctx_2.arc(95,50,40,0,2*Math.PI)\n        ctx_2.stroke()\n\n        //在画布上写字\n        var c =document.getElementById(\"canvas3\")\n        var ctx_3 = c.getContext(\"2d\")\n        ctx_3.font=\"30px Arial\";\n        ctx_3.fillText(\"Hello World\",10,50)\n\n        //在画布上实现渐变效果\n        var c =document.getElementById(\"canvas4\")\n        var ctx_4 = c.getContext(\"2d\")\n        \n        //创造gradient\n        //实现线性渐变\n        var grd = ctx_4.createLinearGradient(0,0,200,0)\n        //实现圆形渐变\n        //var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)\n        grd.addColorStop(0,\"red\")\n        grd.addColorStop(1,\"white\")\n\n        //将grd对象当成fillStyle覆盖整个画板\n        ctx_4.fillStyle = grd\n        ctx_4.fillRect(10,10,150,80)\n\n\n```\n\n\n[canvas参考手册](https://www.w3cschool.cn/htmltags/ref-canvas.html)","source":"_posts/canvas.md","raw":"---\ntitle: canvas\ndate: 2023-11-26 21:19:02\ntags:\ncategories: 前端\n---\n\n# Canvas\n\n## 什么是Canvas？\nHTML5 元素用于图形的绘制，通过**脚本** (通常是JavaScript)来完成.\n\n**适配问题**\n基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如**Internet Explorer 8 及更早 IE 版本的浏览器**，这些浏览器是不支持canvas元素的。\n\n\n## 创建一个画布\n画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。\n\n通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置**width**和**height**属性，定义画布的大小；使用style属性设置边框；\n\n示例代码如下：\n```HTML\n<p>test_demo_1</p>\n<canvas id=\"canvas1\" width=\"200\" height=\"100\" style=\"border: 1px solid #000000;\">\n    \n</canvas>\n```\n\n## canvas绘图\n### canvas - 坐标\ncanvas是一个二维网格，画布的左上角坐标为(0,0)。\n\n想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。\n\nJavaScript怎么使用canvas进行绘图()？\n- 找到canvas元素\n```JavaScript\n    var c = document.getElementById(\"canvas1\")\n```\n\n- 创建context对象\n```JavaScript\n    var ctx = c.getContext(\"2d\")\n```\n- 根据自己的需求，对context对象进行操作\n\n这里使用绘制一个矩形作为参考\n```JavaScript\n    ctx.fillStyle=\"ff0000\"\n    ctx.fillRect(0,0,150,75)\n```\n\n**fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)**\n\n**fillRect(x,y,width,height) 方法定义了矩形当前的填充方式**\n\n\n### canvas - 路径\n画线的两种方法：\n- moveTo(x,y)  定义线条开始坐标\n- lineTo(x,y)  定义线条结束坐标\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n画圆的方法：\n- arc(x,y,r,start,stop)\n\n设置完开始坐标和结束坐标后，需要加上**stroke()**\n\n### canvas - 文本\n重要属性和方法：\n- font - 定义字体\n- fillText(text,x,y) - 在 canvas 上绘制实心的文本\n- strokeText(text,x,y) - 在 canvas 上绘制空心的文本\n### canvas - 渐变\n设置渐变的两种方法：\n- createLinearGradient(x,y,x1,y1) - 创建线条渐变\n- createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变\n\n**createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：**\n- x 表示渐变的开始圆的 x 坐标\n- y 表示渐变的开始圆的 y 坐标\n- r 表示开始圆的半径\n- x1 表示渐变的结束圆的 x 坐标\n- y1 表示渐变的结束圆的 y 坐标\n- r1 表示结束圆的半径\n\n使用渐变对象时，必须使用两种或两种以上的渐变颜色\n**addColorStop()** 方法指定颜色停止，参数使用坐标来描述，可以是0至1\n### canvas - 图像\n把一幅图像放置到画布上, 使用以下方法:\n- drawImage(image,x,y)\n\n实例代码：\n```JavaScript\n        //在画布上画线\n        var c =document.getElementById(\"canvas1\")\n        var ctx = c.getContext(\"2d\")\n        ctx.fillStyle=\"#FF0000\"\n        ctx.fillRect(0,0,200,100)\n        ctx.moveTo(0,0)\n        ctx.lineTo(200,100)\n        ctx.stroke()\n\n        //在画布上画圆\n        var c =document.getElementById(\"canvas2\")\n        var ctx_2 = c.getContext(\"2d\")\n        ctx_2.fillStyle=\"#FF0000\"\n        ctx_2.fillRect(0,0,200,100)\n        ctx_2.beginPath()\n        ctx_2.arc(95,50,40,0,2*Math.PI)\n        ctx_2.stroke()\n\n        //在画布上写字\n        var c =document.getElementById(\"canvas3\")\n        var ctx_3 = c.getContext(\"2d\")\n        ctx_3.font=\"30px Arial\";\n        ctx_3.fillText(\"Hello World\",10,50)\n\n        //在画布上实现渐变效果\n        var c =document.getElementById(\"canvas4\")\n        var ctx_4 = c.getContext(\"2d\")\n        \n        //创造gradient\n        //实现线性渐变\n        var grd = ctx_4.createLinearGradient(0,0,200,0)\n        //实现圆形渐变\n        //var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)\n        grd.addColorStop(0,\"red\")\n        grd.addColorStop(1,\"white\")\n\n        //将grd对象当成fillStyle覆盖整个画板\n        ctx_4.fillStyle = grd\n        ctx_4.fillRect(10,10,150,80)\n\n\n```\n\n\n[canvas参考手册](https://www.w3cschool.cn/htmltags/ref-canvas.html)","slug":"canvas","published":1,"updated":"2024-01-04T12:47:42.491Z","_id":"clqz6m15f000ivpt0g0hd3faw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h1><h2 id=\"什么是Canvas？\"><a href=\"#什么是Canvas？\" class=\"headerlink\" title=\"什么是Canvas？\"></a>什么是Canvas？</h2><p>HTML5 元素用于图形的绘制，通过<strong>脚本</strong> (通常是JavaScript)来完成.</p>\n<p><strong>适配问题</strong><br>基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如<strong>Internet Explorer 8 及更早 IE 版本的浏览器</strong>，这些浏览器是不支持canvas元素的。</p>\n<h2 id=\"创建一个画布\"><a href=\"#创建一个画布\" class=\"headerlink\" title=\"创建一个画布\"></a>创建一个画布</h2><p>画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。</p>\n<p>通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置<strong>width</strong>和<strong>height</strong>属性，定义画布的大小；使用style属性设置边框；</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>test_demo_1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas1&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;200&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;border: 1px solid #000000;&quot;</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"canvas绘图\"><a href=\"#canvas绘图\" class=\"headerlink\" title=\"canvas绘图\"></a>canvas绘图</h2><h3 id=\"canvas-坐标\"><a href=\"#canvas-坐标\" class=\"headerlink\" title=\"canvas - 坐标\"></a>canvas - 坐标</h3><p>canvas是一个二维网格，画布的左上角坐标为(0,0)。</p>\n<p>想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。</p>\n<p>JavaScript怎么使用canvas进行绘图()？</p>\n<ul>\n<li><p>找到canvas元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>创建context对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>根据自己的需求，对context对象进行操作</p>\n</li>\n</ul>\n<p>这里使用绘制一个矩形作为参考</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\">ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;ff0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">75</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)</strong></p>\n<p><strong>fillRect(x,y,width,height) 方法定义了矩形当前的填充方式</strong></p>\n<h3 id=\"canvas-路径\"><a href=\"#canvas-路径\" class=\"headerlink\" title=\"canvas - 路径\"></a>canvas - 路径</h3><p>画线的两种方法：</p>\n<ul>\n<li>moveTo(x,y)  定义线条开始坐标</li>\n<li>lineTo(x,y)  定义线条结束坐标</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<p>画圆的方法：</p>\n<ul>\n<li>arc(x,y,r,start,stop)</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<h3 id=\"canvas-文本\"><a href=\"#canvas-文本\" class=\"headerlink\" title=\"canvas - 文本\"></a>canvas - 文本</h3><p>重要属性和方法：</p>\n<ul>\n<li>font - 定义字体</li>\n<li>fillText(text,x,y) - 在 canvas 上绘制实心的文本</li>\n<li>strokeText(text,x,y) - 在 canvas 上绘制空心的文本<h3 id=\"canvas-渐变\"><a href=\"#canvas-渐变\" class=\"headerlink\" title=\"canvas - 渐变\"></a>canvas - 渐变</h3>设置渐变的两种方法：</li>\n<li>createLinearGradient(x,y,x1,y1) - 创建线条渐变</li>\n<li>createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变</li>\n</ul>\n<p><strong>createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：</strong></p>\n<ul>\n<li>x 表示渐变的开始圆的 x 坐标</li>\n<li>y 表示渐变的开始圆的 y 坐标</li>\n<li>r 表示开始圆的半径</li>\n<li>x1 表示渐变的结束圆的 x 坐标</li>\n<li>y1 表示渐变的结束圆的 y 坐标</li>\n<li>r1 表示结束圆的半径</li>\n</ul>\n<p>使用渐变对象时，必须使用两种或两种以上的渐变颜色<br><strong>addColorStop()</strong> 方法指定颜色停止，参数使用坐标来描述，可以是0至1</p>\n<h3 id=\"canvas-图像\"><a href=\"#canvas-图像\" class=\"headerlink\" title=\"canvas - 图像\"></a>canvas - 图像</h3><p>把一幅图像放置到画布上, 使用以下方法:</p>\n<ul>\n<li>drawImage(image,x,y)</li>\n</ul>\n<p>实例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//在画布上画线</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">moveTo</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)<br>ctx.<span class=\"hljs-title function_\">lineTo</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上画圆</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas2&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_2 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_2.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx_2.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx_2.<span class=\"hljs-title function_\">beginPath</span>()<br>ctx_2.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-number\">95</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>*<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>)<br>ctx_2.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上写字</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas3&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_3 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_3.<span class=\"hljs-property\">font</span>=<span class=\"hljs-string\">&quot;30px Arial&quot;</span>;<br>ctx_3.<span class=\"hljs-title function_\">fillText</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">50</span>)<br><br><span class=\"hljs-comment\">//在画布上实现渐变效果</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas4&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_4 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br><br><span class=\"hljs-comment\">//创造gradient</span><br><span class=\"hljs-comment\">//实现线性渐变</span><br><span class=\"hljs-keyword\">var</span> grd = ctx_4.<span class=\"hljs-title function_\">createLinearGradient</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-comment\">//实现圆形渐变</span><br><span class=\"hljs-comment\">//var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)</span><br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;red&quot;</span>)<br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;white&quot;</span>)<br><br><span class=\"hljs-comment\">//将grd对象当成fillStyle覆盖整个画板</span><br>ctx_4.<span class=\"hljs-property\">fillStyle</span> = grd<br>ctx_4.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">80</span>)<br><br><br></code></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://www.w3cschool.cn/htmltags/ref-canvas.html\">canvas参考手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h1><h2 id=\"什么是Canvas？\"><a href=\"#什么是Canvas？\" class=\"headerlink\" title=\"什么是Canvas？\"></a>什么是Canvas？</h2><p>HTML5 元素用于图形的绘制，通过<strong>脚本</strong> (通常是JavaScript)来完成.</p>\n<p><strong>适配问题</strong><br>基本上大多数的浏览器都支持canvas元素，除了一些很老旧的版本，比如<strong>Internet Explorer 8 及更早 IE 版本的浏览器</strong>，这些浏览器是不支持canvas元素的。</p>\n<h2 id=\"创建一个画布\"><a href=\"#创建一个画布\" class=\"headerlink\" title=\"创建一个画布\"></a>创建一个画布</h2><p>画布在网页上是一个矩形，默认条件下，画布是没有边框和内容的。因此，在设置canvas元素时，需要提前给canvas元素设置边框。</p>\n<p>通过JavaScript设置canvas标签时，canvas标签一般都需要带一个id属性（方便引用）;通过设置<strong>width</strong>和<strong>height</strong>属性，定义画布的大小；使用style属性设置边框；</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>test_demo_1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas1&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;200&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;border: 1px solid #000000;&quot;</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"canvas绘图\"><a href=\"#canvas绘图\" class=\"headerlink\" title=\"canvas绘图\"></a>canvas绘图</h2><h3 id=\"canvas-坐标\"><a href=\"#canvas-坐标\" class=\"headerlink\" title=\"canvas - 坐标\"></a>canvas - 坐标</h3><p>canvas是一个二维网格，画布的左上角坐标为(0,0)。</p>\n<p>想要使用canvas绘图，必须要使用JavaScript，canvas本身是没有绘图功能的。</p>\n<p>JavaScript怎么使用canvas进行绘图()？</p>\n<ul>\n<li><p>找到canvas元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>创建context对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>根据自己的需求，对context对象进行操作</p>\n</li>\n</ul>\n<p>这里使用绘制一个矩形作为参考</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\">ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;ff0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">75</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>fillStyle属性可以是CSS颜色，渐变或图案。fillStyle的默认值是#000000(黑色)</strong></p>\n<p><strong>fillRect(x,y,width,height) 方法定义了矩形当前的填充方式</strong></p>\n<h3 id=\"canvas-路径\"><a href=\"#canvas-路径\" class=\"headerlink\" title=\"canvas - 路径\"></a>canvas - 路径</h3><p>画线的两种方法：</p>\n<ul>\n<li>moveTo(x,y)  定义线条开始坐标</li>\n<li>lineTo(x,y)  定义线条结束坐标</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<p>画圆的方法：</p>\n<ul>\n<li>arc(x,y,r,start,stop)</li>\n</ul>\n<p>设置完开始坐标和结束坐标后，需要加上<strong>stroke()</strong></p>\n<h3 id=\"canvas-文本\"><a href=\"#canvas-文本\" class=\"headerlink\" title=\"canvas - 文本\"></a>canvas - 文本</h3><p>重要属性和方法：</p>\n<ul>\n<li>font - 定义字体</li>\n<li>fillText(text,x,y) - 在 canvas 上绘制实心的文本</li>\n<li>strokeText(text,x,y) - 在 canvas 上绘制空心的文本<h3 id=\"canvas-渐变\"><a href=\"#canvas-渐变\" class=\"headerlink\" title=\"canvas - 渐变\"></a>canvas - 渐变</h3>设置渐变的两种方法：</li>\n<li>createLinearGradient(x,y,x1,y1) - 创建线条渐变</li>\n<li>createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变</li>\n</ul>\n<p><strong>createRadialGradient(x,y,r,x1,y1,r1)各个参数的含义：</strong></p>\n<ul>\n<li>x 表示渐变的开始圆的 x 坐标</li>\n<li>y 表示渐变的开始圆的 y 坐标</li>\n<li>r 表示开始圆的半径</li>\n<li>x1 表示渐变的结束圆的 x 坐标</li>\n<li>y1 表示渐变的结束圆的 y 坐标</li>\n<li>r1 表示结束圆的半径</li>\n</ul>\n<p>使用渐变对象时，必须使用两种或两种以上的渐变颜色<br><strong>addColorStop()</strong> 方法指定颜色停止，参数使用坐标来描述，可以是0至1</p>\n<h3 id=\"canvas-图像\"><a href=\"#canvas-图像\" class=\"headerlink\" title=\"canvas - 图像\"></a>canvas - 图像</h3><p>把一幅图像放置到画布上, 使用以下方法:</p>\n<ul>\n<li>drawImage(image,x,y)</li>\n</ul>\n<p>实例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\"><span class=\"hljs-comment\">//在画布上画线</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas1&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">moveTo</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)<br>ctx.<span class=\"hljs-title function_\">lineTo</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上画圆</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas2&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_2 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_2.<span class=\"hljs-property\">fillStyle</span>=<span class=\"hljs-string\">&quot;#FF0000&quot;</span><br>ctx_2.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>)<br>ctx_2.<span class=\"hljs-title function_\">beginPath</span>()<br>ctx_2.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-number\">95</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>*<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>)<br>ctx_2.<span class=\"hljs-title function_\">stroke</span>()<br><br><span class=\"hljs-comment\">//在画布上写字</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas3&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_3 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br>ctx_3.<span class=\"hljs-property\">font</span>=<span class=\"hljs-string\">&quot;30px Arial&quot;</span>;<br>ctx_3.<span class=\"hljs-title function_\">fillText</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">50</span>)<br><br><span class=\"hljs-comment\">//在画布上实现渐变效果</span><br><span class=\"hljs-keyword\">var</span> c =<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;canvas4&quot;</span>)<br><span class=\"hljs-keyword\">var</span> ctx_4 = c.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&quot;2d&quot;</span>)<br><br><span class=\"hljs-comment\">//创造gradient</span><br><span class=\"hljs-comment\">//实现线性渐变</span><br><span class=\"hljs-keyword\">var</span> grd = ctx_4.<span class=\"hljs-title function_\">createLinearGradient</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-comment\">//实现圆形渐变</span><br><span class=\"hljs-comment\">//var grd = ctx_4.createRadialGradient(75,50,5,90,60,100)</span><br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;red&quot;</span>)<br>grd.<span class=\"hljs-title function_\">addColorStop</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;white&quot;</span>)<br><br><span class=\"hljs-comment\">//将grd对象当成fillStyle覆盖整个画板</span><br>ctx_4.<span class=\"hljs-property\">fillStyle</span> = grd<br>ctx_4.<span class=\"hljs-title function_\">fillRect</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">80</span>)<br><br><br></code></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://www.w3cschool.cn/htmltags/ref-canvas.html\">canvas参考手册</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-01-04T12:47:42.491Z","updated":"2024-01-04T12:47:42.491Z","_id":"clqz6m15g000lvpt06ezuctg5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"git","date":"2023-04-08T15:21:45.000Z","_content":"\n# git\n\n## git的安装\n### Windows\n有一个我觉得非常详细的教程，就贴在这里：\n[git安装详细教程（CSDN）](https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142^v82^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&spm=1018.2226.3001.4187)\n按照上面的教程一步一步来安装，基本上是没有问题的。\n\n### Mac\n暂时先晾在这，后面再整理\nq q\n## Git的工作流程\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n\n## Git基本操作\nGit的作用是什么？**Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。**\n\n常用的命令有以下六个命令：\n- git clone\n- git push\n- git add\n- git commit\n- git checkout\n- git pull\n\n## Git创建仓库\n初始化一个仓库的命令：\n- 如果使用当前目录作为Git仓库，使用以下命令：\n```shell\n    git init\n```\n- 如果使用指定目录作为git仓库，使用以下命令：\n```shell\n    git init newrepo\n\n    newrepo是指定目录的路径\n```\n初始化后，会在newrepo下生成 **.git**的目录，**这个目录存放着所有Git需要的数据和资源**。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。\n\n*****\n\n创建仓库可以在空目录下，也可以在非空目录下。**非空目录**下，使用**git add**命令将仓库下的所有文件放入Git中，进行提交即可；**空目录**下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。\n\n克隆仓库的命令：\n```\n    git clone <repo>\n\n    <repo> 是仓库的http地址\n```\n上面这条克隆命令，是将 **repo**地址下的仓库克隆到了当前目录。\n\n将仓库克隆到指定目录下的命令：\n```\n    git clone <repo> <directory>\n\n    <repo>是仓库的http地址\n    <directory>是本地目录\n```\n\n执行了克隆命令后，会在当前目录下创建一个**以克隆的仓库名为文件名的新目录**，新目录下包含一个 **.git**文件，这里的 **.git**文件用于保存下载下来的所有版本记录。\n\n\n如果想要自己定义新目录的名称，可以输入以下命令：\n```\n     git clone <repo> 自定义名\n```\n\n*****\n\n做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。\n\ngit的配置的命令：\n```shell\n    git config\n```\n\n**编辑git的配置文件**\n**只针对当前仓库**\n```shell\n    git config -e  \n```\n\n**针对本地上的所有仓库**\n```shell\n    git config -e -global\n```\n\n**设置提交代码时的用户信息：**\n```shell\n    git config -global user.name \"username\"\n    git config -global user.email user@useremail.com \n    # 注意这里的-global去掉的话，命令只会对当前仓库有效\n```\n\n## Git分支管理\n有一张图可以说明Git分支管理的模式\n![git分支管理](https://static.runoob.com/images/svg/git-brance.svg)\n\n使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。\n\n**创建分支的命令**\n```shell\n    git branch (branchname)\n```\n\n**切换分支的命令**\n```shell\n    git checkout (branchname)\n```\n这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：\n```\n    git checkout -b (branchname)\n```\n*****\n这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录\n\n**合并分支的命令：**\n```shell\n    git merge\n```\n\n**删除分支的命令：**\n```shell\n    git checkout -d (branchname)\n```\n\n## Git查看提交历史\n**常用的一般有两个命令：**\n- git log ---查看历史提交记录 \n- git blame < blame> ---以列表形式查看指定文件的历史修改记录\n\n**git log**\n**查看历史记录的简洁的版本**\n```shell\n    git log -oneline\n```\n\n**查看历史中什么时候出现了分支、合并**\n```shell\n     git log -graph -oneline\n```\n\n**逆向显示所有日志**\n```shell\n    git log -reverse -oneline\n```\n\n**查找指定用户的提交日志**\n```shell\n    git log -author=name -oneline\n```\n\n**指定日期，可以执行几个选项：--since 和 --before，也可以用 --until 和 --after**\n\n```shell\n    git log -oneline -before={2.weeks.ago} -after={2021-04-09} \n```\n\n**还有很多git log命令，可以进入这个网站进行查询：**[Git log命令](https://git-scm.com/docs/git-log)\n\n*****\n\n**git blame**\n作用是：**查看指定文件的修改记录**\n\n\n## Git标签\n创建一个带注解的标签\n```shell\n    git tag -a v1.1\n```\n\n查看所有标签\n```shell\n    git tag\n```\n\n指定标签信息命令：\n```shell\n    git tag -a <tagname> -m \"标签内容\"\n```\n\nPGP签名标签命令：\n```shell\n    git tag -s <tagname> -m \"标签内容\"\n```\n\n## Git 和 Github\n\n上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。\n![Github](https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg)\n\n**这里将Github作为远程仓库，记录用Git连接Github的过程**\n\n***未完待续***\n\n","source":"_posts/git.md","raw":"---\ntitle: git\ndate: 2023-04-08 23:21:45\ntags:\ncategories: 编程语言及工具\n---\n\n# git\n\n## git的安装\n### Windows\n有一个我觉得非常详细的教程，就贴在这里：\n[git安装详细教程（CSDN）](https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142^v82^insert_down38,201^v4^add_ask,239^v2^insert_chatgpt&spm=1018.2226.3001.4187)\n按照上面的教程一步一步来安装，基本上是没有问题的。\n\n### Mac\n暂时先晾在这，后面再整理\nq q\n## Git的工作流程\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n\n## Git基本操作\nGit的作用是什么？**Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。**\n\n常用的命令有以下六个命令：\n- git clone\n- git push\n- git add\n- git commit\n- git checkout\n- git pull\n\n## Git创建仓库\n初始化一个仓库的命令：\n- 如果使用当前目录作为Git仓库，使用以下命令：\n```shell\n    git init\n```\n- 如果使用指定目录作为git仓库，使用以下命令：\n```shell\n    git init newrepo\n\n    newrepo是指定目录的路径\n```\n初始化后，会在newrepo下生成 **.git**的目录，**这个目录存放着所有Git需要的数据和资源**。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。\n\n*****\n\n创建仓库可以在空目录下，也可以在非空目录下。**非空目录**下，使用**git add**命令将仓库下的所有文件放入Git中，进行提交即可；**空目录**下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。\n\n克隆仓库的命令：\n```\n    git clone <repo>\n\n    <repo> 是仓库的http地址\n```\n上面这条克隆命令，是将 **repo**地址下的仓库克隆到了当前目录。\n\n将仓库克隆到指定目录下的命令：\n```\n    git clone <repo> <directory>\n\n    <repo>是仓库的http地址\n    <directory>是本地目录\n```\n\n执行了克隆命令后，会在当前目录下创建一个**以克隆的仓库名为文件名的新目录**，新目录下包含一个 **.git**文件，这里的 **.git**文件用于保存下载下来的所有版本记录。\n\n\n如果想要自己定义新目录的名称，可以输入以下命令：\n```\n     git clone <repo> 自定义名\n```\n\n*****\n\n做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。\n\ngit的配置的命令：\n```shell\n    git config\n```\n\n**编辑git的配置文件**\n**只针对当前仓库**\n```shell\n    git config -e  \n```\n\n**针对本地上的所有仓库**\n```shell\n    git config -e -global\n```\n\n**设置提交代码时的用户信息：**\n```shell\n    git config -global user.name \"username\"\n    git config -global user.email user@useremail.com \n    # 注意这里的-global去掉的话，命令只会对当前仓库有效\n```\n\n## Git分支管理\n有一张图可以说明Git分支管理的模式\n![git分支管理](https://static.runoob.com/images/svg/git-brance.svg)\n\n使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。\n\n**创建分支的命令**\n```shell\n    git branch (branchname)\n```\n\n**切换分支的命令**\n```shell\n    git checkout (branchname)\n```\n这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：\n```\n    git checkout -b (branchname)\n```\n*****\n这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录\n\n**合并分支的命令：**\n```shell\n    git merge\n```\n\n**删除分支的命令：**\n```shell\n    git checkout -d (branchname)\n```\n\n## Git查看提交历史\n**常用的一般有两个命令：**\n- git log ---查看历史提交记录 \n- git blame < blame> ---以列表形式查看指定文件的历史修改记录\n\n**git log**\n**查看历史记录的简洁的版本**\n```shell\n    git log -oneline\n```\n\n**查看历史中什么时候出现了分支、合并**\n```shell\n     git log -graph -oneline\n```\n\n**逆向显示所有日志**\n```shell\n    git log -reverse -oneline\n```\n\n**查找指定用户的提交日志**\n```shell\n    git log -author=name -oneline\n```\n\n**指定日期，可以执行几个选项：--since 和 --before，也可以用 --until 和 --after**\n\n```shell\n    git log -oneline -before={2.weeks.ago} -after={2021-04-09} \n```\n\n**还有很多git log命令，可以进入这个网站进行查询：**[Git log命令](https://git-scm.com/docs/git-log)\n\n*****\n\n**git blame**\n作用是：**查看指定文件的修改记录**\n\n\n## Git标签\n创建一个带注解的标签\n```shell\n    git tag -a v1.1\n```\n\n查看所有标签\n```shell\n    git tag\n```\n\n指定标签信息命令：\n```shell\n    git tag -a <tagname> -m \"标签内容\"\n```\n\nPGP签名标签命令：\n```shell\n    git tag -s <tagname> -m \"标签内容\"\n```\n\n## Git 和 Github\n\n上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。\n![Github](https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg)\n\n**这里将Github作为远程仓库，记录用Git连接Github的过程**\n\n***未完待续***\n\n","slug":"git","published":1,"updated":"2024-01-01T07:11:16.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqz6m15g000nvpt01xb7h309","content":"<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h2 id=\"git的安装\"><a href=\"#git的安装\" class=\"headerlink\" title=\"git的安装\"></a>git的安装</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>有一个我觉得非常详细的教程，就贴在这里：<br><a href=\"https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142%5Ev82%5Einsert_down38,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187\">git安装详细教程（CSDN）</a><br>按照上面的教程一步一步来安装，基本上是没有问题的。</p>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><p>暂时先晾在这，后面再整理<br>q q</p>\n<h2 id=\"Git的工作流程\"><a href=\"#Git的工作流程\" class=\"headerlink\" title=\"Git的工作流程\"></a>Git的工作流程</h2><ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><p>Git的作用是什么？<strong>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</strong></p>\n<p>常用的命令有以下六个命令：</p>\n<ul>\n<li>git clone</li>\n<li>git push</li>\n<li>git add</li>\n<li>git commit</li>\n<li>git checkout</li>\n<li>git pull</li>\n</ul>\n<h2 id=\"Git创建仓库\"><a href=\"#Git创建仓库\" class=\"headerlink\" title=\"Git创建仓库\"></a>Git创建仓库</h2><p>初始化一个仓库的命令：</p>\n<ul>\n<li>如果使用当前目录作为Git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init<br></code></pre></td></tr></table></figure></li>\n<li>如果使用指定目录作为git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init newrepo<br><br>newrepo是指定目录的路径<br></code></pre></td></tr></table></figure>\n初始化后，会在newrepo下生成 <strong>.git</strong>的目录，<strong>这个目录存放着所有Git需要的数据和资源</strong>。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。</li>\n</ul>\n<hr>\n<p>创建仓库可以在空目录下，也可以在非空目录下。<strong>非空目录</strong>下，使用<strong>git add</strong>命令将仓库下的所有文件放入Git中，进行提交即可；<strong>空目录</strong>下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。</p>\n<p>克隆仓库的命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br><br><span class=\"hljs-tag\">&lt;repo&gt;</span> 是仓库的http地址<br></code></pre></td></tr></table></figure>\n<p>上面这条克隆命令，是将 <strong>repo</strong>地址下的仓库克隆到了当前目录。</p>\n<p>将仓库克隆到指定目录下的命令：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git clone <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span>是仓库的http地址<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>是本地目录<br></code></pre></td></tr></table></figure>\n\n<p>执行了克隆命令后，会在当前目录下创建一个<strong>以克隆的仓库名为文件名的新目录</strong>，新目录下包含一个 <strong>.git</strong>文件，这里的 <strong>.git</strong>文件用于保存下载下来的所有版本记录。</p>\n<p>如果想要自己定义新目录的名称，可以输入以下命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt; 自定义名<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。</p>\n<p>git的配置的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config<br></code></pre></td></tr></table></figure>\n\n<p><strong>编辑git的配置文件</strong><br><strong>只针对当前仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e  <br></code></pre></td></tr></table></figure>\n\n<p><strong>针对本地上的所有仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e -global<br></code></pre></td></tr></table></figure>\n\n<p><strong>设置提交代码时的用户信息：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -global user.name &quot;username&quot;<br>git config -global user.email user@useremail.com <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意这里的-global去掉的话，命令只会对当前仓库有效</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git分支管理\"><a href=\"#Git分支管理\" class=\"headerlink\" title=\"Git分支管理\"></a>Git分支管理</h2><p>有一张图可以说明Git分支管理的模式<br><img src=\"https://static.runoob.com/images/svg/git-brance.svg\" alt=\"git分支管理\"></p>\n<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>\n<p><strong>创建分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git branch (branchname)<br></code></pre></td></tr></table></figure>\n\n<p><strong>切换分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout (branchname)<br></code></pre></td></tr></table></figure>\n<p>这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> checkout -<span class=\"hljs-keyword\">b</span> (branchname)<br></code></pre></td></tr></table></figure>\n<hr>\n<p>这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录</p>\n<p><strong>合并分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git merge<br></code></pre></td></tr></table></figure>\n\n<p><strong>删除分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout -d (branchname)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git查看提交历史\"><a href=\"#Git查看提交历史\" class=\"headerlink\" title=\"Git查看提交历史\"></a>Git查看提交历史</h2><p><strong>常用的一般有两个命令：</strong></p>\n<ul>\n<li>git log —查看历史提交记录 </li>\n<li>git blame &lt; blame&gt; —以列表形式查看指定文件的历史修改记录</li>\n</ul>\n<p><strong>git log</strong><br><strong>查看历史记录的简洁的版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看历史中什么时候出现了分支、合并</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -graph -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>逆向显示所有日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -reverse -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查找指定用户的提交日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -author=name -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>指定日期，可以执行几个选项：–since 和 –before，也可以用 –until 和 –after</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline -before=&#123;2.weeks.ago&#125; -after=&#123;2021-04-09&#125; <br></code></pre></td></tr></table></figure>\n\n<p><strong>还有很多git log命令，可以进入这个网站进行查询：</strong><a href=\"https://git-scm.com/docs/git-log\">Git log命令</a></p>\n<hr>\n<p><strong>git blame</strong><br>作用是：<strong>查看指定文件的修改记录</strong></p>\n<h2 id=\"Git标签\"><a href=\"#Git标签\" class=\"headerlink\" title=\"Git标签\"></a>Git标签</h2><p>创建一个带注解的标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a v1.1<br></code></pre></td></tr></table></figure>\n\n<p>查看所有标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag<br></code></pre></td></tr></table></figure>\n\n<p>指定标签信息命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<p>PGP签名标签命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -s &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git-和-Github\"><a href=\"#Git-和-Github\" class=\"headerlink\" title=\"Git 和 Github\"></a>Git 和 Github</h2><p>上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。<br><img src=\"https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg\" alt=\"Github\"></p>\n<p><strong>这里将Github作为远程仓库，记录用Git连接Github的过程</strong></p>\n<p><em><strong>未完待续</strong></em></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h2 id=\"git的安装\"><a href=\"#git的安装\" class=\"headerlink\" title=\"git的安装\"></a>git的安装</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>有一个我觉得非常详细的教程，就贴在这里：<br><a href=\"https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142%5Ev82%5Einsert_down38,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187\">git安装详细教程（CSDN）</a><br>按照上面的教程一步一步来安装，基本上是没有问题的。</p>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><p>暂时先晾在这，后面再整理<br>q q</p>\n<h2 id=\"Git的工作流程\"><a href=\"#Git的工作流程\" class=\"headerlink\" title=\"Git的工作流程\"></a>Git的工作流程</h2><ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><p>Git的作用是什么？<strong>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</strong></p>\n<p>常用的命令有以下六个命令：</p>\n<ul>\n<li>git clone</li>\n<li>git push</li>\n<li>git add</li>\n<li>git commit</li>\n<li>git checkout</li>\n<li>git pull</li>\n</ul>\n<h2 id=\"Git创建仓库\"><a href=\"#Git创建仓库\" class=\"headerlink\" title=\"Git创建仓库\"></a>Git创建仓库</h2><p>初始化一个仓库的命令：</p>\n<ul>\n<li>如果使用当前目录作为Git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init<br></code></pre></td></tr></table></figure></li>\n<li>如果使用指定目录作为git仓库，使用以下命令：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git init newrepo<br><br>newrepo是指定目录的路径<br></code></pre></td></tr></table></figure>\n初始化后，会在newrepo下生成 <strong>.git</strong>的目录，<strong>这个目录存放着所有Git需要的数据和资源</strong>。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。</li>\n</ul>\n<hr>\n<p>创建仓库可以在空目录下，也可以在非空目录下。<strong>非空目录</strong>下，使用<strong>git add</strong>命令将仓库下的所有文件放入Git中，进行提交即可；<strong>空目录</strong>下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。</p>\n<p>克隆仓库的命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br><br><span class=\"hljs-tag\">&lt;repo&gt;</span> 是仓库的http地址<br></code></pre></td></tr></table></figure>\n<p>上面这条克隆命令，是将 <strong>repo</strong>地址下的仓库克隆到了当前目录。</p>\n<p>将仓库克隆到指定目录下的命令：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">git clone <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repo</span>&gt;</span>是仓库的http地址<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>是本地目录<br></code></pre></td></tr></table></figure>\n\n<p>执行了克隆命令后，会在当前目录下创建一个<strong>以克隆的仓库名为文件名的新目录</strong>，新目录下包含一个 <strong>.git</strong>文件，这里的 <strong>.git</strong>文件用于保存下载下来的所有版本记录。</p>\n<p>如果想要自己定义新目录的名称，可以输入以下命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt; 自定义名<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。</p>\n<p>git的配置的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config<br></code></pre></td></tr></table></figure>\n\n<p><strong>编辑git的配置文件</strong><br><strong>只针对当前仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e  <br></code></pre></td></tr></table></figure>\n\n<p><strong>针对本地上的所有仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -e -global<br></code></pre></td></tr></table></figure>\n\n<p><strong>设置提交代码时的用户信息：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config -global user.name &quot;username&quot;<br>git config -global user.email user@useremail.com <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注意这里的-global去掉的话，命令只会对当前仓库有效</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git分支管理\"><a href=\"#Git分支管理\" class=\"headerlink\" title=\"Git分支管理\"></a>Git分支管理</h2><p>有一张图可以说明Git分支管理的模式<br><img src=\"https://static.runoob.com/images/svg/git-brance.svg\" alt=\"git分支管理\"></p>\n<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>\n<p><strong>创建分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git branch (branchname)<br></code></pre></td></tr></table></figure>\n\n<p><strong>切换分支的命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout (branchname)<br></code></pre></td></tr></table></figure>\n<p>这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> checkout -<span class=\"hljs-keyword\">b</span> (branchname)<br></code></pre></td></tr></table></figure>\n<hr>\n<p>这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录</p>\n<p><strong>合并分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git merge<br></code></pre></td></tr></table></figure>\n\n<p><strong>删除分支的命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git checkout -d (branchname)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git查看提交历史\"><a href=\"#Git查看提交历史\" class=\"headerlink\" title=\"Git查看提交历史\"></a>Git查看提交历史</h2><p><strong>常用的一般有两个命令：</strong></p>\n<ul>\n<li>git log —查看历史提交记录 </li>\n<li>git blame &lt; blame&gt; —以列表形式查看指定文件的历史修改记录</li>\n</ul>\n<p><strong>git log</strong><br><strong>查看历史记录的简洁的版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看历史中什么时候出现了分支、合并</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -graph -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>逆向显示所有日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -reverse -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>查找指定用户的提交日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -author=name -oneline<br></code></pre></td></tr></table></figure>\n\n<p><strong>指定日期，可以执行几个选项：–since 和 –before，也可以用 –until 和 –after</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git log -oneline -before=&#123;2.weeks.ago&#125; -after=&#123;2021-04-09&#125; <br></code></pre></td></tr></table></figure>\n\n<p><strong>还有很多git log命令，可以进入这个网站进行查询：</strong><a href=\"https://git-scm.com/docs/git-log\">Git log命令</a></p>\n<hr>\n<p><strong>git blame</strong><br>作用是：<strong>查看指定文件的修改记录</strong></p>\n<h2 id=\"Git标签\"><a href=\"#Git标签\" class=\"headerlink\" title=\"Git标签\"></a>Git标签</h2><p>创建一个带注解的标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a v1.1<br></code></pre></td></tr></table></figure>\n\n<p>查看所有标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag<br></code></pre></td></tr></table></figure>\n\n<p>指定标签信息命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -a &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<p>PGP签名标签命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git tag -s &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Git-和-Github\"><a href=\"#Git-和-Github\" class=\"headerlink\" title=\"Git 和 Github\"></a>Git 和 Github</h2><p>上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。<br><img src=\"https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg\" alt=\"Github\"></p>\n<p><strong>这里将Github作为远程仓库，记录用Git连接Github的过程</strong></p>\n<p><em><strong>未完待续</strong></em></p>\n"},{"title":"hexo博客自定义","date":"2023-03-07T10:12:22.000Z","_content":"\n## Next主题\nHexo博客支持很多种主题，这里的话只记录Next主题的配置方法\n### Next主题的安装和配置\n1. 在博客主目录下执行\n```\n    git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n2. 配置_config.yml文件\n```\n    theme:next\n```\n3. Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换\n- **注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml**\n```\n    override：false #表示是否将主题置为默认样式\ncache:\n\tenable:true #表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快\nmenu: #设置博客各个页面的相对路径，默认根路径是blog/source\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar #日历\n  #sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取\n  #commonweal: /404/ || heartbeat # 腾讯公益404\n\n# Enable/Disable menu icons / item badges.\nmenu_settings:\n  icons: true # 是否显示各个页面的图标\n  badges: true # 是否显示分类/标签/归档页的内容量\n# Schemes\nscheme: Gemini\n```\n### Next各种新鲜玩法\n目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法\n1. 在每篇文章末尾统一添加“本文结束”标记\\\n**实现效果图:**\n![](https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png)\n**实现方法：**\n1. 在路径 \\themes\\next\\layout\\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：\n```\n    <div>\n        {% if not is_index %}\n            <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n        {% endif %}\n    </div>\n```\n2. 接着打开路径\\themes\\next\\layout\\_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）\n```\n      {%- if not is_index %}\n        {{ partial('_macro/passage-end-tag.swig') }}\n      {%- endif %}\n```\n3. 打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：\n```\n    # 文章末尾添加“本文结束”标记\n    passage_end_tag:\n        enabled: true\n```\n完成后即可显示对应标记\n\n### 参考链接\n[hexo博客如何写作和更新](https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187)\\\n[hexo博客优化和美化](https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187)\\\n[macOS刷新DNS](https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187)\\\n[hexo攻略添加分类和标签](https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187)\\\n[hexo美化加强版](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n\n## fluid主题\n参考文档---[fluid主题用户手册](https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B)\n**具体配置参考用户手册即可**","source":"_posts/hexo博客自定义.md","raw":"---\ntitle: hexo博客自定义\ndate: 2023-03-07 18:12:22\ntags:\ncategories: Hexo\n---\n\n## Next主题\nHexo博客支持很多种主题，这里的话只记录Next主题的配置方法\n### Next主题的安装和配置\n1. 在博客主目录下执行\n```\n    git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n2. 配置_config.yml文件\n```\n    theme:next\n```\n3. Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换\n- **注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml**\n```\n    override：false #表示是否将主题置为默认样式\ncache:\n\tenable:true #表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快\nmenu: #设置博客各个页面的相对路径，默认根路径是blog/source\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar #日历\n  #sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取\n  #commonweal: /404/ || heartbeat # 腾讯公益404\n\n# Enable/Disable menu icons / item badges.\nmenu_settings:\n  icons: true # 是否显示各个页面的图标\n  badges: true # 是否显示分类/标签/归档页的内容量\n# Schemes\nscheme: Gemini\n```\n### Next各种新鲜玩法\n目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法\n1. 在每篇文章末尾统一添加“本文结束”标记\\\n**实现效果图:**\n![](https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png)\n**实现方法：**\n1. 在路径 \\themes\\next\\layout\\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：\n```\n    <div>\n        {% if not is_index %}\n            <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n        {% endif %}\n    </div>\n```\n2. 接着打开路径\\themes\\next\\layout\\_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）\n```\n      {%- if not is_index %}\n        {{ partial('_macro/passage-end-tag.swig') }}\n      {%- endif %}\n```\n3. 打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：\n```\n    # 文章末尾添加“本文结束”标记\n    passage_end_tag:\n        enabled: true\n```\n完成后即可显示对应标记\n\n### 参考链接\n[hexo博客如何写作和更新](https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187)\\\n[hexo博客优化和美化](https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187)\\\n[macOS刷新DNS](https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187)\\\n[hexo攻略添加分类和标签](https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187)\\\n[hexo美化加强版](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n\n## fluid主题\n参考文档---[fluid主题用户手册](https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B)\n**具体配置参考用户手册即可**","slug":"hexo博客自定义","published":1,"updated":"2024-01-04T12:47:42.491Z","_id":"clqz6m15g000pvpt001pjhxkc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><p>Hexo博客支持很多种主题，这里的话只记录Next主题的配置方法</p>\n<h3 id=\"Next主题的安装和配置\"><a href=\"#Next主题的安装和配置\" class=\"headerlink\" title=\"Next主题的安装和配置\"></a>Next主题的安装和配置</h3><ol>\n<li>在博客主目录下执行<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/theme-next/</span>hexo-theme-<span class=\"hljs-keyword\">next</span> themes/<span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>配置_config.yml文件<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\"><span class=\"hljs-symbol\">theme:</span><span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换</li>\n</ol>\n<ul>\n<li><strong>注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml</strong><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\">    override：false <span class=\"hljs-meta\">#表示是否将主题置为默认样式</span><br><span class=\"hljs-symbol\">cache:</span><br><span class=\"hljs-symbol\">\tenable:</span>true <span class=\"hljs-meta\">#表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快</span><br><span class=\"hljs-symbol\">menu:</span> <span class=\"hljs-meta\">#设置博客各个页面的相对路径，默认根路径是blog/source</span><br><span class=\"hljs-symbol\">  home:</span> / || home<br><span class=\"hljs-symbol\">  about:</span> <span class=\"hljs-keyword\">/about/</span> || user<br><span class=\"hljs-symbol\">  tags:</span> <span class=\"hljs-keyword\">/tags/</span> || tags<br><span class=\"hljs-symbol\">  categories:</span> <span class=\"hljs-keyword\">/categories/</span> || th<br><span class=\"hljs-symbol\">  archives:</span> <span class=\"hljs-keyword\">/archives/</span> || archive<br>  <span class=\"hljs-meta\">#schedule: /schedule/ || calendar #日历</span><br>  <span class=\"hljs-meta\">#sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取</span><br>  <span class=\"hljs-meta\">#commonweal: /404/ || heartbeat # 腾讯公益404</span><br><br><span class=\"hljs-meta\"># Enable/Disable menu icons / item badges.</span><br><span class=\"hljs-symbol\">menu_settings:</span><br><span class=\"hljs-symbol\">  icons:</span> true <span class=\"hljs-meta\"># 是否显示各个页面的图标</span><br><span class=\"hljs-symbol\">  badges:</span> true <span class=\"hljs-meta\"># 是否显示分类/标签/归档页的内容量</span><br><span class=\"hljs-meta\"># Schemes</span><br><span class=\"hljs-symbol\">scheme:</span> Gemini<br></code></pre></td></tr></table></figure>\n<h3 id=\"Next各种新鲜玩法\"><a href=\"#Next各种新鲜玩法\" class=\"headerlink\" title=\"Next各种新鲜玩法\"></a>Next各种新鲜玩法</h3>目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法</li>\n</ul>\n<ol>\n<li>在每篇文章末尾统一添加“本文结束”标记\\</li>\n</ol>\n<p><strong>实现效果图:</strong><br><img src=\"https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png\"><br><strong>实现方法：</strong></p>\n<ol>\n<li>在路径 \\themes\\next\\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">if</span></span> not is_index %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;fa fa-paw&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>感谢您的阅读-------------<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">endif</span></span> %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li>\n<li>接着打开路径\\themes\\next\\layout_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">&#123;%- if not is_index %&#125;</span><br><span class=\"language-xml\">  </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\"><span class=\"hljs-built_in\">partial</span></span>(<span class=\"hljs-name\">&#x27;_macro/passage-end-tag.swig&#x27;</span>) &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">&#123;%- endif %&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># 文章末尾添加“本文结束”标记</span><br><span class=\"hljs-attr\">passage_end_tag:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n完成后即可显示对应标记</li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187\">hexo博客如何写作和更新</a><br><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187\">hexo博客优化和美化</a><br><a href=\"https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187\">macOS刷新DNS</a><br><a href=\"https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187\">hexo攻略添加分类和标签</a><br><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\">hexo美化加强版</a></p>\n<h2 id=\"fluid主题\"><a href=\"#fluid主题\" class=\"headerlink\" title=\"fluid主题\"></a>fluid主题</h2><p>参考文档—<a href=\"https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B\">fluid主题用户手册</a><br><strong>具体配置参考用户手册即可</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><p>Hexo博客支持很多种主题，这里的话只记录Next主题的配置方法</p>\n<h3 id=\"Next主题的安装和配置\"><a href=\"#Next主题的安装和配置\" class=\"headerlink\" title=\"Next主题的安装和配置\"></a>Next主题的安装和配置</h3><ol>\n<li>在博客主目录下执行<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/theme-next/</span>hexo-theme-<span class=\"hljs-keyword\">next</span> themes/<span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>配置_config.yml文件<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\"><span class=\"hljs-symbol\">theme:</span><span class=\"hljs-keyword\">next</span><br></code></pre></td></tr></table></figure></li>\n<li>Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换</li>\n</ol>\n<ul>\n<li><strong>注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml</strong><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\">    override：false <span class=\"hljs-meta\">#表示是否将主题置为默认样式</span><br><span class=\"hljs-symbol\">cache:</span><br><span class=\"hljs-symbol\">\tenable:</span>true <span class=\"hljs-meta\">#表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快</span><br><span class=\"hljs-symbol\">menu:</span> <span class=\"hljs-meta\">#设置博客各个页面的相对路径，默认根路径是blog/source</span><br><span class=\"hljs-symbol\">  home:</span> / || home<br><span class=\"hljs-symbol\">  about:</span> <span class=\"hljs-keyword\">/about/</span> || user<br><span class=\"hljs-symbol\">  tags:</span> <span class=\"hljs-keyword\">/tags/</span> || tags<br><span class=\"hljs-symbol\">  categories:</span> <span class=\"hljs-keyword\">/categories/</span> || th<br><span class=\"hljs-symbol\">  archives:</span> <span class=\"hljs-keyword\">/archives/</span> || archive<br>  <span class=\"hljs-meta\">#schedule: /schedule/ || calendar #日历</span><br>  <span class=\"hljs-meta\">#sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取</span><br>  <span class=\"hljs-meta\">#commonweal: /404/ || heartbeat # 腾讯公益404</span><br><br><span class=\"hljs-meta\"># Enable/Disable menu icons / item badges.</span><br><span class=\"hljs-symbol\">menu_settings:</span><br><span class=\"hljs-symbol\">  icons:</span> true <span class=\"hljs-meta\"># 是否显示各个页面的图标</span><br><span class=\"hljs-symbol\">  badges:</span> true <span class=\"hljs-meta\"># 是否显示分类/标签/归档页的内容量</span><br><span class=\"hljs-meta\"># Schemes</span><br><span class=\"hljs-symbol\">scheme:</span> Gemini<br></code></pre></td></tr></table></figure>\n<h3 id=\"Next各种新鲜玩法\"><a href=\"#Next各种新鲜玩法\" class=\"headerlink\" title=\"Next各种新鲜玩法\"></a>Next各种新鲜玩法</h3>目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法</li>\n</ul>\n<ol>\n<li>在每篇文章末尾统一添加“本文结束”标记\\</li>\n</ol>\n<p><strong>实现效果图:</strong><br><img src=\"https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png\"><br><strong>实现方法：</strong></p>\n<ol>\n<li>在路径 \\themes\\next\\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">if</span></span> not is_index %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;fa fa-paw&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>感谢您的阅读-------------<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">    </span><span class=\"hljs-template-tag\">&#123;% <span class=\"hljs-name\"><span class=\"hljs-name\">endif</span></span> %&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li>\n<li>接着打开路径\\themes\\next\\layout_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs handlebars\"><span class=\"language-xml\">&#123;%- if not is_index %&#125;</span><br><span class=\"language-xml\">  </span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\"><span class=\"hljs-built_in\">partial</span></span>(<span class=\"hljs-name\">&#x27;_macro/passage-end-tag.swig&#x27;</span>) &#125;&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">&#123;%- endif %&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li>打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># 文章末尾添加“本文结束”标记</span><br><span class=\"hljs-attr\">passage_end_tag:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n完成后即可显示对应标记</li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187\">hexo博客如何写作和更新</a><br><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187\">hexo博客优化和美化</a><br><a href=\"https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187\">macOS刷新DNS</a><br><a href=\"https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187\">hexo攻略添加分类和标签</a><br><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\">hexo美化加强版</a></p>\n<h2 id=\"fluid主题\"><a href=\"#fluid主题\" class=\"headerlink\" title=\"fluid主题\"></a>fluid主题</h2><p>参考文档—<a href=\"https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B\">fluid主题用户手册</a><br><strong>具体配置参考用户手册即可</strong></p>\n"},{"title":"个人博客搭建教程及避坑指南","date":"2023-02-08T17:06:46.000Z","_content":"# 搭建一个个人博客\n```\n    本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善\n```\n\n## 写在前面\n### 提示\n搭建环境：macOS\\\nmd文件编辑器；vs code\\\n如何使用markdown语言编写博客：[markdown教程](https://www.runoob.com/markdown/md-table.html)\\\n博客GitHub地址：[点击跳转](https://github.com/gooddefense/gooddefense.github.io)\n\n\n### 作者想说 \n今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。\n\n[参考链接](https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&spm=1018.2226.3001.4187)\n\n## 可能会用到的一些异常解决办法(持续更新)\n**提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料**\n### 输入指令后长时间没有响应\n碰到以下情况：\n- 输入指令\n```\n    git push\n    git pull\n```\n- 出现长时间无法登陆GitHub\n\n**解决办法：**\n\n刷新DNS缓存：\n在终端输入以下指令\n```\n    sudo killall -HUP mDNSResponder\n```\n\n\n\n## 搭建过程\n```\n我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。\n```\n\n### 创建Github仓库\n- 登录GitHub账号，如果没有的话就先注册一个\n- 登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了\n\n### 配置SSH keys\n1. 打开终端，输入命令\n```\n    cd ~/.ssh    #进入电脑下的ssh文件\n```\n2. 生成新的SSH keys\n```\n    ssh-keygen -t rsa -C \"你的邮箱地址\"\n```\n执行此条命令后，最后出现类似长方形的字符画即表示成功。\n3. 将SSH keys添加进Github\n- 打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)\n- 复制所有内容\n- 进入Github->点击头像栏的settings->选择SSH and GPG keys->点击New SSH Key->将内容复制进key->点击add SSH Key\n4. 进行测试，输入以下指令：\n```\nssh -T git@GitHub.com #全部复制，无需更改\n```\n接下来会出现\n```\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?<输入yes>\nHi 你的用户名! You've successfully authenticated, but GitHub does not provide shell access.\n```\n出现以上提示，则证明添加SSH Keys成功\n5. 测试Github Pages是否创建成功，输入以下命令：\n```\necho \"# 你的用户名.github.io\" >> README.md\ngit init    \ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/你的用户名/你的用户名.github.io.git\ngit push -u origin master\n```\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。\n\n\n### 安装nvm(避坑)\n    这里需要注意，先安装好nvm，再去安装nodejs\n#### 原因\n- nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错\n![引用自csdn](https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70)\n导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面\n\n#### 开始安装\n- 开始之前先确认node和npm都已经卸载完成\n- 从github上获取nvm最新下载命令进行下载\n[nvm github网址](https://github.com/nvm-sh/nvm)\n```\n    这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。\n    解决方案如下：\n    1. 进入该网址： https://www.ipaddress.com/ \n    2. 查询拒绝访问的网址的IP地址，拉到最下面，复制下来\n    3. 终端输入：sudo vim /etc/hosts\n    4. 在文件最后输入：（IP地址）（网址）\n    5. 保存文件后，重新执行最新下载命令即可\n    6. 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决\n    7. 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。\n    8. 输入：nvm -v查看版本号，有显示说明安装成功\n```\n![](https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png)\n \n\n### 安装nodejs\n- 在nvm安装完成的基础上，执行命令：\n```\n    nvm install node\n```\n等待完成即可\n### 安装hexo\n- 执行以下代码：\n```\n    npm install -g hexo-cli\n    hexo init blog\n    cd blog\n    npm install\n```\n- 测试hexo是否可以运行\n```\n    cd blog\n    hexo s\n```\n在浏览器上输入**http://localhost:4000/**，如果显示网页，则证明成功\n当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器\n### 部署hexo到Github服务器上\n1. 安装hexo-deployer-git\n```\nnpm install hexo-deployer-git --save\n```\n2. 修改_config.yml (路径：/blog/_config.yml)\n```\ndeploy:\n  type: git\n  repo: <repository url> #你的 【你的名字】.github.io  这一项目的git地址#\n  branch: master \n  message: [message] #可不填写#\n```\n3. 执行命令将hexo部署到服务器上\n```\n    hexo clean\n    hexo g\n    hexo d\n```\n- 如果执行命令后出现错误，就重复执行下列语句\n```\n    npm install hexo-deployer-git --save\n```\n执行完毕后，应该就可以在**你的名字.github.io**看到你的网页了\n\n### 更新博客文章\n1. 创建新文章\n```\n    hexo new \"新文章\"\n```\n2. 编写文章\n这里推荐使用vscode，typora也行，但是typora需要付费\n3. 更新main分支\n```\n    hexo clean #可忽略\n    hexo generate #使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹\n    hexo s #启动本地服务器\n    hexo d #一键部署\n```\n4. 更新hexo分支\n```\n    git add -A （此命令用来添加所有文件到暂存区）\n    git commit -m \"新增博客文章\"  （此命令用来提交，双引号内可自定义内容，双引号前有空格）\n    git push origin hexo （此命令用来推送hexo分支到Github）\n    # 此条命令有时候会上传失败，可以使用下面这个命令\n    # git push origin HEAD:hexo\n```\n**** \n搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中--[Hexo博客自定义]()，有需要的可以移步观看。","source":"_posts/readme.md","raw":"---\ntitle: 个人博客搭建教程及避坑指南\ndate: 2023-02-09 01:06:46\ntags: \ncategories: Hexo\n---\n# 搭建一个个人博客\n```\n    本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善\n```\n\n## 写在前面\n### 提示\n搭建环境：macOS\\\nmd文件编辑器；vs code\\\n如何使用markdown语言编写博客：[markdown教程](https://www.runoob.com/markdown/md-table.html)\\\n博客GitHub地址：[点击跳转](https://github.com/gooddefense/gooddefense.github.io)\n\n\n### 作者想说 \n今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。\n\n[参考链接](https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142^v73^insert_down1,201^v4^add_ask,239^v1^insert_chatgpt&spm=1018.2226.3001.4187)\n\n## 可能会用到的一些异常解决办法(持续更新)\n**提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料**\n### 输入指令后长时间没有响应\n碰到以下情况：\n- 输入指令\n```\n    git push\n    git pull\n```\n- 出现长时间无法登陆GitHub\n\n**解决办法：**\n\n刷新DNS缓存：\n在终端输入以下指令\n```\n    sudo killall -HUP mDNSResponder\n```\n\n\n\n## 搭建过程\n```\n我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。\n```\n\n### 创建Github仓库\n- 登录GitHub账号，如果没有的话就先注册一个\n- 登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了\n\n### 配置SSH keys\n1. 打开终端，输入命令\n```\n    cd ~/.ssh    #进入电脑下的ssh文件\n```\n2. 生成新的SSH keys\n```\n    ssh-keygen -t rsa -C \"你的邮箱地址\"\n```\n执行此条命令后，最后出现类似长方形的字符画即表示成功。\n3. 将SSH keys添加进Github\n- 打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)\n- 复制所有内容\n- 进入Github->点击头像栏的settings->选择SSH and GPG keys->点击New SSH Key->将内容复制进key->点击add SSH Key\n4. 进行测试，输入以下指令：\n```\nssh -T git@GitHub.com #全部复制，无需更改\n```\n接下来会出现\n```\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?<输入yes>\nHi 你的用户名! You've successfully authenticated, but GitHub does not provide shell access.\n```\n出现以上提示，则证明添加SSH Keys成功\n5. 测试Github Pages是否创建成功，输入以下命令：\n```\necho \"# 你的用户名.github.io\" >> README.md\ngit init    \ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/你的用户名/你的用户名.github.io.git\ngit push -u origin master\n```\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。\n\n\n### 安装nvm(避坑)\n    这里需要注意，先安装好nvm，再去安装nodejs\n#### 原因\n- nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错\n![引用自csdn](https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70)\n导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面\n\n#### 开始安装\n- 开始之前先确认node和npm都已经卸载完成\n- 从github上获取nvm最新下载命令进行下载\n[nvm github网址](https://github.com/nvm-sh/nvm)\n```\n    这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。\n    解决方案如下：\n    1. 进入该网址： https://www.ipaddress.com/ \n    2. 查询拒绝访问的网址的IP地址，拉到最下面，复制下来\n    3. 终端输入：sudo vim /etc/hosts\n    4. 在文件最后输入：（IP地址）（网址）\n    5. 保存文件后，重新执行最新下载命令即可\n    6. 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决\n    7. 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。\n    8. 输入：nvm -v查看版本号，有显示说明安装成功\n```\n![](https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png)\n \n\n### 安装nodejs\n- 在nvm安装完成的基础上，执行命令：\n```\n    nvm install node\n```\n等待完成即可\n### 安装hexo\n- 执行以下代码：\n```\n    npm install -g hexo-cli\n    hexo init blog\n    cd blog\n    npm install\n```\n- 测试hexo是否可以运行\n```\n    cd blog\n    hexo s\n```\n在浏览器上输入**http://localhost:4000/**，如果显示网页，则证明成功\n当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器\n### 部署hexo到Github服务器上\n1. 安装hexo-deployer-git\n```\nnpm install hexo-deployer-git --save\n```\n2. 修改_config.yml (路径：/blog/_config.yml)\n```\ndeploy:\n  type: git\n  repo: <repository url> #你的 【你的名字】.github.io  这一项目的git地址#\n  branch: master \n  message: [message] #可不填写#\n```\n3. 执行命令将hexo部署到服务器上\n```\n    hexo clean\n    hexo g\n    hexo d\n```\n- 如果执行命令后出现错误，就重复执行下列语句\n```\n    npm install hexo-deployer-git --save\n```\n执行完毕后，应该就可以在**你的名字.github.io**看到你的网页了\n\n### 更新博客文章\n1. 创建新文章\n```\n    hexo new \"新文章\"\n```\n2. 编写文章\n这里推荐使用vscode，typora也行，但是typora需要付费\n3. 更新main分支\n```\n    hexo clean #可忽略\n    hexo generate #使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹\n    hexo s #启动本地服务器\n    hexo d #一键部署\n```\n4. 更新hexo分支\n```\n    git add -A （此命令用来添加所有文件到暂存区）\n    git commit -m \"新增博客文章\"  （此命令用来提交，双引号内可自定义内容，双引号前有空格）\n    git push origin hexo （此命令用来推送hexo分支到Github）\n    # 此条命令有时候会上传失败，可以使用下面这个命令\n    # git push origin HEAD:hexo\n```\n**** \n搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中--[Hexo博客自定义]()，有需要的可以移步观看。","slug":"readme","published":1,"updated":"2024-01-04T12:47:42.491Z","_id":"clqz6m15h000rvpt00fnx4ped","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"搭建一个个人博客\"><a href=\"#搭建一个个人博客\" class=\"headerlink\" title=\"搭建一个个人博客\"></a>搭建一个个人博客</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>搭建环境：macOS<br>md文件编辑器；vs code<br>如何使用markdown语言编写博客：<a href=\"https://www.runoob.com/markdown/md-table.html\">markdown教程</a><br>博客GitHub地址：<a href=\"https://github.com/gooddefense/gooddefense.github.io\">点击跳转</a></p>\n<h3 id=\"作者想说\"><a href=\"#作者想说\" class=\"headerlink\" title=\"作者想说\"></a>作者想说</h3><p>今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。</p>\n<p><a href=\"https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&spm=1018.2226.3001.4187\">参考链接</a></p>\n<h2 id=\"可能会用到的一些异常解决办法-持续更新\"><a href=\"#可能会用到的一些异常解决办法-持续更新\" class=\"headerlink\" title=\"可能会用到的一些异常解决办法(持续更新)\"></a>可能会用到的一些异常解决办法(持续更新)</h2><p><strong>提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料</strong></p>\n<h3 id=\"输入指令后长时间没有响应\"><a href=\"#输入指令后长时间没有响应\" class=\"headerlink\" title=\"输入指令后长时间没有响应\"></a>输入指令后长时间没有响应</h3><p>碰到以下情况：</p>\n<ul>\n<li>输入指令<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">git <span class=\"hljs-built_in\">push</span><br>git pull<br></code></pre></td></tr></table></figure></li>\n<li>出现长时间无法登陆GitHub</li>\n</ul>\n<p><strong>解决办法：</strong></p>\n<p>刷新DNS缓存：<br>在终端输入以下指令</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sudo killall -HUP mDNSResponder</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><ul>\n<li>登录GitHub账号，如果没有的话就先注册一个</li>\n<li>登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了</li>\n</ul>\n<h3 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h3><ol>\n<li>打开终端，输入命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/.ssh    <span class=\"hljs-comment\">#进入电脑下的ssh文件</span><br></code></pre></td></tr></table></figure></li>\n<li>生成新的SSH keys<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;你的邮箱地址&quot;</span><br></code></pre></td></tr></table></figure>\n执行此条命令后，最后出现类似长方形的字符画即表示成功。</li>\n<li>将SSH keys添加进Github</li>\n</ol>\n<ul>\n<li>打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)</li>\n<li>复制所有内容</li>\n<li>进入Github-&gt;点击头像栏的settings-&gt;选择SSH and GPG keys-&gt;点击New SSH Key-&gt;将内容复制进key-&gt;点击add SSH Key</li>\n</ul>\n<ol start=\"4\">\n<li>进行测试，输入以下指令：<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@GitHub</span>.com <span class=\"hljs-comment\">#全部复制，无需更改</span><br></code></pre></td></tr></table></figure>\n接下来会出现<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">The</span> authenticity of host &#x27;GitHub.com (<span class=\"hljs-number\">207.97.227.239</span>)&#x27; can&#x27;t be established.<br><span class=\"hljs-attribute\">RSA</span> key fingerprint is <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">27</span>:ac:a5:<span class=\"hljs-number\">76</span>:<span class=\"hljs-number\">28</span>:<span class=\"hljs-number\">2</span>d:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">1</span>b:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">4</span>d:eb:df:a6:<span class=\"hljs-number\">48</span>.<br><span class=\"hljs-attribute\">Are</span> you sure you want to continue connecting (yes/no)?&lt;输入yes&gt;<br><span class=\"hljs-attribute\">Hi</span> 你的用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n出现以上提示，则证明添加SSH Keys成功</li>\n<li>测试Github Pages是否创建成功，输入以下命令：<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">echo</span> <span class=\"hljs-string\">&quot;# 你的用户名.github.io&quot;</span> &gt;&gt; README.md<br><span class=\"hljs-symbol\">git</span> init    <br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> README.md<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br><span class=\"hljs-symbol\">git</span> remote <span class=\"hljs-keyword\">add</span> origin https:<span class=\"hljs-comment\">//github.com/你的用户名/你的用户名.github.io.git</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push</span> -u origin master<br></code></pre></td></tr></table></figure>\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。</li>\n</ol>\n<h3 id=\"安装nvm-避坑\"><a href=\"#安装nvm-避坑\" class=\"headerlink\" title=\"安装nvm(避坑)\"></a>安装nvm(避坑)</h3><pre><code class=\"hljs\">这里需要注意，先安装好nvm，再去安装nodejs\n</code></pre>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错<br><img src=\"https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70\" alt=\"引用自csdn\"><br>导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面</li>\n</ul>\n<h4 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h4><ul>\n<li>开始之前先确认node和npm都已经卸载完成</li>\n<li>从github上获取nvm最新下载命令进行下载<br><a href=\"https://github.com/nvm-sh/nvm\">nvm github网址</a><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。<br>解决方案如下：<br><span class=\"hljs-bullet\">1.</span> 进入该网址： https://www.ipaddress.com/ <br><span class=\"hljs-bullet\">2.</span> 查询拒绝访问的网址的IP地址，拉到最下面，复制下来<br><span class=\"hljs-bullet\">3.</span> 终端输入：sudo vim /etc/hosts<br><span class=\"hljs-bullet\">4.</span> 在文件最后输入：（IP地址）（网址）<br><span class=\"hljs-bullet\">5.</span> 保存文件后，重新执行最新下载命令即可<br><span class=\"hljs-bullet\">6.</span> 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决<br><span class=\"hljs-bullet\">7.</span> 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。<br><span class=\"hljs-bullet\">8.</span> 输入：nvm -v查看版本号，有显示说明安装成功<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png\"></li>\n</ul>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ul>\n<li>在nvm安装完成的基础上，执行命令：<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">nvm install <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span><br></code></pre></td></tr></table></figure>\n等待完成即可<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3></li>\n<li>执行以下代码：<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">npm <span class=\"hljs-keyword\">install </span>-g hexo-cli<br>hexo init <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>cd <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>npm <span class=\"hljs-keyword\">install</span><br></code></pre></td></tr></table></figure></li>\n<li>测试hexo是否可以运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> blog<br>hexo s<br></code></pre></td></tr></table></figure>\n在浏览器上输入**<a href=\"http://localhost:4000/**%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%EF%BC%8C%E5%88%99%E8%AF%81%E6%98%8E%E6%88%90%E5%8A%9F\">http://localhost:4000/**，如果显示网页，则证明成功</a><br>当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器<h3 id=\"部署hexo到Github服务器上\"><a href=\"#部署hexo到Github服务器上\" class=\"headerlink\" title=\"部署hexo到Github服务器上\"></a>部署hexo到Github服务器上</h3></li>\n</ul>\n<ol>\n<li>安装hexo-deployer-git<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure></li>\n<li>修改_config.yml (路径：/blog/_config.yml)<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">deploy:</span><br><span class=\"hljs-symbol\">  type:</span> git<br><span class=\"hljs-symbol\">  repo:</span> <span class=\"hljs-params\">&lt;repository url&gt;</span> <span class=\"hljs-meta\">#你的 【你的名字】.github.io  这一项目的git地址#</span><br><span class=\"hljs-symbol\">  branch:</span> master <br><span class=\"hljs-symbol\">  message:</span> [message] <span class=\"hljs-meta\">#可不填写#</span><br></code></pre></td></tr></table></figure></li>\n<li>执行命令将hexo部署到服务器上<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo clean</span><br><span class=\"hljs-attribute\">hexo g</span><br><span class=\"hljs-attribute\">hexo d</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>如果执行命令后出现错误，就重复执行下列语句<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure>\n执行完毕后，应该就可以在<strong>你的名字.github.io</strong>看到你的网页了</li>\n</ul>\n<h3 id=\"更新博客文章\"><a href=\"#更新博客文章\" class=\"headerlink\" title=\"更新博客文章\"></a>更新博客文章</h3><ol>\n<li>创建新文章<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-string\">&quot;新文章&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li>编写文章<br>这里推荐使用vscode，typora也行，但是typora需要付费</li>\n<li>更新main分支<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">hexo</span> clean <span class=\"hljs-comment\">#可忽略</span><br>hexo generate <span class=\"hljs-comment\">#使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹</span><br>hexo s <span class=\"hljs-comment\">#启动本地服务器</span><br>hexo d <span class=\"hljs-comment\">#一键部署</span><br></code></pre></td></tr></table></figure></li>\n<li>更新hexo分支<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">git <span class=\"hljs-keyword\">add </span>-A （此命令用来添加所有文件到暂存区）<br>git commit -m <span class=\"hljs-string\">&quot;新增博客文章&quot;</span>  （此命令用来提交，双引号内可自定义内容，双引号前有空格）<br>git push <span class=\"hljs-keyword\">origin </span>hexo （此命令用来推送hexo分支到Github）<br><span class=\"hljs-comment\"># 此条命令有时候会上传失败，可以使用下面这个命令</span><br><span class=\"hljs-comment\"># git push origin HEAD:hexo</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中–<a href=\"\">Hexo博客自定义</a>，有需要的可以移步观看。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建一个个人博客\"><a href=\"#搭建一个个人博客\" class=\"headerlink\" title=\"搭建一个个人博客\"></a>搭建一个个人博客</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>搭建环境：macOS<br>md文件编辑器；vs code<br>如何使用markdown语言编写博客：<a href=\"https://www.runoob.com/markdown/md-table.html\">markdown教程</a><br>博客GitHub地址：<a href=\"https://github.com/gooddefense/gooddefense.github.io\">点击跳转</a></p>\n<h3 id=\"作者想说\"><a href=\"#作者想说\" class=\"headerlink\" title=\"作者想说\"></a>作者想说</h3><p>今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。</p>\n<p><a href=\"https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&spm=1018.2226.3001.4187\">参考链接</a></p>\n<h2 id=\"可能会用到的一些异常解决办法-持续更新\"><a href=\"#可能会用到的一些异常解决办法-持续更新\" class=\"headerlink\" title=\"可能会用到的一些异常解决办法(持续更新)\"></a>可能会用到的一些异常解决办法(持续更新)</h2><p><strong>提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料</strong></p>\n<h3 id=\"输入指令后长时间没有响应\"><a href=\"#输入指令后长时间没有响应\" class=\"headerlink\" title=\"输入指令后长时间没有响应\"></a>输入指令后长时间没有响应</h3><p>碰到以下情况：</p>\n<ul>\n<li>输入指令<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">git <span class=\"hljs-built_in\">push</span><br>git pull<br></code></pre></td></tr></table></figure></li>\n<li>出现长时间无法登陆GitHub</li>\n</ul>\n<p><strong>解决办法：</strong></p>\n<p>刷新DNS缓存：<br>在终端输入以下指令</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sudo killall -HUP mDNSResponder</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建Github仓库\"><a href=\"#创建Github仓库\" class=\"headerlink\" title=\"创建Github仓库\"></a>创建Github仓库</h3><ul>\n<li>登录GitHub账号，如果没有的话就先注册一个</li>\n<li>登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了</li>\n</ul>\n<h3 id=\"配置SSH-keys\"><a href=\"#配置SSH-keys\" class=\"headerlink\" title=\"配置SSH keys\"></a>配置SSH keys</h3><ol>\n<li>打开终端，输入命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/.ssh    <span class=\"hljs-comment\">#进入电脑下的ssh文件</span><br></code></pre></td></tr></table></figure></li>\n<li>生成新的SSH keys<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;你的邮箱地址&quot;</span><br></code></pre></td></tr></table></figure>\n执行此条命令后，最后出现类似长方形的字符画即表示成功。</li>\n<li>将SSH keys添加进Github</li>\n</ol>\n<ul>\n<li>打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)</li>\n<li>复制所有内容</li>\n<li>进入Github-&gt;点击头像栏的settings-&gt;选择SSH and GPG keys-&gt;点击New SSH Key-&gt;将内容复制进key-&gt;点击add SSH Key</li>\n</ul>\n<ol start=\"4\">\n<li>进行测试，输入以下指令：<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@GitHub</span>.com <span class=\"hljs-comment\">#全部复制，无需更改</span><br></code></pre></td></tr></table></figure>\n接下来会出现<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">The</span> authenticity of host &#x27;GitHub.com (<span class=\"hljs-number\">207.97.227.239</span>)&#x27; can&#x27;t be established.<br><span class=\"hljs-attribute\">RSA</span> key fingerprint is <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">27</span>:ac:a5:<span class=\"hljs-number\">76</span>:<span class=\"hljs-number\">28</span>:<span class=\"hljs-number\">2</span>d:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">1</span>b:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">4</span>d:eb:df:a6:<span class=\"hljs-number\">48</span>.<br><span class=\"hljs-attribute\">Are</span> you sure you want to continue connecting (yes/no)?&lt;输入yes&gt;<br><span class=\"hljs-attribute\">Hi</span> 你的用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n出现以上提示，则证明添加SSH Keys成功</li>\n<li>测试Github Pages是否创建成功，输入以下命令：<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">echo</span> <span class=\"hljs-string\">&quot;# 你的用户名.github.io&quot;</span> &gt;&gt; README.md<br><span class=\"hljs-symbol\">git</span> init    <br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> README.md<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br><span class=\"hljs-symbol\">git</span> remote <span class=\"hljs-keyword\">add</span> origin https:<span class=\"hljs-comment\">//github.com/你的用户名/你的用户名.github.io.git</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push</span> -u origin master<br></code></pre></td></tr></table></figure>\n之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。</li>\n</ol>\n<h3 id=\"安装nvm-避坑\"><a href=\"#安装nvm-避坑\" class=\"headerlink\" title=\"安装nvm(避坑)\"></a>安装nvm(避坑)</h3><pre><code>这里需要注意，先安装好nvm，再去安装nodejs\n</code></pre>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错<br><img src=\"https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70\" alt=\"引用自csdn\"><br>导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面</li>\n</ul>\n<h4 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h4><ul>\n<li>开始之前先确认node和npm都已经卸载完成</li>\n<li>从github上获取nvm最新下载命令进行下载<br><a href=\"https://github.com/nvm-sh/nvm\">nvm github网址</a><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。<br>解决方案如下：<br><span class=\"hljs-bullet\">1.</span> 进入该网址： https://www.ipaddress.com/ <br><span class=\"hljs-bullet\">2.</span> 查询拒绝访问的网址的IP地址，拉到最下面，复制下来<br><span class=\"hljs-bullet\">3.</span> 终端输入：sudo vim /etc/hosts<br><span class=\"hljs-bullet\">4.</span> 在文件最后输入：（IP地址）（网址）<br><span class=\"hljs-bullet\">5.</span> 保存文件后，重新执行最新下载命令即可<br><span class=\"hljs-bullet\">6.</span> 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决<br><span class=\"hljs-bullet\">7.</span> 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。<br><span class=\"hljs-bullet\">8.</span> 输入：nvm -v查看版本号，有显示说明安装成功<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png\"></li>\n</ul>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ul>\n<li>在nvm安装完成的基础上，执行命令：<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">nvm install <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\"></span><br></code></pre></td></tr></table></figure>\n等待完成即可<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3></li>\n<li>执行以下代码：<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">npm <span class=\"hljs-keyword\">install </span>-g hexo-cli<br>hexo init <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>cd <span class=\"hljs-keyword\">blog</span><br><span class=\"hljs-keyword\"></span>npm <span class=\"hljs-keyword\">install</span><br></code></pre></td></tr></table></figure></li>\n<li>测试hexo是否可以运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> blog<br>hexo s<br></code></pre></td></tr></table></figure>\n在浏览器上输入**<a href=\"http://localhost:4000/**%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%EF%BC%8C%E5%88%99%E8%AF%81%E6%98%8E%E6%88%90%E5%8A%9F\">http://localhost:4000/**，如果显示网页，则证明成功</a><br>当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器<h3 id=\"部署hexo到Github服务器上\"><a href=\"#部署hexo到Github服务器上\" class=\"headerlink\" title=\"部署hexo到Github服务器上\"></a>部署hexo到Github服务器上</h3></li>\n</ul>\n<ol>\n<li>安装hexo-deployer-git<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure></li>\n<li>修改_config.yml (路径：/blog/_config.yml)<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">deploy:</span><br><span class=\"hljs-symbol\">  type:</span> git<br><span class=\"hljs-symbol\">  repo:</span> <span class=\"hljs-params\">&lt;repository url&gt;</span> <span class=\"hljs-meta\">#你的 【你的名字】.github.io  这一项目的git地址#</span><br><span class=\"hljs-symbol\">  branch:</span> master <br><span class=\"hljs-symbol\">  message:</span> [message] <span class=\"hljs-meta\">#可不填写#</span><br></code></pre></td></tr></table></figure></li>\n<li>执行命令将hexo部署到服务器上<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo clean</span><br><span class=\"hljs-attribute\">hexo g</span><br><span class=\"hljs-attribute\">hexo d</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>如果执行命令后出现错误，就重复执行下列语句<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">npm install hexo-deployer-git <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure>\n执行完毕后，应该就可以在<strong>你的名字.github.io</strong>看到你的网页了</li>\n</ul>\n<h3 id=\"更新博客文章\"><a href=\"#更新博客文章\" class=\"headerlink\" title=\"更新博客文章\"></a>更新博客文章</h3><ol>\n<li>创建新文章<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-string\">&quot;新文章&quot;</span><br></code></pre></td></tr></table></figure></li>\n<li>编写文章<br>这里推荐使用vscode，typora也行，但是typora需要付费</li>\n<li>更新main分支<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">hexo</span> clean <span class=\"hljs-comment\">#可忽略</span><br>hexo generate <span class=\"hljs-comment\">#使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹</span><br>hexo s <span class=\"hljs-comment\">#启动本地服务器</span><br>hexo d <span class=\"hljs-comment\">#一键部署</span><br></code></pre></td></tr></table></figure></li>\n<li>更新hexo分支<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">git <span class=\"hljs-keyword\">add </span>-A （此命令用来添加所有文件到暂存区）<br>git commit -m <span class=\"hljs-string\">&quot;新增博客文章&quot;</span>  （此命令用来提交，双引号内可自定义内容，双引号前有空格）<br>git push <span class=\"hljs-keyword\">origin </span>hexo （此命令用来推送hexo分支到Github）<br><span class=\"hljs-comment\"># 此条命令有时候会上传失败，可以使用下面这个命令</span><br><span class=\"hljs-comment\"># git push origin HEAD:hexo</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中–<a href=\"\">Hexo博客自定义</a>，有需要的可以移步观看。</p>\n"},{"title":"markdown语法","date":"2023-03-27T11:33:34.000Z","_content":"# markdown语法\n\n## 前言\n每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。\n\n学习的参考网址在这里： [markdown语法教程](https://www.runoob.com/markdown/md-tutorial.html)\n\n## 编辑器\n**vscode**\n市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。\n\n### 一个关于markdown的插件\n名字叫做 **Markdown Preview Enhanced**\n这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。\n\n## 标题\n1. 使用 = 和 - 标记一级和二级标题\n```\n我展示的是一级标题\n==================\n我展示的是二级标题\n------------------\n```\n2. 使用 # 号标记\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n## 段落\nmarkdown语法里对于段落并没有特殊的语法，直接编辑文字即可  \n**注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落**  \n\n## 字体\n```\n*斜体文字*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n## 分隔线\n用三个以上的星号，减号，底线即可建立分隔线\n\n## 删除线\n在文字的两端加上两个波浪线 ~~ 即可\n\n## 下划线\n通过html中的**< u>**来实现\n例子：\n```\n<u>带下划线文本</u>\n```\n效果如下：\n<u>带下划线文本</u>\n\n## 脚注\n脚注是什么？\n脚注是对文本的补充说明\n在markdown语法中，脚注的语法格式为：\n```\n[^要注明的文本]\n```\n实例演示：\n输入的语法格式：\n```\n勒布朗.詹姆斯[^简介]\n[^简介]: 一位著名的篮球运动员\n```\n\n实际效果演示：\n\n勒布朗.詹姆斯[^简介]。\n [^简介]: 美国nba篮球运动员\n\n## 列表\n1. 无序列表\n无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空\n```\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n```\n\n显示效果：\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n\n2. 有序列表\n使用数字并加上 . 号来表示\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n显示效果：\n1. 第一项\n2. 第二项\n3. 第三项\n\n列表嵌套\n```\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n\n显示效果：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n\n## 区块\n在段落开头使用 > 符号 ，然后后面紧跟一个空格符号\n```\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n```\n\n显示效果：\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n\n***区块之间可以进行嵌套***\n```\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n```\n\n显示效果：\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n\n***在区块中使用列表***\n```\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n```\n\n显示效果：\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n\n***在列表中使用区块***\n```\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n```\n\n显示效果：\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n\n## 代码\n***函数名或者小的代码片段***\n当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。\n\n类似于下面的效果\n`exit()`函数\n\n***代码区块***\n1. Tab键或4个空格\n当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键\n\n显示效果\n\n    #include <stdio.h>\n    int main()\n    {\n        printf(\"Hello world!\\n\");\n        return 0;\n    }\n\n2. 用两个```包裹\n显示效果\n```Java\npublic class Person\n{\n    private String name;\n    private int age;\n    \n    public String getName(){\n        return name;\n    }\n\n    public void setName(String name){\n        this.name = name;\n    }\n\n    public int getAge(){\n        return age;\n    }\n\n    public void setAge(){\n        this.age = age;\n    }\n}\n```\n\n## 链接\n有些时候，我们需要将链接引入到文档中，方便我们查看。\n链接的使用方法是：\n```\n[链接名称](链接地址)\n或者\n<链接地址>\n```\n\n显示效果：\n[百度首页](https://www.baidu.com)\n\n<https://www.baidu.com>\n\n***高级链接***\n相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。\n```\n这个链接是百度的官网[百度]\n[1]\n这个链接是google的官网[google][2]\n\n[1]: https://www.baidu.com\n[2]: https://www.google.com\n```\n\n显示效果：\n这个链接是百度的官网[百度官网][3]\n这个链接是google的官网[google官网][2]\n\n[3]: https://www.baidu.com\n[2]: https://www.google.com\n\n## 图片\n\n","source":"_posts/markdown语法.md","raw":"---\ntitle: markdown语法\ndate: 2023-03-27 19:33:34\ntags:\ncategories: 编程语言及工具笔记\n---\n# markdown语法\n\n## 前言\n每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。\n\n学习的参考网址在这里： [markdown语法教程](https://www.runoob.com/markdown/md-tutorial.html)\n\n## 编辑器\n**vscode**\n市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。\n\n### 一个关于markdown的插件\n名字叫做 **Markdown Preview Enhanced**\n这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。\n\n## 标题\n1. 使用 = 和 - 标记一级和二级标题\n```\n我展示的是一级标题\n==================\n我展示的是二级标题\n------------------\n```\n2. 使用 # 号标记\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n## 段落\nmarkdown语法里对于段落并没有特殊的语法，直接编辑文字即可  \n**注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落**  \n\n## 字体\n```\n*斜体文字*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n## 分隔线\n用三个以上的星号，减号，底线即可建立分隔线\n\n## 删除线\n在文字的两端加上两个波浪线 ~~ 即可\n\n## 下划线\n通过html中的**< u>**来实现\n例子：\n```\n<u>带下划线文本</u>\n```\n效果如下：\n<u>带下划线文本</u>\n\n## 脚注\n脚注是什么？\n脚注是对文本的补充说明\n在markdown语法中，脚注的语法格式为：\n```\n[^要注明的文本]\n```\n实例演示：\n输入的语法格式：\n```\n勒布朗.詹姆斯[^简介]\n[^简介]: 一位著名的篮球运动员\n```\n\n实际效果演示：\n\n勒布朗.詹姆斯[^简介]。\n [^简介]: 美国nba篮球运动员\n\n## 列表\n1. 无序列表\n无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空\n```\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n```\n\n显示效果：\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n- 第一项\n- 第二项\n- 第三项\n\n2. 有序列表\n使用数字并加上 . 号来表示\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n显示效果：\n1. 第一项\n2. 第二项\n3. 第三项\n\n列表嵌套\n```\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n\n显示效果：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n\n## 区块\n在段落开头使用 > 符号 ，然后后面紧跟一个空格符号\n```\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n```\n\n显示效果：\n> 洛杉矶湖人队\n> 勒布朗.詹姆斯\n> 安东尼.戴维斯\n\n***区块之间可以进行嵌套***\n```\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n```\n\n显示效果：\n> 洛杉矶湖人队\n> > 勒布朗.詹姆斯\n> > > 小前锋\n\n***在区块中使用列表***\n```\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n```\n\n显示效果：\n> 任务列表\n> 1. 第一项\n> 2. 第二项\n> + 吃饭\n> + 睡觉\n\n***在列表中使用区块***\n```\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n```\n\n显示效果：\n* 第一项\n    > 吃饭\n    > 睡觉\n* 第二项\n\n## 代码\n***函数名或者小的代码片段***\n当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。\n\n类似于下面的效果\n`exit()`函数\n\n***代码区块***\n1. Tab键或4个空格\n当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键\n\n显示效果\n\n    #include <stdio.h>\n    int main()\n    {\n        printf(\"Hello world!\\n\");\n        return 0;\n    }\n\n2. 用两个```包裹\n显示效果\n```Java\npublic class Person\n{\n    private String name;\n    private int age;\n    \n    public String getName(){\n        return name;\n    }\n\n    public void setName(String name){\n        this.name = name;\n    }\n\n    public int getAge(){\n        return age;\n    }\n\n    public void setAge(){\n        this.age = age;\n    }\n}\n```\n\n## 链接\n有些时候，我们需要将链接引入到文档中，方便我们查看。\n链接的使用方法是：\n```\n[链接名称](链接地址)\n或者\n<链接地址>\n```\n\n显示效果：\n[百度首页](https://www.baidu.com)\n\n<https://www.baidu.com>\n\n***高级链接***\n相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。\n```\n这个链接是百度的官网[百度]\n[1]\n这个链接是google的官网[google][2]\n\n[1]: https://www.baidu.com\n[2]: https://www.google.com\n```\n\n显示效果：\n这个链接是百度的官网[百度官网][3]\n这个链接是google的官网[google官网][2]\n\n[3]: https://www.baidu.com\n[2]: https://www.google.com\n\n## 图片\n\n","slug":"markdown语法","published":1,"updated":"2024-01-04T12:47:42.491Z","_id":"clqz6m15h000svpt085imdrsv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"markdown语法\"><a href=\"#markdown语法\" class=\"headerlink\" title=\"markdown语法\"></a>markdown语法</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。</p>\n<p>学习的参考网址在这里： <a href=\"https://www.runoob.com/markdown/md-tutorial.html\">markdown语法教程</a></p>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><p><strong>vscode</strong><br>市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。</p>\n<h3 id=\"一个关于markdown的插件\"><a href=\"#一个关于markdown的插件\" class=\"headerlink\" title=\"一个关于markdown的插件\"></a>一个关于markdown的插件</h3><p>名字叫做 <strong>Markdown Preview Enhanced</strong><br>这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><ol>\n<li>使用 = 和 - 标记一级和二级标题<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">我展示的是一级标题</span><br><span class=\"hljs-section\">==================</span><br><span class=\"hljs-section\">我展示的是二级标题</span><br><span class=\"hljs-section\">------------------</span><br></code></pre></td></tr></table></figure></li>\n<li>使用 # 号标记<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>markdown语法里对于段落并没有特殊的语法，直接编辑文字即可<br><strong>注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落</strong>  </p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-strong\">*斜体文字*</span><br><span class=\"hljs-emphasis\">_斜体文本_</span><br><span class=\"hljs-strong\">**粗体文本**</span><br><span class=\"hljs-emphasis\">__粗体文本__</span><br><span class=\"hljs-strong\">***粗斜体文本**</span>*<br><span class=\"hljs-emphasis\">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>用三个以上的星号，减号，底线即可建立分隔线</p>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>在文字的两端加上两个波浪线 ~~ 即可</p>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>通过html中的**&lt; u&gt;**来实现<br>例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">u</span>&gt;</span>带下划线文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">u</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>效果如下：<br><u>带下划线文本</u></p>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是什么？<br>脚注是对文本的补充说明<br>在markdown语法中，脚注的语法格式为：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-string\">[^要注明的文本]</span><br></code></pre></td></tr></table></figure>\n<p>实例演示：<br>输入的语法格式：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">勒布朗.詹姆斯[^简介]<br>[<span class=\"hljs-symbol\">^简介</span>]: <span class=\"hljs-link\">一位著名的篮球运动员</span><br></code></pre></td></tr></table></figure>\n\n<p>实际效果演示：</p>\n<p>勒布朗.詹姆斯[^简介]。<br> [^简介]: 美国nba篮球运动员</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><ol>\n<li>无序列表<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">*</span> 第一项<br><span class=\"hljs-bullet\">*</span> 第二项<br><span class=\"hljs-bullet\">*</span> 第三项<br><br><span class=\"hljs-bullet\">+</span> 第一项<br><span class=\"hljs-bullet\">+</span> 第二项<br><span class=\"hljs-bullet\">+</span> 第三项<br><br><span class=\"hljs-bullet\">-</span> 第一项<br><span class=\"hljs-bullet\">-</span> 第二项<br><span class=\"hljs-bullet\">-</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ol start=\"2\">\n<li>有序列表<br>使用数字并加上 . 号来表示<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项<br><span class=\"hljs-bullet\">2.</span> 第二项<br><span class=\"hljs-bullet\">3.</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<p>列表嵌套</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项：<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第二个元素<br><span class=\"hljs-bullet\">2.</span> 第二项：<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ol>\n<li>第一项：<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><p>在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">安东尼.戴维斯</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队<br>勒布朗.詹姆斯<br>安东尼.戴维斯</p>\n</blockquote>\n<p><em><strong>区块之间可以进行嵌套</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; 勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; &gt; 小前锋</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队</p>\n<blockquote>\n<p>勒布朗.詹姆斯</p>\n<blockquote>\n<p>小前锋</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em><strong>在区块中使用列表</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">任务列表</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">1.</span> 第一项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">2.</span> 第二项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 吃饭</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 睡觉</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>任务列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>吃饭</li>\n<li>睡觉</li>\n</ul>\n</blockquote>\n<p><em><strong>在列表中使用区块</strong></em></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>第一项<br><span class=\"hljs-code\">    &gt; 吃饭</span><br><span class=\"hljs-code\">    &gt; 睡觉</span><br><span class=\"hljs-bullet\">* </span>第二项<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ul>\n<li>第一项<blockquote>\n<p>吃饭<br>睡觉</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><em><strong>函数名或者小的代码片段</strong></em><br>当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。</p>\n<p>类似于下面的效果<br><code>exit()</code>函数</p>\n<p><em><strong>代码区块</strong></em></p>\n<ol>\n<li>Tab键或4个空格<br>当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键</li>\n</ol>\n<p>显示效果</p>\n<pre><code class=\"hljs\">#include &lt;stdio.h&gt;\nint main()\n&#123;\n    printf(&quot;Hello world!\\n&quot;);\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>用两个```包裹<br>显示效果<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span><br>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>有些时候，我们需要将链接引入到文档中，方便我们查看。<br>链接的使用方法是：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-selector-attr\">[链接名称]</span>(链接地址)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br><a href=\"https://www.baidu.com/\">百度首页</a></p>\n<p><a href=\"https://www.baidu.com/\">https://www.baidu.com</a></p>\n<p><em><strong>高级链接</strong></em><br>相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\">这个链接是百度的官网<span class=\"hljs-selector-attr\">[百度]</span><br><span class=\"hljs-selector-attr\">[1]</span><br>这个链接是<span class=\"hljs-selector-tag\">google</span>的官网<span class=\"hljs-selector-attr\">[google]</span><span class=\"hljs-selector-attr\">[2]</span><br><br><span class=\"hljs-selector-attr\">[1]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.baidu.com</span><br><span class=\"hljs-selector-attr\">[2]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.google.com</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br>这个链接是百度的官网<a href=\"https://www.baidu.com/\">百度官网</a><br>这个链接是google的官网<a href=\"https://www.google.com/\">google官网</a></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"markdown语法\"><a href=\"#markdown语法\" class=\"headerlink\" title=\"markdown语法\"></a>markdown语法</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。</p>\n<p>学习的参考网址在这里： <a href=\"https://www.runoob.com/markdown/md-tutorial.html\">markdown语法教程</a></p>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><p><strong>vscode</strong><br>市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。</p>\n<h3 id=\"一个关于markdown的插件\"><a href=\"#一个关于markdown的插件\" class=\"headerlink\" title=\"一个关于markdown的插件\"></a>一个关于markdown的插件</h3><p>名字叫做 <strong>Markdown Preview Enhanced</strong><br>这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><ol>\n<li>使用 = 和 - 标记一级和二级标题<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">我展示的是一级标题</span><br><span class=\"hljs-section\">==================</span><br><span class=\"hljs-section\">我展示的是二级标题</span><br><span class=\"hljs-section\">------------------</span><br></code></pre></td></tr></table></figure></li>\n<li>使用 # 号标记<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>markdown语法里对于段落并没有特殊的语法，直接编辑文字即可<br><strong>注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落</strong>  </p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-strong\">*斜体文字*</span><br><span class=\"hljs-emphasis\">_斜体文本_</span><br><span class=\"hljs-strong\">**粗体文本**</span><br><span class=\"hljs-emphasis\">__粗体文本__</span><br><span class=\"hljs-strong\">***粗斜体文本**</span>*<br><span class=\"hljs-emphasis\">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>用三个以上的星号，减号，底线即可建立分隔线</p>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>在文字的两端加上两个波浪线 ~~ 即可</p>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>通过html中的**&lt; u&gt;**来实现<br>例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">u</span>&gt;</span>带下划线文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">u</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>效果如下：<br><u>带下划线文本</u></p>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是什么？<br>脚注是对文本的补充说明<br>在markdown语法中，脚注的语法格式为：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-string\">[^要注明的文本]</span><br></code></pre></td></tr></table></figure>\n<p>实例演示：<br>输入的语法格式：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">勒布朗.詹姆斯[^简介]<br>[<span class=\"hljs-symbol\">^简介</span>]: <span class=\"hljs-link\">一位著名的篮球运动员</span><br></code></pre></td></tr></table></figure>\n\n<p>实际效果演示：</p>\n<p>勒布朗.詹姆斯[^简介]。<br> [^简介]: 美国nba篮球运动员</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><ol>\n<li>无序列表<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">*</span> 第一项<br><span class=\"hljs-bullet\">*</span> 第二项<br><span class=\"hljs-bullet\">*</span> 第三项<br><br><span class=\"hljs-bullet\">+</span> 第一项<br><span class=\"hljs-bullet\">+</span> 第二项<br><span class=\"hljs-bullet\">+</span> 第三项<br><br><span class=\"hljs-bullet\">-</span> 第一项<br><span class=\"hljs-bullet\">-</span> 第二项<br><span class=\"hljs-bullet\">-</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ol start=\"2\">\n<li>有序列表<br>使用数字并加上 . 号来表示<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项<br><span class=\"hljs-bullet\">2.</span> 第二项<br><span class=\"hljs-bullet\">3.</span> 第三项<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>显示效果：</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<p>列表嵌套</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 第一项：<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第一项嵌套的第二个元素<br><span class=\"hljs-bullet\">2.</span> 第二项：<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第一个元素<br><span class=\"hljs-bullet\">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ol>\n<li>第一项：<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><p>在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">安东尼.戴维斯</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队<br>勒布朗.詹姆斯<br>安东尼.戴维斯</p>\n</blockquote>\n<p><em><strong>区块之间可以进行嵌套</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">洛杉矶湖人队</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; 勒布朗.詹姆斯</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">&gt; &gt; 小前锋</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>洛杉矶湖人队</p>\n<blockquote>\n<p>勒布朗.詹姆斯</p>\n<blockquote>\n<p>小前锋</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><em><strong>在区块中使用列表</strong></em></p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs node-repl\"><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">任务列表</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">1.</span> 第一项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"hljs-number\">2.</span> 第二项</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 吃饭</span><br><span class=\"hljs-meta prompt_\">&gt;</span> <span class=\"language-javascript\">+ 睡觉</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<blockquote>\n<p>任务列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>吃饭</li>\n<li>睡觉</li>\n</ul>\n</blockquote>\n<p><em><strong>在列表中使用区块</strong></em></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>第一项<br><span class=\"hljs-code\">    &gt; 吃饭</span><br><span class=\"hljs-code\">    &gt; 睡觉</span><br><span class=\"hljs-bullet\">* </span>第二项<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：</p>\n<ul>\n<li>第一项<blockquote>\n<p>吃饭<br>睡觉</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><em><strong>函数名或者小的代码片段</strong></em><br>当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。</p>\n<p>类似于下面的效果<br><code>exit()</code>函数</p>\n<p><em><strong>代码区块</strong></em></p>\n<ol>\n<li>Tab键或4个空格<br>当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键</li>\n</ol>\n<p>显示效果</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n&#123;\n    printf(&quot;Hello world!\\n&quot;);\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>用两个```包裹<br>显示效果<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span><br>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>有些时候，我们需要将链接引入到文档中，方便我们查看。<br>链接的使用方法是：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-selector-attr\">[链接名称]</span>(链接地址)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br><a href=\"https://www.baidu.com/\">百度首页</a></p>\n<p><a href=\"https://www.baidu.com/\">https://www.baidu.com</a></p>\n<p><em><strong>高级链接</strong></em><br>相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\">这个链接是百度的官网<span class=\"hljs-selector-attr\">[百度]</span><br><span class=\"hljs-selector-attr\">[1]</span><br>这个链接是<span class=\"hljs-selector-tag\">google</span>的官网<span class=\"hljs-selector-attr\">[google]</span><span class=\"hljs-selector-attr\">[2]</span><br><br><span class=\"hljs-selector-attr\">[1]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.baidu.com</span><br><span class=\"hljs-selector-attr\">[2]</span>: <span class=\"hljs-selector-tag\">https</span>:<span class=\"hljs-comment\">//www.google.com</span><br></code></pre></td></tr></table></figure>\n\n<p>显示效果：<br>这个链接是百度的官网<a href=\"https://www.baidu.com/\">百度官网</a><br>这个链接是google的官网<a href=\"https://www.google.com/\">google官网</a></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2>"},{"title":"我的博客说明","date":"2023-02-09T17:01:46.000Z","_content":"## 记录内容的范围\n1. 生活\n2. 学习\n3. 敲代码\n4. 娱乐\n## 后续的优化\n本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主","source":"_posts/我的博客说明.md","raw":"---\ntitle: 我的博客说明\ndate: 2023-02-10 01:01:46\ntags:\ncategories: 博客介绍及更新日志\n---\n## 记录内容的范围\n1. 生活\n2. 学习\n3. 敲代码\n4. 娱乐\n## 后续的优化\n本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主","slug":"我的博客说明","published":1,"updated":"2024-01-04T12:47:42.491Z","_id":"clqz6m15h000vvpt033j37zn3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"记录内容的范围\"><a href=\"#记录内容的范围\" class=\"headerlink\" title=\"记录内容的范围\"></a>记录内容的范围</h2><ol>\n<li>生活</li>\n<li>学习</li>\n<li>敲代码</li>\n<li>娱乐<h2 id=\"后续的优化\"><a href=\"#后续的优化\" class=\"headerlink\" title=\"后续的优化\"></a>后续的优化</h2>本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记录内容的范围\"><a href=\"#记录内容的范围\" class=\"headerlink\" title=\"记录内容的范围\"></a>记录内容的范围</h2><ol>\n<li>生活</li>\n<li>学习</li>\n<li>敲代码</li>\n<li>娱乐<h2 id=\"后续的优化\"><a href=\"#后续的优化\" class=\"headerlink\" title=\"后续的优化\"></a>后续的优化</h2>本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主</li>\n</ol>\n"},{"title":"用51单片机控制SG90舵机","date":"2023-03-07T10:23:41.000Z","_content":"​\n什么是舵机？\n这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。\n\n百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。\n\n![](https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png)\n\n怎么驱动这个东西？\nPWM信号\n\n什么是PWM信号？\nPWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进\n行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通\n过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的\n时间占据整个信号周期的百分比，例如方波的占空比就是50%.\n使用PWM来控制舵机，理解占空比是关键。\n![](https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg)\n\n如何实现PWM信号输出？\n有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。\n\n怎么控制舵机？\n向黄色信号线“灌入”PWM信号\n\n![](https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png)\n\n怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。\n\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n编程实现\n用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。\n\n先来配置定时器\n```C\nvoid Time0Init()\n{\n    //定时器模式选择\n    TMOD = 0X01;\n    //给定初始值  我们先定一个0.5ms\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    //开启定时器\n    TF0 = 0;\n    TR0 = 1;\n}\n```\n定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。\n\n所以完整的定时器配置应该是这样的：\n```C\nvoid Time0Init()\n{\n    TMOD = 0X01;\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    TR0 = 1;\n    TF0 = 0;\n    //开启定时器0中断\n    ET0 = 1;\n    //开启总中断\n    EA = 1; \n}\n```\n有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：\n\n占空比：\n\n就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n中断处理函数\n```C\nvoid Time0Handler() interrupt 1\n{\n    cnt++;  //统计爆表次数\n    //重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    if(cnt < jd)   //jd  角度\n    {\n        sg90_con = 1;  //给舵机高电平\n    }else{\n        sg90_con = 0;  //给舵机低电平\n    }\n\n    if(cnt == 40)   //一个周期20ms   0.5*40\n    {\n        cnt = 0;\n    }\n}\n```\n主函数\n```C\nvoid main()\n{\n    jd = 1;\n    Time0Init();  //定时器初始化\n    sg90_con = 1; //舵机初始状态是高电平\n    \n    while(1)\n    { \n        jd = 3;    //转动90度\n        cnt = 0;\n        Delay2000ms();\n        jd = 1;\n        cnt = 0;\n        Delay2000ms();\n    }\n    \n}\n```\n全部代码：\n```C\n#include \"reg52.h\"\n\nsbit sg90_con = P1^1;\n\nint jd;\nint cnt = 0;\n\nvoid Delay2000ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\t\n\ti = 15;\n\tj = 2;\n\tk = 235;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\nvoid Delay300ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\n\ti = 3;\n\tj = 26;\n\tk = 223;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\n\nvoid Time0Init()\n{\n\t\n\tTMOD = 0X01;\n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\t\n\tTR0 = 1;\n\tTF0 = 0;\n\t\n\tET0 = 1;\n\t\n\tEA = 1;\n\t\n}\nvoid main()\n{\n\t1\n\tjd = 1;  \n\tTime0Init();  \n\tsg90_con = 1;  \n\t\n\twhile(1)\n\t{\n\t\tjd = 3; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t\tjd = 1; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t}\n}\n\nvoid Time0Handler() interrupt 1\n{\n\tcnt++;  \n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\tif(cnt < jd)   \n\t{\n\t\tsg90_con = 1; \n\t}else{\n\t\tsg90_con = 0;\t\t\n\t}\n\t\n\tif(cnt == 40)   \n\t{\n\t\tcnt = 0;\n\t\tsg90_con = 1;\n\t}\n}\n```\n\n​","source":"_posts/用51单片机控制SG90舵机.md","raw":"---\ntitle: 用51单片机控制SG90舵机\ndate: 2023-03-07 18:23:41\ntags:\ncategories: 51单片机\n---\n​\n什么是舵机？\n这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。\n\n百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。\n\n![](https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png)\n\n怎么驱动这个东西？\nPWM信号\n\n什么是PWM信号？\nPWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进\n行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通\n过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的\n时间占据整个信号周期的百分比，例如方波的占空比就是50%.\n使用PWM来控制舵机，理解占空比是关键。\n![](https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg)\n\n如何实现PWM信号输出？\n有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。\n\n怎么控制舵机？\n向黄色信号线“灌入”PWM信号\n\n![](https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png)\n\n怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。\n\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n编程实现\n用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。\n\n先来配置定时器\n```C\nvoid Time0Init()\n{\n    //定时器模式选择\n    TMOD = 0X01;\n    //给定初始值  我们先定一个0.5ms\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    //开启定时器\n    TF0 = 0;\n    TR0 = 1;\n}\n```\n定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。\n\n所以完整的定时器配置应该是这样的：\n```C\nvoid Time0Init()\n{\n    TMOD = 0X01;\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    TR0 = 1;\n    TF0 = 0;\n    //开启定时器0中断\n    ET0 = 1;\n    //开启总中断\n    EA = 1; \n}\n```\n有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：\n\n占空比：\n\n就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比\n 0.5ms-------------0度； 2.5% 对应函数中占空比为250\n\n1.0ms------------45度； 5.0% 对应函数中占空比为500\n\n1.5ms------------90度； 7.5% 对应函数中占空比为750\n2.0ms-----------135度； 10.0% 对应函数中占空比为1000\n2.5ms-----------180度； 12.5% 对应函数中占空比为1250\n中断处理函数\n```C\nvoid Time0Handler() interrupt 1\n{\n    cnt++;  //统计爆表次数\n    //重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值\n    TL0 = 0X33;\n    TH0 = 0XFE;\n    if(cnt < jd)   //jd  角度\n    {\n        sg90_con = 1;  //给舵机高电平\n    }else{\n        sg90_con = 0;  //给舵机低电平\n    }\n\n    if(cnt == 40)   //一个周期20ms   0.5*40\n    {\n        cnt = 0;\n    }\n}\n```\n主函数\n```C\nvoid main()\n{\n    jd = 1;\n    Time0Init();  //定时器初始化\n    sg90_con = 1; //舵机初始状态是高电平\n    \n    while(1)\n    { \n        jd = 3;    //转动90度\n        cnt = 0;\n        Delay2000ms();\n        jd = 1;\n        cnt = 0;\n        Delay2000ms();\n    }\n    \n}\n```\n全部代码：\n```C\n#include \"reg52.h\"\n\nsbit sg90_con = P1^1;\n\nint jd;\nint cnt = 0;\n\nvoid Delay2000ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\t\n\ti = 15;\n\tj = 2;\n\tk = 235;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\nvoid Delay300ms()\t\t//@11.0592MHz\n{\n\tunsigned char i, j, k;\n\n\n\ti = 3;\n\tj = 26;\n\tk = 223;\n\tdo\n\t{\n\t\tdo\n\t\t{\n\t\t\twhile (--k);\n\t\t} while (--j);\n\t} while (--i);\n}\n\n\nvoid Time0Init()\n{\n\t\n\tTMOD = 0X01;\n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\t\n\tTR0 = 1;\n\tTF0 = 0;\n\t\n\tET0 = 1;\n\t\n\tEA = 1;\n\t\n}\nvoid main()\n{\n\t1\n\tjd = 1;  \n\tTime0Init();  \n\tsg90_con = 1;  \n\t\n\twhile(1)\n\t{\n\t\tjd = 3; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t\tjd = 1; \n\t\tcnt = 0;\n\t\tDelay2000ms();\n\t}\n}\n\nvoid Time0Handler() interrupt 1\n{\n\tcnt++;  \n\t\n\tTH0 = 0XFE;\n\tTL0 = 0X33;\n\tif(cnt < jd)   \n\t{\n\t\tsg90_con = 1; \n\t}else{\n\t\tsg90_con = 0;\t\t\n\t}\n\t\n\tif(cnt == 40)   \n\t{\n\t\tcnt = 0;\n\t\tsg90_con = 1;\n\t}\n}\n```\n\n​","slug":"用51单片机控制SG90舵机","published":1,"updated":"2024-01-04T12:47:42.492Z","_id":"clqz6m15i000xvpt0841xaltz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>​<br>什么是舵机？<br>这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。</p>\n<p>百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png\"></p>\n<p>怎么驱动这个东西？<br>PWM信号</p>\n<p>什么是PWM信号？<br>PWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进<br>行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通<br>过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的<br>时间占据整个信号周期的百分比，例如方波的占空比就是50%.<br>使用PWM来控制舵机，理解占空比是关键。<br><img src=\"https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg\"></p>\n<p>如何实现PWM信号输出？<br>有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。</p>\n<p>怎么控制舵机？<br>向黄色信号线“灌入”PWM信号</p>\n<p><img src=\"https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png\"></p>\n<p>怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。</p>\n<p> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>编程实现<br>用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。</p>\n<p>先来配置定时器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//定时器模式选择</span><br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    <span class=\"hljs-comment\">//给定初始值  我们先定一个0.5ms</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-comment\">//开启定时器</span><br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。</p>\n<p>所以完整的定时器配置应该是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//开启定时器0中断</span><br>    ET0 = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-comment\">//开启总中断</span><br>    EA = <span class=\"hljs-number\">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：</p>\n<p>占空比：</p>\n<p>就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比<br> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>中断处理函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>    cnt++;  <span class=\"hljs-comment\">//统计爆表次数</span><br>    <span class=\"hljs-comment\">//重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <span class=\"hljs-comment\">//jd  角度</span><br>    &#123;<br>        sg90_con = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//给舵机高电平</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        sg90_con = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">//给舵机低电平</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <span class=\"hljs-comment\">//一个周期20ms   0.5*40</span><br>    &#123;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>主函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    jd = <span class=\"hljs-number\">1</span>;<br>    Time0Init();  <span class=\"hljs-comment\">//定时器初始化</span><br>    sg90_con = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//舵机初始状态是高电平</span><br>    <br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>    &#123; <br>        jd = <span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">//转动90度</span><br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>        jd = <span class=\"hljs-number\">1</span>;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>全部代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;reg52.h&quot;</span></span><br><br>sbit sg90_con = P1^<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-type\">int</span> jd;<br><span class=\"hljs-type\">int</span> cnt = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay2000ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br>\t<br>\ti = <span class=\"hljs-number\">15</span>;<br>\tj = <span class=\"hljs-number\">2</span>;<br>\tk = <span class=\"hljs-number\">235</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay300ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br><br>\ti = <span class=\"hljs-number\">3</span>;<br>\tj = <span class=\"hljs-number\">26</span>;<br>\tk = <span class=\"hljs-number\">223</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<br>\tTMOD = <span class=\"hljs-number\">0X01</span>;<br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<br>\tTR0 = <span class=\"hljs-number\">1</span>;<br>\tTF0 = <span class=\"hljs-number\">0</span>;<br>\t<br>\tET0 = <span class=\"hljs-number\">1</span>;<br>\t<br>\tEA = <span class=\"hljs-number\">1</span>;<br>\t<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<span class=\"hljs-number\">1</span><br>\tjd = <span class=\"hljs-number\">1</span>;  <br>\tTime0Init();  <br>\tsg90_con = <span class=\"hljs-number\">1</span>;  <br>\t<br>\t<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>\t&#123;<br>\t\tjd = <span class=\"hljs-number\">3</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t\tjd = <span class=\"hljs-number\">1</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>\tcnt++;  <br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <br>\t&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>; <br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">0</span>;\t\t<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <br>\t&#123;<br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​<br>什么是舵机？<br>这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。</p>\n<p>百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png\"></p>\n<p>怎么驱动这个东西？<br>PWM信号</p>\n<p>什么是PWM信号？<br>PWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进<br>行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通<br>过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的<br>时间占据整个信号周期的百分比，例如方波的占空比就是50%.<br>使用PWM来控制舵机，理解占空比是关键。<br><img src=\"https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg\"></p>\n<p>如何实现PWM信号输出？<br>有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。</p>\n<p>怎么控制舵机？<br>向黄色信号线“灌入”PWM信号</p>\n<p><img src=\"https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png\"></p>\n<p>怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。</p>\n<p> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>编程实现<br>用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。</p>\n<p>先来配置定时器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-comment\">//定时器模式选择</span><br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    <span class=\"hljs-comment\">//给定初始值  我们先定一个0.5ms</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-comment\">//开启定时器</span><br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。</p>\n<p>所以完整的定时器配置应该是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>    TMOD = <span class=\"hljs-number\">0X01</span>;<br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    TR0 = <span class=\"hljs-number\">1</span>;<br>    TF0 = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//开启定时器0中断</span><br>    ET0 = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-comment\">//开启总中断</span><br>    EA = <span class=\"hljs-number\">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：</p>\n<p>占空比：</p>\n<p>就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比<br> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p>\n<p>1.0ms————45度； 5.0% 对应函数中占空比为500</p>\n<p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>中断处理函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>    cnt++;  <span class=\"hljs-comment\">//统计爆表次数</span><br>    <span class=\"hljs-comment\">//重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值</span><br>    TL0 = <span class=\"hljs-number\">0X33</span>;<br>    TH0 = <span class=\"hljs-number\">0XFE</span>;<br>    <span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <span class=\"hljs-comment\">//jd  角度</span><br>    &#123;<br>        sg90_con = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//给舵机高电平</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        sg90_con = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">//给舵机低电平</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <span class=\"hljs-comment\">//一个周期20ms   0.5*40</span><br>    &#123;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>主函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    jd = <span class=\"hljs-number\">1</span>;<br>    Time0Init();  <span class=\"hljs-comment\">//定时器初始化</span><br>    sg90_con = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//舵机初始状态是高电平</span><br>    <br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>    &#123; <br>        jd = <span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">//转动90度</span><br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>        jd = <span class=\"hljs-number\">1</span>;<br>        cnt = <span class=\"hljs-number\">0</span>;<br>        Delay2000ms();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>全部代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;reg52.h&quot;</span></span><br><br>sbit sg90_con = P1^<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-type\">int</span> jd;<br><span class=\"hljs-type\">int</span> cnt = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay2000ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br>\t<br>\ti = <span class=\"hljs-number\">15</span>;<br>\tj = <span class=\"hljs-number\">2</span>;<br>\tk = <span class=\"hljs-number\">235</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Delay300ms</span><span class=\"hljs-params\">()</span>\t\t<span class=\"hljs-comment\">//@11.0592MHz</span><br>&#123;<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> i, j, k;<br><br><br>\ti = <span class=\"hljs-number\">3</span>;<br>\tj = <span class=\"hljs-number\">26</span>;<br>\tk = <span class=\"hljs-number\">223</span>;<br>\t<span class=\"hljs-keyword\">do</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">do</span><br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span> (--k);<br>\t\t&#125; <span class=\"hljs-keyword\">while</span> (--j);<br>\t&#125; <span class=\"hljs-keyword\">while</span> (--i);<br>&#125;<br><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Init</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<br>\tTMOD = <span class=\"hljs-number\">0X01</span>;<br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<br>\tTR0 = <span class=\"hljs-number\">1</span>;<br>\tTF0 = <span class=\"hljs-number\">0</span>;<br>\t<br>\tET0 = <span class=\"hljs-number\">1</span>;<br>\t<br>\tEA = <span class=\"hljs-number\">1</span>;<br>\t<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<span class=\"hljs-number\">1</span><br>\tjd = <span class=\"hljs-number\">1</span>;  <br>\tTime0Init();  <br>\tsg90_con = <span class=\"hljs-number\">1</span>;  <br>\t<br>\t<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>\t&#123;<br>\t\tjd = <span class=\"hljs-number\">3</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t\tjd = <span class=\"hljs-number\">1</span>; <br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tDelay2000ms();<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Time0Handler</span><span class=\"hljs-params\">()</span> interrupt 1<br>&#123;<br>\tcnt++;  <br>\t<br>\tTH0 = <span class=\"hljs-number\">0XFE</span>;<br>\tTL0 = <span class=\"hljs-number\">0X33</span>;<br>\t<span class=\"hljs-keyword\">if</span>(cnt &lt; jd)   <br>\t&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>; <br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>\t\tsg90_con = <span class=\"hljs-number\">0</span>;\t\t<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">if</span>(cnt == <span class=\"hljs-number\">40</span>)   <br>\t&#123;<br>\t\tcnt = <span class=\"hljs-number\">0</span>;<br>\t\tsg90_con = <span class=\"hljs-number\">1</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​</p>\n"},{"title":"学习日志","date":"2023-02-15T15:41:45.000Z","_content":"\n# 更新日志\n\n## 2023年12月27日\n\n完成任务：\n    1. Github加速\n    2. 在Mac电脑上跑通Git\n    3. 继续完善Java入门项目：抽奖网站","source":"_posts/更新日志.md","raw":"---\ntitle: 学习日志\ndate: 2023-02-15 23:41:45\ntags:\ncategories: 博客介绍及更新日志\n---\n\n# 更新日志\n\n## 2023年12月27日\n\n完成任务：\n    1. Github加速\n    2. 在Mac电脑上跑通Git\n    3. 继续完善Java入门项目：抽奖网站","slug":"更新日志","published":1,"updated":"2024-01-04T12:47:42.491Z","_id":"clqz6m15i0010vpt0a50ic66v","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><h2 id=\"2023年12月27日\"><a href=\"#2023年12月27日\" class=\"headerlink\" title=\"2023年12月27日\"></a>2023年12月27日</h2><p>完成任务：<br>    1. Github加速<br>    2. 在Mac电脑上跑通Git<br>    3. 继续完善Java入门项目：抽奖网站</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><h2 id=\"2023年12月27日\"><a href=\"#2023年12月27日\" class=\"headerlink\" title=\"2023年12月27日\"></a>2023年12月27日</h2><p>完成任务：<br>    1. Github加速<br>    2. 在Mac电脑上跑通Git<br>    3. 继续完善Java入门项目：抽奖网站</p>\n"},{"title":"项目计划","date":"2023-05-06T14:31:19.000Z","_content":"\n# 2024寒假项目列表   \n\n## C语言版贪吃蛇游戏\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n## 基于STM32的智能宠物喂食系统\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于STM32的智能小车\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于ARM+Linux的项目（待定）\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n","source":"_posts/项目计划.md","raw":"---\ntitle: 项目计划\ndate: 2023-05-06 22:31:19\ntags:\ncategories: 学习计划\n---\n\n# 2024寒假项目列表   \n\n## C语言版贪吃蛇游戏\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n## 基于STM32的智能宠物喂食系统\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于STM32的智能小车\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n## 基于ARM+Linux的项目（待定）\n### 状态\n未完成\n### 项目文档\n[点击此处跳转至该项目文档]()\n### 项目源码地址\n[点击此处跳转至该项目仓库]()\n\n\n","slug":"项目计划","published":1,"updated":"2024-01-04T12:54:55.799Z","_id":"clqz6m15i0012vpt07nmwftqs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024寒假项目列表\"><a href=\"#2024寒假项目列表\" class=\"headerlink\" title=\"2024寒假项目列表\"></a>2024寒假项目列表</h1><h2 id=\"C语言版贪吃蛇游戏\"><a href=\"#C语言版贪吃蛇游戏\" class=\"headerlink\" title=\"C语言版贪吃蛇游戏\"></a>C语言版贪吃蛇游戏</h2><h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档\"><a href=\"#项目文档\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能宠物喂食系统\"><a href=\"#基于STM32的智能宠物喂食系统\" class=\"headerlink\" title=\"基于STM32的智能宠物喂食系统\"></a>基于STM32的智能宠物喂食系统</h2><h3 id=\"状态-1\"><a href=\"#状态-1\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-1\"><a href=\"#项目文档-1\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-1\"><a href=\"#项目源码地址-1\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能小车\"><a href=\"#基于STM32的智能小车\" class=\"headerlink\" title=\"基于STM32的智能小车\"></a>基于STM32的智能小车</h2><h3 id=\"状态-2\"><a href=\"#状态-2\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-2\"><a href=\"#项目文档-2\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-2\"><a href=\"#项目源码地址-2\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于ARM-Linux的项目（待定）\"><a href=\"#基于ARM-Linux的项目（待定）\" class=\"headerlink\" title=\"基于ARM+Linux的项目（待定）\"></a>基于ARM+Linux的项目（待定）</h2><h3 id=\"状态-3\"><a href=\"#状态-3\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-3\"><a href=\"#项目文档-3\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-3\"><a href=\"#项目源码地址-3\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2024寒假项目列表\"><a href=\"#2024寒假项目列表\" class=\"headerlink\" title=\"2024寒假项目列表\"></a>2024寒假项目列表</h1><h2 id=\"C语言版贪吃蛇游戏\"><a href=\"#C语言版贪吃蛇游戏\" class=\"headerlink\" title=\"C语言版贪吃蛇游戏\"></a>C语言版贪吃蛇游戏</h2><h3 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档\"><a href=\"#项目文档\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址\"><a href=\"#项目源码地址\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能宠物喂食系统\"><a href=\"#基于STM32的智能宠物喂食系统\" class=\"headerlink\" title=\"基于STM32的智能宠物喂食系统\"></a>基于STM32的智能宠物喂食系统</h2><h3 id=\"状态-1\"><a href=\"#状态-1\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-1\"><a href=\"#项目文档-1\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-1\"><a href=\"#项目源码地址-1\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于STM32的智能小车\"><a href=\"#基于STM32的智能小车\" class=\"headerlink\" title=\"基于STM32的智能小车\"></a>基于STM32的智能小车</h2><h3 id=\"状态-2\"><a href=\"#状态-2\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-2\"><a href=\"#项目文档-2\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-2\"><a href=\"#项目源码地址-2\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n<h2 id=\"基于ARM-Linux的项目（待定）\"><a href=\"#基于ARM-Linux的项目（待定）\" class=\"headerlink\" title=\"基于ARM+Linux的项目（待定）\"></a>基于ARM+Linux的项目（待定）</h2><h3 id=\"状态-3\"><a href=\"#状态-3\" class=\"headerlink\" title=\"状态\"></a>状态</h3><p>未完成</p>\n<h3 id=\"项目文档-3\"><a href=\"#项目文档-3\" class=\"headerlink\" title=\"项目文档\"></a>项目文档</h3><p><a href=\"\">点击此处跳转至该项目文档</a></p>\n<h3 id=\"项目源码地址-3\"><a href=\"#项目源码地址-3\" class=\"headerlink\" title=\"项目源码地址\"></a>项目源码地址</h3><p><a href=\"\">点击此处跳转至该项目仓库</a></p>\n"},{"title":"蓝牙Wi-Fi助手","date":"2023-11-29T12:59:22.000Z","_content":"\n# 蓝牙Wi-Fi助手\n\n## Android APP如何和硬件进行通信？\n\n开发板搭配蓝牙模块或者WI-FI模块。\n\nWI-FI模块常用型号：ESP8266\n蓝牙模块常用型号：HC08\n\n\n**esp8266的三种工作模式：**\n1. station（客户端模式）：类似于手机，小爱音响等设备（client）\n2. AP（接入点模式）：类似于路由器(server)，可以让其他设备访问\n3. station+AP（客户端+接入点模式）\n\n\n**使用手机APP连接WI-FI模块控制单片机硬件的逻辑：**\n将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能\n\n\n**使用手机APP连接蓝牙模块控制单片机硬件的逻辑：**\n![蓝牙连接逻辑图](https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png)\n\n\n## 逻辑设计\n### 主界面\n可选**WI-FI**模式和**蓝牙**模式\n\nWI-FI模式下端口号和IP地址输入的审核逻辑：\n\n1. 若端口号和IP地址输入为空，则提示对应异常\n2. 输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n蓝牙模式下的操作逻辑：\n搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n### 操作界面\n1. 显示当前连接的IP地址/蓝牙名称\n2. 提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。\n3. 返回值显示框\n\n## Android APP WI-FI部分实现\n\n引用：\n[AndroidWIFI使用简述](https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142^v96^pc_search_result_base5&spm=1018.2226.3001.4187) ----（xml配置比较详细）\n[APP和ESP8266进行联网传输](https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142^v96^pc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187)--(xml只配置了网络)\n**配置项目的静态权限**\n在 **AndroidManifest.xml** 增加代码\n```\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```\n\n在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。\n\n但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。\n```\n        <!--Android 6 ~ 12 使用定位权限-->\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"\n        tools:ignore=\"CoarseFineLocation\" />\n\n    <!--Android 13及以上使用权限-->\n    <uses-permission\n        android:name=\"android.permission.NEARBY_WIFI_DEVICES\"\n        android:usesPermissionFlags=\"neverForLocation\"\n        tools:targetApi=\"Tiramisu\" />\n\n```\n\n## Android Studio安装(mac)\n\n[参考文章](https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n[参考文章2](https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n\n\n","source":"_posts/蓝牙Wi-Fi助手.md","raw":"---\ntitle: 蓝牙Wi-Fi助手\ndate: 2023-11-29 20:59:22\ntags:\ncategories: APP & 小程序\n---\n\n# 蓝牙Wi-Fi助手\n\n## Android APP如何和硬件进行通信？\n\n开发板搭配蓝牙模块或者WI-FI模块。\n\nWI-FI模块常用型号：ESP8266\n蓝牙模块常用型号：HC08\n\n\n**esp8266的三种工作模式：**\n1. station（客户端模式）：类似于手机，小爱音响等设备（client）\n2. AP（接入点模式）：类似于路由器(server)，可以让其他设备访问\n3. station+AP（客户端+接入点模式）\n\n\n**使用手机APP连接WI-FI模块控制单片机硬件的逻辑：**\n将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能\n\n\n**使用手机APP连接蓝牙模块控制单片机硬件的逻辑：**\n![蓝牙连接逻辑图](https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png)\n\n\n## 逻辑设计\n### 主界面\n可选**WI-FI**模式和**蓝牙**模式\n\nWI-FI模式下端口号和IP地址输入的审核逻辑：\n\n1. 若端口号和IP地址输入为空，则提示对应异常\n2. 输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n蓝牙模式下的操作逻辑：\n搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错\n\n### 操作界面\n1. 显示当前连接的IP地址/蓝牙名称\n2. 提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。\n3. 返回值显示框\n\n## Android APP WI-FI部分实现\n\n引用：\n[AndroidWIFI使用简述](https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142^v96^pc_search_result_base5&spm=1018.2226.3001.4187) ----（xml配置比较详细）\n[APP和ESP8266进行联网传输](https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142^v96^pc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187)--(xml只配置了网络)\n**配置项目的静态权限**\n在 **AndroidManifest.xml** 增加代码\n```\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```\n\n在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。\n\n但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。\n```\n        <!--Android 6 ~ 12 使用定位权限-->\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"\n        tools:ignore=\"CoarseFineLocation\" />\n\n    <!--Android 13及以上使用权限-->\n    <uses-permission\n        android:name=\"android.permission.NEARBY_WIFI_DEVICES\"\n        android:usesPermissionFlags=\"neverForLocation\"\n        tools:targetApi=\"Tiramisu\" />\n\n```\n\n## Android Studio安装(mac)\n\n[参考文章](https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n[参考文章2](https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142^v96^pc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187)\n\n\n\n","slug":"蓝牙Wi-Fi助手","published":1,"updated":"2024-01-04T12:47:42.492Z","_id":"clqz6m15j0015vpt05q6qhmum","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h1><h2 id=\"Android-APP如何和硬件进行通信？\"><a href=\"#Android-APP如何和硬件进行通信？\" class=\"headerlink\" title=\"Android APP如何和硬件进行通信？\"></a>Android APP如何和硬件进行通信？</h2><p>开发板搭配蓝牙模块或者WI-FI模块。</p>\n<p>WI-FI模块常用型号：ESP8266<br>蓝牙模块常用型号：HC08</p>\n<p><strong>esp8266的三种工作模式：</strong></p>\n<ol>\n<li>station（客户端模式）：类似于手机，小爱音响等设备（client）</li>\n<li>AP（接入点模式）：类似于路由器(server)，可以让其他设备访问</li>\n<li>station+AP（客户端+接入点模式）</li>\n</ol>\n<p><strong>使用手机APP连接WI-FI模块控制单片机硬件的逻辑：</strong><br>将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能</p>\n<p><strong>使用手机APP连接蓝牙模块控制单片机硬件的逻辑：</strong><br><img src=\"https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png\" alt=\"蓝牙连接逻辑图\"></p>\n<h2 id=\"逻辑设计\"><a href=\"#逻辑设计\" class=\"headerlink\" title=\"逻辑设计\"></a>逻辑设计</h2><h3 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h3><p>可选<strong>WI-FI</strong>模式和<strong>蓝牙</strong>模式</p>\n<p>WI-FI模式下端口号和IP地址输入的审核逻辑：</p>\n<ol>\n<li>若端口号和IP地址输入为空，则提示对应异常</li>\n<li>输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</li>\n</ol>\n<p>蓝牙模式下的操作逻辑：<br>搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</p>\n<h3 id=\"操作界面\"><a href=\"#操作界面\" class=\"headerlink\" title=\"操作界面\"></a>操作界面</h3><ol>\n<li>显示当前连接的IP地址/蓝牙名称</li>\n<li>提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。</li>\n<li>返回值显示框</li>\n</ol>\n<h2 id=\"Android-APP-WI-FI部分实现\"><a href=\"#Android-APP-WI-FI部分实现\" class=\"headerlink\" title=\"Android APP WI-FI部分实现\"></a>Android APP WI-FI部分实现</h2><p>引用：<br><a href=\"https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142%5Ev96%5Epc_search_result_base5&spm=1018.2226.3001.4187\">AndroidWIFI使用简述</a> —-（xml配置比较详细）<br><a href=\"https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187\">APP和ESP8266进行联网传输</a>–(xml只配置了网络)<br><strong>配置项目的静态权限</strong><br>在 <strong>AndroidManifest.xml</strong> 增加代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。</p>\n<p>但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">    <span class=\"hljs-comment\">&lt;!--Android 6 ~ 12 使用定位权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:ignore</span>=<span class=\"hljs-string\">&quot;CoarseFineLocation&quot;</span> /&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--Android 13及以上使用权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.NEARBY_WIFI_DEVICES&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:usesPermissionFlags</span>=<span class=\"hljs-string\">&quot;neverForLocation&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:targetApi</span>=<span class=\"hljs-string\">&quot;Tiramisu&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Android-Studio安装-mac\"><a href=\"#Android-Studio安装-mac\" class=\"headerlink\" title=\"Android Studio安装(mac)\"></a>Android Studio安装(mac)</h2><p><a href=\"https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"蓝牙Wi-Fi助手\"><a href=\"#蓝牙Wi-Fi助手\" class=\"headerlink\" title=\"蓝牙Wi-Fi助手\"></a>蓝牙Wi-Fi助手</h1><h2 id=\"Android-APP如何和硬件进行通信？\"><a href=\"#Android-APP如何和硬件进行通信？\" class=\"headerlink\" title=\"Android APP如何和硬件进行通信？\"></a>Android APP如何和硬件进行通信？</h2><p>开发板搭配蓝牙模块或者WI-FI模块。</p>\n<p>WI-FI模块常用型号：ESP8266<br>蓝牙模块常用型号：HC08</p>\n<p><strong>esp8266的三种工作模式：</strong></p>\n<ol>\n<li>station（客户端模式）：类似于手机，小爱音响等设备（client）</li>\n<li>AP（接入点模式）：类似于路由器(server)，可以让其他设备访问</li>\n<li>station+AP（客户端+接入点模式）</li>\n</ol>\n<p><strong>使用手机APP连接WI-FI模块控制单片机硬件的逻辑：</strong><br>将WiFi模块设置成了AP模式下的TCP Server模式，就相当于一个路由器，并配置好WiFi模块的IP地址和端口号，就可以通过手机APP连接这个WiFi模块，并相互传输数据，进而就可以控制单片机所连接的硬件设备，实现简易物联网的功能</p>\n<p><strong>使用手机APP连接蓝牙模块控制单片机硬件的逻辑：</strong><br><img src=\"https://img-blog.csdnimg.cn/45db4cbceee945de801785b487aeae66.png\" alt=\"蓝牙连接逻辑图\"></p>\n<h2 id=\"逻辑设计\"><a href=\"#逻辑设计\" class=\"headerlink\" title=\"逻辑设计\"></a>逻辑设计</h2><h3 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h3><p>可选<strong>WI-FI</strong>模式和<strong>蓝牙</strong>模式</p>\n<p>WI-FI模式下端口号和IP地址输入的审核逻辑：</p>\n<ol>\n<li>若端口号和IP地址输入为空，则提示对应异常</li>\n<li>输入端口号和IP地址后，开始进行连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</li>\n</ol>\n<p>蓝牙模式下的操作逻辑：<br>搜索按钮直接显示附近的蓝牙信号源，点击后尝试连接，连接成功直接跳转到操作界面；连接失败则停留在主界面，并报错</p>\n<h3 id=\"操作界面\"><a href=\"#操作界面\" class=\"headerlink\" title=\"操作界面\"></a>操作界面</h3><ol>\n<li>显示当前连接的IP地址/蓝牙名称</li>\n<li>提供两个输入框，一个可以直接输入AT指令，一个可以选择单片机操作模型。</li>\n<li>返回值显示框</li>\n</ol>\n<h2 id=\"Android-APP-WI-FI部分实现\"><a href=\"#Android-APP-WI-FI部分实现\" class=\"headerlink\" title=\"Android APP WI-FI部分实现\"></a>Android APP WI-FI部分实现</h2><p>引用：<br><a href=\"https://blog.csdn.net/qq_38436214/article/details/128786627?ops_request_misc=&request_id=&biz_id=102&utm_term=Android%20APP%E8%BF%9E%E6%8E%A5WI-FI&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-128786627.142%5Ev96%5Epc_search_result_base5&spm=1018.2226.3001.4187\">AndroidWIFI使用简述</a> —-（xml配置比较详细）<br><a href=\"https://blog.csdn.net/qq_45488746/article/details/124730926?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127665016800227444165%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=170127665016800227444165&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-124730926-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=Android%20APP%E5%90%91esp8266%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE&spm=1018.2226.3001.4187\">APP和ESP8266进行联网传输</a>–(xml只配置了网络)<br><strong>配置项目的静态权限</strong><br>在 <strong>AndroidManifest.xml</strong> 增加代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>在Android13大版本更新后，Google 将 Wi-Fi 扫描与位置相关内容分离， Android 13 为管理设备与周围 Wi-Fi 热点连接的应用添加 NEARBY_WIFI_DEVICES 运行时权限 (属于NEARBY_DEVICES权限组)，从而在不需要 ACCESS_FINE_LOCATION 权限的情况下，也可以让应用访问附近的 Wi-Fi 设备。</p>\n<p>但为了考虑Android13版本以下的机型，所以项目中仍然需要配置定位权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">    <span class=\"hljs-comment\">&lt;!--Android 6 ~ 12 使用定位权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:ignore</span>=<span class=\"hljs-string\">&quot;CoarseFineLocation&quot;</span> /&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--Android 13及以上使用权限--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.NEARBY_WIFI_DEVICES&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">android:usesPermissionFlags</span>=<span class=\"hljs-string\">&quot;neverForLocation&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">tools:targetApi</span>=<span class=\"hljs-string\">&quot;Tiramisu&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Android-Studio安装-mac\"><a href=\"#Android-Studio安装-mac\" class=\"headerlink\" title=\"Android Studio安装(mac)\"></a>Android Studio安装(mac)</h2><p><a href=\"https://blog.csdn.net/ChenYu_2511/article/details/129316950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-129316950-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38091632/article/details/132174988?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170127730316800215062578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170127730316800215062578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-132174988-null-null.142%5Ev96%5Epc_search_result_base5&utm_term=mac%20M2%E5%AE%89%E8%A3%85Android%20Studio&spm=1018.2226.3001.4187\">参考文章2</a></p>\n"},{"title":"科学上网","date":"2023-03-10T09:37:32.000Z","_content":"","source":"_posts/科学上网.md","raw":"---\ntitle: 科学上网\ndate: 2023-03-10 17:37:32\ntags:\n---\n","slug":"科学上网","published":1,"updated":"2024-01-04T12:47:42.492Z","_id":"clqz6m15j0016vpt00i0s8a9u","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"C++ QT","date":"2024-01-04T16:33:49.000Z","_content":"","source":"_posts/C-QT.md","raw":"---\ntitle: C++ QT\ndate: 2024-01-05 00:33:49\ntags:\n---\n","slug":"C-QT","published":1,"updated":"2024-01-04T16:33:49.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqzfi28i0000rcv05manf2ey","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"clqz6m1590001vpt02cue1lrx","category_id":"clqz6m15c0004vpt0b53y1jqd","_id":"clqz6m15e000bvpt0b6yt5k7k"},{"post_id":"clqz6m15b0003vpt07bmr82ro","category_id":"clqz6m15d0008vpt02shnbozi","_id":"clqz6m15f000fvpt0ajjzclhu"},{"post_id":"clqz6m15e000dvpt0b6iuckoz","category_id":"clqz6m15e000cvpt0d99873hf","_id":"clqz6m15f000jvpt066g0amm4"},{"post_id":"clqz6m15c0005vpt0grsrehx4","category_id":"clqz6m15e000cvpt0d99873hf","_id":"clqz6m15g000mvpt0eov669w8"},{"post_id":"clqz6m15d0006vpt07jfc3bw5","category_id":"clqz6m15f000gvpt08kf5b8yc","_id":"clqz6m15g000ovpt0gyyc6duc"},{"post_id":"clqz6m15g000nvpt01xb7h309","category_id":"clqz6m15d0008vpt02shnbozi","_id":"clqz6m15h000tvpt07c3c0kyz"},{"post_id":"clqz6m15d0009vpt074p8fow4","category_id":"clqz6m15f000kvpt0czak2bjy","_id":"clqz6m15i000wvpt0a2p9e324"},{"post_id":"clqz6m15e000avpt040qxfkrm","category_id":"clqz6m15f000kvpt0czak2bjy","_id":"clqz6m15i000zvpt0h9a26nby"},{"post_id":"clqz6m15h000svpt085imdrsv","category_id":"clqz6m15e000cvpt0d99873hf","_id":"clqz6m15i0011vpt0h6c69f52"},{"post_id":"clqz6m15e000evpt0h8bb4hz3","category_id":"clqz6m15f000kvpt0czak2bjy","_id":"clqz6m15j0014vpt06fogak7r"},{"post_id":"clqz6m15f000hvpt0c5d76mjl","category_id":"clqz6m15f000kvpt0czak2bjy","_id":"clqz6m15j0017vpt07oe41i64"},{"post_id":"clqz6m15j0015vpt05q6qhmum","category_id":"clqz6m15c0004vpt0b53y1jqd","_id":"clqz6m15j0019vpt0gnuaghbp"},{"post_id":"clqz6m15f000ivpt0g0hd3faw","category_id":"clqz6m15i0013vpt09y88hfmf","_id":"clqz6m15j001bvpt08vdn6wxp"},{"post_id":"clqz6m15g000pvpt001pjhxkc","category_id":"clqz6m15j0018vpt0761khlcc","_id":"clqz6m15j001dvpt0hmi2e9mo"},{"post_id":"clqz6m15h000rvpt00fnx4ped","category_id":"clqz6m15j0018vpt0761khlcc","_id":"clqz6m15k001evpt0axnm5zw7"},{"post_id":"clqz6m15h000vvpt033j37zn3","category_id":"clqz6m15j001cvpt01kwv2f5f","_id":"clqz6m15k001gvpt0c8dv0z5z"},{"post_id":"clqz6m15i000xvpt0841xaltz","category_id":"clqz6m15k001fvpt088782tjx","_id":"clqz6m15k001jvpt05mja45it"},{"post_id":"clqz6m15i0010vpt0a50ic66v","category_id":"clqz6m15j001cvpt01kwv2f5f","_id":"clqz6m15k001kvpt01ximht26"},{"post_id":"clqz6m15i0012vpt07nmwftqs","category_id":"clqz6m15k001ivpt01pp85ox0","_id":"clqz6m15k001lvpt059z5dbv9"}],"PostTag":[],"Tag":[]}}