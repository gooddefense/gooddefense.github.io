<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PicGo图床搭建</title>
    <link href="/2023/04/24/PicGo%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/04/24/PicGo%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="三分钟搭建PicGo图床"><a href="#三分钟搭建PicGo图床" class="headerlink" title="三分钟搭建PicGo图床"></a>三分钟搭建PicGo图床</h1><p>参考链接：<a href="https://www.bilibili.com/video/BV1Ui4y1x7Cq/?spm_id_from=333.337.search-card.all.click">跳转至Bilibili</a></p><p>原本是打算使用Gitee作为图床仓库的，但是gitee对图床仓库做了限制，最后还是选择Github作为仓库。</p><p>当然，除了Github，也可以选择其他的方式做图床仓库。（建议百度）</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p> <em><strong>建议科学上网，否则网速真的很慢</strong></em></p><ol><li>登录Github账号，点击右上角的+号<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.47.25.png" alt="截图"></li><li>在加号的下拉列表中，选择<strong>New repository</strong>–创建新仓库<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.51.30.png" alt="创建新仓库"></li><li>进入创建新仓库列表，输入新仓库的名字，剩下的按照下图配置即可，点击Create repository<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2019.53.48.png" alt="配置新仓库"></li></ol><p><em><strong>做完以上步骤，先下载PicGo，获取密钥可以在下载PicGo之后进行</strong></em></p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p> <em><strong>还是建议科学上网，下载速度会快很多</strong></em></p><p> 建议直接去官方下载链接下载，根据自己电脑的系统选择对应的安装包：<a href="https://github.com/Molunerfinn/PicGo/releases">官方下载链接 </a></p><h3 id="下载时碰到的问题和解决办法"><a href="#下载时碰到的问题和解决办法" class="headerlink" title="下载时碰到的问题和解决办法"></a>下载时碰到的问题和解决办法</h3><p>在使用macbook安装PicGo时，安装完成后点击启动台的PicGo图标后，显示文件损坏，无法打开。<br>报错信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">PicGo已损坏，无法打开。 您应该将它移到废纸篓。<br></code></pre></td></tr></table></figure><p><strong>解决办法：</strong><br>在终端输入命令（注意最后有一个空格）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo xattr -r -d com.apple.quarantine <br></code></pre></td></tr></table></figure><p><em><strong>先不要按回车！(重要的事情说三遍)</strong></em><br>打开 “访达”（Finder）进入 “应用程序” 目录，找到软件图标，将图标拖到刚才的终端窗口里面，会得到如下结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app<br></code></pre></td></tr></table></figure><p>回到终端窗口按回车，输入系统密码回车即可正常使用</p><h3 id="设置PicGo"><a href="#设置PicGo" class="headerlink" title="设置PicGo"></a>设置PicGo</h3><p> 下载完成之后，进入界面，选择图床设置-&gt;Github<br> <img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.03.57.png" alt="图床设置"></p><p> 设定仓库按照上图所示填写：<strong>用户名/仓库名</strong><br> 分支名填main或者master都可以<br> token：从Github上获取</p><p> <em><strong>这里如何获取token？</strong></em></p><ol><li>点击用户头像，点击下拉列表的Settings-设置选项<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.07.30.png"> </li><li>点击左边列表的Developer settings<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.09.16.png"></li><li>点击Personal access tokens-&gt;Tokens(classic)<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.11.19.png"></li><li>点击Generate new token<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.13.19.png"></li><li>输入Note，Select scopes选择repo即可,点击Generate token,即可生成token<br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.15.26.png"></li><li>将生成的token复制粘贴到PicGo上，点击确认，即可开始使用图床</li></ol><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><strong>Github仓库截图：</strong><br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.19.01.png" alt="Github仓库截图"></p><p><strong>markdown截图：</strong><br><img src="https://raw.githubusercontent.com/gooddefense/picture_bed/main/%E6%88%AA%E5%B1%8F2023-04-24%2020.20.26.png"></p><p><em><strong>这样子，一个使用方便的图床就搭建好了！</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>编程语言及工具笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2023/04/08/git/"/>
    <url>/2023/04/08/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>有一个我觉得非常详细的教程，就贴在这里：<br><a href="https://blog.csdn.net/qq_52102933/article/details/120387246?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8git&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120387246.142%5Ev82%5Einsert_down38,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">git安装详细教程（CSDN）</a><br>按照上面的教程一步一步来安装，基本上是没有问题的。</p><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>暂时先晾在这，后面再整理</p><h2 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h2><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><h2 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h2><p>Git的作用是什么？<strong>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</strong></p><p>常用的命令有以下六个命令：</p><ul><li>git clone</li><li>git push</li><li>git add</li><li>git commit</li><li>git checkout</li><li>git pull</li></ul><h2 id="Git创建仓库"><a href="#Git创建仓库" class="headerlink" title="Git创建仓库"></a>Git创建仓库</h2><p>初始化一个仓库的命令：</p><ul><li>如果使用当前目录作为Git仓库，使用以下命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure></li><li>如果使用指定目录作为git仓库，使用以下命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init newrepo<br><br>newrepo是指定目录的路径<br></code></pre></td></tr></table></figure>初始化后，会在newrepo下生成 <strong>.git</strong>的目录，<strong>这个目录存放着所有Git需要的数据和资源</strong>。如果在当前目录中，有几个文件是需要纳入Git当中的话，需要先用git add命令告诉 Git 开始对这些文件进行跟踪，然后再进行提交。</li></ul><hr><p>创建仓库可以在空目录下，也可以在非空目录下。<strong>非空目录</strong>下，使用<strong>git add</strong>命令将仓库下的所有文件放入Git中，进行提交即可；<strong>空目录</strong>下，要么就是自己添加文件，让仓库“不空”，要么就是将别的仓库复制下来放进该仓库中，这就叫做克隆。</p><p>克隆仓库的命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;repo</span>&gt;<br><br><span class="hljs-tag">&lt;repo&gt;</span> 是仓库的http地址<br></code></pre></td></tr></table></figure><p>上面这条克隆命令，是将 <strong>repo</strong>地址下的仓库克隆到了当前目录。</p><p>将仓库克隆到指定目录下的命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">git clone <span class="hljs-tag">&lt;<span class="hljs-name">repo</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">repo</span>&gt;</span>是仓库的http地址<br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>是本地目录<br></code></pre></td></tr></table></figure><p>执行了克隆命令后，会在当前目录下创建一个<strong>以克隆的仓库名为文件名的新目录</strong>，新目录下包含一个 <strong>.git</strong>文件，这里的 <strong>.git</strong>文件用于保存下载下来的所有版本记录。</p><p>如果想要自己定义新目录的名称，可以输入以下命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;repo</span>&gt; 自定义名<br></code></pre></td></tr></table></figure><hr><p>做完上述的操作之后，就已经可以对远程仓库进行编辑了。不过，这里的编辑只是对克隆至本地的远程仓库进行编辑，如果想要让远程仓库也发生修改的话，就需要将修改过的本地文件回传。这个回传需要我们进行一些配置。</p><p>git的配置的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config<br></code></pre></td></tr></table></figure><p><strong>编辑git的配置文件</strong><br><strong>只针对当前仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config -e  <br></code></pre></td></tr></table></figure><p><strong>针对本地上的所有仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config -e -global<br></code></pre></td></tr></table></figure><p><strong>设置提交代码时的用户信息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config -global user.name &quot;username&quot;<br>git config -global user.email user@useremail.com <br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意这里的-global去掉的话，命令只会对当前仓库有效</span><br></code></pre></td></tr></table></figure><h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><p>有一张图可以说明Git分支管理的模式<br><img src="https://static.runoob.com/images/svg/git-brance.svg" alt="git分支管理"></p><p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p><strong>创建分支的命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch (branchname)<br></code></pre></td></tr></table></figure><p><strong>切换分支的命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout (branchname)<br></code></pre></td></tr></table></figure><p>这里还有一种情况：需要创建一个新分支的同时切换到新分支下，执行以下命令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> (branchname)<br></code></pre></td></tr></table></figure><hr><p>这里会有一个问题：在进行切换分支时，Git会将该分支最后提交的快照来替换你工作目录的内容，所以说多个分支不需要多个目录</p><p><strong>合并分支的命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge<br></code></pre></td></tr></table></figure><p><strong>删除分支的命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -d (branchname)<br></code></pre></td></tr></table></figure><h2 id="Git查看提交历史"><a href="#Git查看提交历史" class="headerlink" title="Git查看提交历史"></a>Git查看提交历史</h2><p><strong>常用的一般有两个命令：</strong></p><ul><li>git log —查看历史提交记录 </li><li>git blame &lt; blame&gt; —以列表形式查看指定文件的历史修改记录</li></ul><p><strong>git log</strong><br><strong>查看历史记录的简洁的版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -oneline<br></code></pre></td></tr></table></figure><p><strong>查看历史中什么时候出现了分支、合并</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -graph -oneline<br></code></pre></td></tr></table></figure><p><strong>逆向显示所有日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -reverse -oneline<br></code></pre></td></tr></table></figure><p><strong>查找指定用户的提交日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -author=name -oneline<br></code></pre></td></tr></table></figure><p><strong>指定日期，可以执行几个选项：–since 和 –before，也可以用 –until 和 –after</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -oneline -before=&#123;2.weeks.ago&#125; -after=&#123;2021-04-09&#125; <br></code></pre></td></tr></table></figure><p><strong>还有很多git log命令，可以进入这个网站进行查询：</strong><a href="https://git-scm.com/docs/git-log">Git log命令</a></p><hr><p><strong>git blame</strong><br>作用是：<strong>查看指定文件的修改记录</strong></p><h2 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h2><p>创建一个带注解的标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag -a v1.1<br></code></pre></td></tr></table></figure><p>查看所有标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag<br></code></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag -a &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag -s &lt;tagname&gt; -m &quot;标签内容&quot;<br></code></pre></td></tr></table></figure><h2 id="Git-和-Github"><a href="#Git-和-Github" class="headerlink" title="Git 和 Github"></a>Git 和 Github</h2><p>上面的Git命令都是在本地执行，有些时候，我们需要将自己的代码分享给其他人或者和别人一起开发，那么这个时候，我们就需要将代码放入一个大家或者双方都可以访问的地方，比如说Github，Gitee。<br><img src="https://www.runoob.com/wp-content/uploads/2015/03/Git-push-command.jpeg" alt="Github"></p><p><strong>这里将Github作为远程仓库，记录用Git连接Github的过程</strong></p><p><em><strong>未完待续</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>编程语言及工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2023/03/27/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/03/27/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每次做完一个项目，我都比较喜欢用文档的形式记录项目过程，一般我都是使用markdown语法来编写我的项目文档。我在使用过程中，对于部分的格式语法并不是这么了解，为了以后的方便，现在重新学习一下。</p><p>学习的参考网址在这里： <a href="https://www.runoob.com/markdown/md-tutorial.html">markdown语法教程</a></p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p><strong>vscode</strong><br>市面上的markdown语法编辑器有很多种，比如说typora，vscode等等，本人一般使用vs code来编写markdown文档，主要原因可能是因为typora要收费吧。。。</p><h3 id="一个关于markdown的插件"><a href="#一个关于markdown的插件" class="headerlink" title="一个关于markdown的插件"></a>一个关于markdown的插件</h3><p>名字叫做 <strong>Markdown Preview Enhanced</strong><br>这个插件是菜鸟教程上推荐的一款插件，他可以实时预览文章效果，同时你在预览框内点击右键，就可以输出你想要的文件格式，比如说PDF，html等等，算是一个好用的插件。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ol><li>使用 = 和 - 标记一级和二级标题<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">我展示的是一级标题</span><br><span class="hljs-section">==================</span><br><span class="hljs-section">我展示的是二级标题</span><br><span class="hljs-section">------------------</span><br></code></pre></td></tr></table></figure></li><li>使用 # 号标记<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure></li></ol><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>markdown语法里对于段落并没有特殊的语法，直接编辑文字即可<br><strong>注意：段落的换行是使用两个以上空格加上回车，也可以在段落后面使用一个空行来表示重新开始一个段落</strong>  </p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体文字*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-emphasis">__粗体文本__</span><br><span class="hljs-strong">***粗斜体文本**</span>*<br><span class="hljs-emphasis">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>用三个以上的星号，减号，底线即可建立分隔线</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>在文字的两端加上两个波浪线 ~~ 即可</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>通过html中的**&lt; u&gt;**来实现<br>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：<br><u>带下划线文本</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是什么？<br>脚注是对文本的补充说明<br>在markdown语法中，脚注的语法格式为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[^要注明的文本]</span><br></code></pre></td></tr></table></figure><p>实例演示：<br>输入的语法格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">勒布朗.詹姆斯[^简介]<br>[<span class="hljs-symbol">^简介</span>]: <span class="hljs-link">一位著名的篮球运动员</span><br></code></pre></td></tr></table></figure><p>实际效果演示：</p><p>勒布朗.詹姆斯[^简介]。<br> [^简介]: 美国nba篮球运动员</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>无序列表<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure></li></ol><p>显示效果：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ol start="2"><li>有序列表<br>使用数字并加上 . 号来表示<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure></li></ol><p>显示效果：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>列表嵌套</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">    -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">    -</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure><p>显示效果：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">洛杉矶湖人队</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">勒布朗.詹姆斯</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">安东尼.戴维斯</span><br></code></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>洛杉矶湖人队<br>勒布朗.詹姆斯<br>安东尼.戴维斯</p></blockquote><p><em><strong>区块之间可以进行嵌套</strong></em></p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">洛杉矶湖人队</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 勒布朗.詹姆斯</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 小前锋</span><br></code></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>洛杉矶湖人队</p><blockquote><p>勒布朗.詹姆斯</p><blockquote><p>小前锋</p></blockquote></blockquote></blockquote><p><em><strong>在区块中使用列表</strong></em></p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">任务列表</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 第一项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 第二项</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 吃饭</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">+ 睡觉</span><br></code></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>任务列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>吃饭</li><li>睡觉</li></ul></blockquote><p><em><strong>在列表中使用区块</strong></em></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>第一项<br><span class="hljs-code">    &gt; 吃饭</span><br><span class="hljs-code">    &gt; 睡觉</span><br><span class="hljs-bullet">* </span>第二项<br></code></pre></td></tr></table></figure><p>显示效果：</p><ul><li>第一项<blockquote><p>吃饭<br>睡觉</p></blockquote></li><li>第二项</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><em><strong>函数名或者小的代码片段</strong></em><br>当你想把一个函数名或者一个小片段的代码给打上标记，你可以使用反引号将代码片段包起来。</p><p>类似于下面的效果<br><code>exit()</code>函数</p><p><em><strong>代码区块</strong></em></p><ol><li>Tab键或4个空格<br>当有一长串的代码需要记录时，直接输入可能会让格式变得不这么好看，markdown语法提供了专门的格式来承载代码。就是用4个空格或者一个Tab键</li></ol><p>显示效果</p><pre><code class="hljs">#include &lt;stdio.h&gt;int main()&#123;    printf(&quot;Hello world!\n&quot;);    return 0;&#125;</code></pre><ol start="2"><li>用两个```包裹<br>显示效果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>有些时候，我们需要将链接引入到文档中，方便我们查看。<br>链接的使用方法是：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接名称]</span>(链接地址)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><p>显示效果：<br><a href="https://www.baidu.com/">百度首页</a></p><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p><em><strong>高级链接</strong></em><br>相当于将网站地址当成一个变量，在文字的末尾对变量进行赋值。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less">这个链接是百度的官网<span class="hljs-selector-attr">[百度]</span><br><span class="hljs-selector-attr">[1]</span><br>这个链接是<span class="hljs-selector-tag">google</span>的官网<span class="hljs-selector-attr">[google]</span><span class="hljs-selector-attr">[2]</span><br><br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.baidu.com</span><br><span class="hljs-selector-attr">[2]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.google.com</span><br></code></pre></td></tr></table></figure><p>显示效果：<br>这个链接是百度的官网<a href="https://www.baidu.com/">百度官网</a><br>这个链接是google的官网<a href="https://www.google.com/">google官网</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2>]]></content>
    
    
    <categories>
      
      <category>编程语言及工具笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习笔记</title>
    <link href="/2023/03/27/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/27/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言学习笔记"><a href="#C语言学习笔记" class="headerlink" title="C语言学习笔记"></a>C语言学习笔记</h1>]]></content>
    
    
    <categories>
      
      <category>编程语言及工具笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>科学上网</title>
    <link href="/2023/03/10/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2023/03/10/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用51单片机控制SG90舵机</title>
    <link href="/2023/03/07/%E7%94%A851%E5%8D%95%E7%89%87%E6%9C%BA%E6%8E%A7%E5%88%B6SG90%E8%88%B5%E6%9C%BA/"/>
    <url>/2023/03/07/%E7%94%A851%E5%8D%95%E7%89%87%E6%9C%BA%E6%8E%A7%E5%88%B6SG90%E8%88%B5%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>​<br>什么是舵机？<br>这是来自百度的解释：舵机是一种位置（角度）伺服的驱动器，适用于那些需要角度不断变化并可以保持的控制系统。</p><p>百度上还有很大一部分解释，但我觉得那都是放屁，看再多解释不如一张实物图来的实在。</p><p><img src="https://img-blog.csdnimg.cn/e2d71134874f48d0a5bdde0b6c504943.png"></p><p>怎么驱动这个东西？<br>PWM信号</p><p>什么是PWM信号？<br>PWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进<br>行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通<br>过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的<br>时间占据整个信号周期的百分比，例如方波的占空比就是50%.<br>使用PWM来控制舵机，理解占空比是关键。<br><img src="https://img-blog.csdnimg.cn/91e48be45b4745d5bdcc3a5cc2258414.jpeg"></p><p>如何实现PWM信号输出？<br>有一些芯片上是集成了PWM的，这可以在芯片手册和原理图上看出来。在这里，因为我使用的51芯片并没有PWM的管脚，所以我是用的软件来实现信号输出。当然，这种输出方式肯定是没有硬件PWM那么好，软件会存在一定的误差。</p><p>怎么控制舵机？<br>向黄色信号线“灌入”PWM信号</p><p><img src="https://img-blog.csdnimg.cn/f8d5882f9cc94fcb8c725244711c9a5e.png"></p><p>怎么让舵机转动多少度这个问题，其实很简单。我的解决方法是，直接用现成的数据不就好了吗。</p><p> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p><p>1.0ms————45度； 5.0% 对应函数中占空比为500</p><p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>编程实现<br>用51单片机使舵机运动起来，其实也挺简单的。用一个小实验来看看怎么让舵机动起来。这个小实验要让舵机每隔两秒转动一次。除了要用到PWM，还要用到定时器和中断。</p><p>先来配置定时器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Time0Init</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//定时器模式选择</span><br>    TMOD = <span class="hljs-number">0X01</span>;<br>    <span class="hljs-comment">//给定初始值  我们先定一个0.5ms</span><br>    TL0 = <span class="hljs-number">0X33</span>;<br>    TH0 = <span class="hljs-number">0XFE</span>;<br>    <span class="hljs-comment">//开启定时器</span><br>    TF0 = <span class="hljs-number">0</span>;<br>    TR0 = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定时器开启了，但这还没完。我们还需要用到中断，因为定时器每到0.5ms的时候就会溢出，需要CPU响应中断才可以将溢出标志位清0。刚好定时器0就有中断寄存器，可以实现中断响应。</p><p>所以完整的定时器配置应该是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Time0Init</span><span class="hljs-params">()</span><br>&#123;<br>    TMOD = <span class="hljs-number">0X01</span>;<br>    TL0 = <span class="hljs-number">0X33</span>;<br>    TH0 = <span class="hljs-number">0XFE</span>;<br>    TR0 = <span class="hljs-number">1</span>;<br>    TF0 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//开启定时器0中断</span><br>    ET0 = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//开启总中断</span><br>    EA = <span class="hljs-number">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>有中断了，那自然就要有中断处理函数吧。定时器爆表的时间是0.5ms，上面说的占空比和让舵机转动角度的数据就派上用场了：</p><p>占空比：</p><p>就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比<br> 0.5ms————-0度； 2.5% 对应函数中占空比为250</p><p>1.0ms————45度； 5.0% 对应函数中占空比为500</p><p>1.5ms————90度； 7.5% 对应函数中占空比为750<br>2.0ms———–135度； 10.0% 对应函数中占空比为1000<br>2.5ms———–180度； 12.5% 对应函数中占空比为1250<br>中断处理函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Time0Handler</span><span class="hljs-params">()</span> interrupt 1<br>&#123;<br>    cnt++;  <span class="hljs-comment">//统计爆表次数</span><br>    <span class="hljs-comment">//重新给初值：因为CPU响应中断之后，中断处理函数才会被执行，这个时候TL0和TH0都需要重新赋值</span><br>    TL0 = <span class="hljs-number">0X33</span>;<br>    TH0 = <span class="hljs-number">0XFE</span>;<br>    <span class="hljs-keyword">if</span>(cnt &lt; jd)   <span class="hljs-comment">//jd  角度</span><br>    &#123;<br>        sg90_con = <span class="hljs-number">1</span>;  <span class="hljs-comment">//给舵机高电平</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        sg90_con = <span class="hljs-number">0</span>;  <span class="hljs-comment">//给舵机低电平</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">40</span>)   <span class="hljs-comment">//一个周期20ms   0.5*40</span><br>    &#123;<br>        cnt = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    jd = <span class="hljs-number">1</span>;<br>    Time0Init();  <span class="hljs-comment">//定时器初始化</span><br>    sg90_con = <span class="hljs-number">1</span>; <span class="hljs-comment">//舵机初始状态是高电平</span><br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123; <br>        jd = <span class="hljs-number">3</span>;    <span class="hljs-comment">//转动90度</span><br>        cnt = <span class="hljs-number">0</span>;<br>        Delay2000ms();<br>        jd = <span class="hljs-number">1</span>;<br>        cnt = <span class="hljs-number">0</span>;<br>        Delay2000ms();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>全部代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;reg52.h&quot;</span></span><br><br>sbit sg90_con = P1^<span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> jd;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay2000ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;<br><br><br>i = <span class="hljs-number">15</span>;<br>j = <span class="hljs-number">2</span>;<br>k = <span class="hljs-number">235</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">while</span> (--k);<br>&#125; <span class="hljs-keyword">while</span> (--j);<br>&#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay300ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;<br><br><br>i = <span class="hljs-number">3</span>;<br>j = <span class="hljs-number">26</span>;<br>k = <span class="hljs-number">223</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">while</span> (--k);<br>&#125; <span class="hljs-keyword">while</span> (--j);<br>&#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Time0Init</span><span class="hljs-params">()</span><br>&#123;<br><br>TMOD = <span class="hljs-number">0X01</span>;<br><br>TH0 = <span class="hljs-number">0XFE</span>;<br>TL0 = <span class="hljs-number">0X33</span>;<br><br>TR0 = <span class="hljs-number">1</span>;<br>TF0 = <span class="hljs-number">0</span>;<br><br>ET0 = <span class="hljs-number">1</span>;<br><br>EA = <span class="hljs-number">1</span>;<br><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-number">1</span><br>jd = <span class="hljs-number">1</span>;  <br>Time0Init();  <br>sg90_con = <span class="hljs-number">1</span>;  <br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>jd = <span class="hljs-number">3</span>; <br>cnt = <span class="hljs-number">0</span>;<br>Delay2000ms();<br>jd = <span class="hljs-number">1</span>; <br>cnt = <span class="hljs-number">0</span>;<br>Delay2000ms();<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Time0Handler</span><span class="hljs-params">()</span> interrupt 1<br>&#123;<br>cnt++;  <br><br>TH0 = <span class="hljs-number">0XFE</span>;<br>TL0 = <span class="hljs-number">0X33</span>;<br><span class="hljs-keyword">if</span>(cnt &lt; jd)   <br>&#123;<br>sg90_con = <span class="hljs-number">1</span>; <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>sg90_con = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">40</span>)   <br>&#123;<br>cnt = <span class="hljs-number">0</span>;<br>sg90_con = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
    <categories>
      
      <category>51单片机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客自定义</title>
    <link href="/2023/03/07/hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <url>/2023/03/07/hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h2><p>Hexo博客支持很多种主题，这里的话只记录Next主题的配置方法</p><h3 id="Next主题的安装和配置"><a href="#Next主题的安装和配置" class="headerlink" title="Next主题的安装和配置"></a>Next主题的安装和配置</h3><ol><li>在博客主目录下执行<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theme-next/</span>hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure></li><li>配置_config.yml文件<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">theme:</span><span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure></li><li>Next主题有几种风格：Muse、Mist、Pisces、Gemini，同样可以通过配置_config.yml来实现主题的切换</li></ol><ul><li><strong>注意：这里的_config.yml文件路径是在:/blog/themes/next/_config.yml</strong><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts">    override：false <span class="hljs-meta">#表示是否将主题置为默认样式</span><br><span class="hljs-symbol">cache:</span><br><span class="hljs-symbol">enable:</span>true <span class="hljs-meta">#表示添加缓存功能，这样浏览器后续打开我们的博客网站会更快</span><br><span class="hljs-symbol">menu:</span> <span class="hljs-meta">#设置博客各个页面的相对路径，默认根路径是blog/source</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  about:</span> <span class="hljs-keyword">/about/</span> || user<br><span class="hljs-symbol">  tags:</span> <span class="hljs-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  categories:</span> <span class="hljs-keyword">/categories/</span> || th<br><span class="hljs-symbol">  archives:</span> <span class="hljs-keyword">/archives/</span> || archive<br>  <span class="hljs-meta">#schedule: /schedule/ || calendar #日历</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap #站点地图，供搜索引擎爬取</span><br>  <span class="hljs-meta">#commonweal: /404/ || heartbeat # 腾讯公益404</span><br><br><span class="hljs-meta"># Enable/Disable menu icons / item badges.</span><br><span class="hljs-symbol">menu_settings:</span><br><span class="hljs-symbol">  icons:</span> true <span class="hljs-meta"># 是否显示各个页面的图标</span><br><span class="hljs-symbol">  badges:</span> true <span class="hljs-meta"># 是否显示分类/标签/归档页的内容量</span><br><span class="hljs-meta"># Schemes</span><br><span class="hljs-symbol">scheme:</span> Gemini<br></code></pre></td></tr></table></figure><h3 id="Next各种新鲜玩法"><a href="#Next各种新鲜玩法" class="headerlink" title="Next各种新鲜玩法"></a>Next各种新鲜玩法</h3>目前本博客还没有加入很多的插件，这里只记录本站加入的插件的办法</li></ul><ol><li>在每篇文章末尾统一添加“本文结束”标记\</li></ol><p><strong>实现效果图:</strong><br><img src="https://blogdata-1258545379.cos.ap-shanghai.myqcloud.com/20190124/1548274181405.png"><br><strong>实现方法：</strong></p><ol><li>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> not is_index %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>感谢您的阅读-------------<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>接着打开路径\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码（post-footer之前两个大括号）<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">&#123;%- if not is_index %&#125;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">partial</span></span>(<span class="hljs-name">&#x27;_macro/passage-end-tag.swig&#x27;</span>) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#123;%- endif %&#125;</span><br></code></pre></td></tr></table></figure></li><li>打开初始路径下的主题配置文件_config.yml,在末尾添加以下代码：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 文章末尾添加“本文结束”标记</span><br><span class="hljs-attr">passage_end_tag:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>完成后即可显示对应标记</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/qq_51513895/article/details/120065812?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167587559916782425187391%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167587559916782425187391&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120065812-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0&spm=1018.2226.3001.4187">hexo博客如何写作和更新</a><br><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167596487316782425182334%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167596487316782425182334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-86661502-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187">hexo博客优化和美化</a><br><a href="https://blog.csdn.net/weixin_59197425/article/details/125407632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167580152016800211583204%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167580152016800211583204&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125407632-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=mac%E5%88%B7%E6%96%B0dns&spm=1018.2226.3001.4187">macOS刷新DNS</a><br><a href="https://blog.csdn.net/qq_39181839/article/details/109477607?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167600792016800184181004%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167600792016800184181004&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109477607-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=hexo%E5%88%86%E7%B1%BB&spm=1018.2226.3001.4187">hexo攻略添加分类和标签</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html">hexo美化加强版</a></p><h2 id="fluid主题"><a href="#fluid主题" class="headerlink" title="fluid主题"></a>fluid主题</h2><p>参考文档—<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">fluid主题用户手册</a><br><strong>具体配置参考用户手册即可</strong></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>更新日志</title>
    <link href="/2023/02/15/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <url>/2023/02/15/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><h2 id="2023年2月16号-更新"><a href="#2023年2月16号-更新" class="headerlink" title="2023年2月16号 更新"></a>2023年2月16号 更新</h2><p>此次更新主要是完善文章内容，添加配置<br>更新内容如下：</p><ol><li>新增更新日志</li><li>更新博客说明</li><li>添加分类：博客介绍及更新日志</li><li>更新文章：个人博客搭建教程及避坑指南</li><li>每篇文章末尾统一添加“本文结束”标记</li></ol><h2 id="2023年3月7号-更新"><a href="#2023年3月7号-更新" class="headerlink" title="2023年3月7号 更新"></a>2023年3月7号 更新</h2><ol><li>简化文章结构</li><li>添加51单片机分类，Linux分类，全志h616分类<h2 id="2023年3月9号-更新"><a href="#2023年3月9号-更新" class="headerlink" title="2023年3月9号 更新"></a>2023年3月9号 更新</h2></li><li>使用新主题：Fluid</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客介绍及更新日志</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的博客说明</title>
    <link href="/2023/02/10/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/02/10/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="记录内容的范围"><a href="#记录内容的范围" class="headerlink" title="记录内容的范围"></a>记录内容的范围</h2><ol><li>生活</li><li>学习</li><li>敲代码</li><li>娱乐<h2 id="后续的优化"><a href="#后续的优化" class="headerlink" title="后续的优化"></a>后续的优化</h2>本博客主要用途为记录，后续博客更新将以更新内容和添加配置为主</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客介绍及更新日志</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建教程及避坑指南</title>
    <link href="/2023/02/09/readme/"/>
    <url>/2023/02/09/readme/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建一个个人博客"><a href="#搭建一个个人博客" class="headerlink" title="搭建一个个人博客"></a>搭建一个个人博客</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">本文记录用hexo搭建个人博客的过程和避坑指南，会持续更新和完善<br></code></pre></td></tr></table></figure><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>搭建环境：macOS<br>md文件编辑器；vs code<br>如何使用markdown语言编写博客：<a href="https://www.runoob.com/markdown/md-table.html">markdown教程</a><br>博客GitHub地址：<a href="https://github.com/gooddefense/gooddefense.github.io">点击跳转</a></p><h3 id="作者想说"><a href="#作者想说" class="headerlink" title="作者想说"></a>作者想说</h3><p>今天闲着没事干，玩了一下当下很火的ChatGPT。ChatGPT是一个智能聊天机器人程序，我体验了一下，基本上我问的问题，CharGPT都可以很准确的给到我答案，它也可以处理一下有难度的工作，比如写文章，写代码，处理文档等等。在这期间，我问了它一个问题，就是如何搭建个人博客，它给出的答案是用框架来搭建。我之前对这些框架的了解比较少，对这一类框架也比较好奇。为了满足自己的好奇心，我决定试一试这些博客框架。</p><p><a href="https://blog.csdn.net/weixin_41160054/article/details/89531921?ops_request_misc=&request_id=&biz_id=102&utm_term=mac%E4%BD%BF%E7%94%A8hexo%E2%80%94%E2%80%94script&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-89531921.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&spm=1018.2226.3001.4187">参考链接</a></p><h2 id="可能会用到的一些异常解决办法-持续更新"><a href="#可能会用到的一些异常解决办法-持续更新" class="headerlink" title="可能会用到的一些异常解决办法(持续更新)"></a>可能会用到的一些异常解决办法(持续更新)</h2><p><strong>提示：这里只记录作者在碰到此类问题时的解决办法，若以下方法没有解决问题，请自行查阅网上相关资料</strong></p><h3 id="输入指令后长时间没有响应"><a href="#输入指令后长时间没有响应" class="headerlink" title="输入指令后长时间没有响应"></a>输入指令后长时间没有响应</h3><p>碰到以下情况：</p><ul><li>输入指令<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span><br>git pull<br></code></pre></td></tr></table></figure></li><li>出现长时间无法登陆GitHub</li></ul><p><strong>解决办法：</strong></p><p>刷新DNS缓存：<br>在终端输入以下指令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo killall -HUP mDNSResponder</span><br></code></pre></td></tr></table></figure><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">我最后选择用hexo来搭建我的个人博客，至于为什么不用wordPress或者其他的，我只能说hexo打的字少，其他的字多我懒得打。<br></code></pre></td></tr></table></figure><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><ul><li>登录GitHub账号，如果没有的话就先注册一个</li><li>登录成功之后，进入到个人主页，点击Repositories,这一个页面就是仓库；点击右上角的New按钮可以进入创建仓库界面，自行填写相关参数就可以了</li></ul><h3 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h3><ol><li>打开终端，输入命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh    <span class="hljs-comment">#进入电脑下的ssh文件</span><br></code></pre></td></tr></table></figure></li><li>生成新的SSH keys<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;你的邮箱地址&quot;</span><br></code></pre></td></tr></table></figure>执行此条命令后，最后出现类似长方形的字符画即表示成功。</li><li>将SSH keys添加进Github</li></ol><ul><li>打开刚刚生成的文件.ssh/id_rsa.pub(可以用VSCode打开查看)</li><li>复制所有内容</li><li>进入Github-&gt;点击头像栏的settings-&gt;选择SSH and GPG keys-&gt;点击New SSH Key-&gt;将内容复制进key-&gt;点击add SSH Key</li></ul><ol start="4"><li>进行测试，输入以下指令：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@GitHub</span>.com <span class="hljs-comment">#全部复制，无需更改</span><br></code></pre></td></tr></table></figure>接下来会出现<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">The</span> authenticity of host &#x27;GitHub.com (<span class="hljs-number">207.97.227.239</span>)&#x27; can&#x27;t be established.<br><span class="hljs-attribute">RSA</span> key fingerprint is <span class="hljs-number">16</span>:<span class="hljs-number">27</span>:ac:a5:<span class="hljs-number">76</span>:<span class="hljs-number">28</span>:<span class="hljs-number">2</span>d:<span class="hljs-number">36</span>:<span class="hljs-number">63</span>:<span class="hljs-number">1</span>b:<span class="hljs-number">56</span>:<span class="hljs-number">4</span>d:eb:df:a6:<span class="hljs-number">48</span>.<br><span class="hljs-attribute">Are</span> you sure you want to continue connecting (yes/no)?&lt;输入yes&gt;<br><span class="hljs-attribute">Hi</span> 你的用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>出现以上提示，则证明添加SSH Keys成功</li><li>测试Github Pages是否创建成功，输入以下命令：<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">echo</span> <span class="hljs-string">&quot;# 你的用户名.github.io&quot;</span> &gt;&gt; README.md<br><span class="hljs-symbol">git</span> init    <br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> README.md<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;first commit&quot;</span><br><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/你的用户名/你的用户名.github.io.git</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin master<br></code></pre></td></tr></table></figure>之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。</li></ol><h3 id="安装nvm-避坑"><a href="#安装nvm-避坑" class="headerlink" title="安装nvm(避坑)"></a>安装nvm(避坑)</h3><pre><code class="hljs">这里需要注意，先安装好nvm，再去安装nodejs</code></pre><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>nodejs如果使用官网提供的安装包安装的话，在安装hexo-cli时可能会出现报错<br><img src="https://img-blog.csdnimg.cn/20190430205745353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE2MDA1NA==,size_16,color_FFFFFF,t_70" alt="引用自csdn"><br>导致出现以上问题的原因是因为，我们没有权限将hexo写入到.npm-global里面</li></ul><h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><ul><li>开始之前先确认node和npm都已经卸载完成</li><li>从github上获取nvm最新下载命令进行下载<br><a href="https://github.com/nvm-sh/nvm">nvm github网址</a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这里会碰到一个问题，在终端输入nvm最新的下载命令后，会提示报错信息。<br>解决方案如下：<br><span class="hljs-bullet">1.</span> 进入该网址： https://www.ipaddress.com/ <br><span class="hljs-bullet">2.</span> 查询拒绝访问的网址的IP地址，拉到最下面，复制下来<br><span class="hljs-bullet">3.</span> 终端输入：sudo vim /etc/hosts<br><span class="hljs-bullet">4.</span> 在文件最后输入：（IP地址）（网址）<br><span class="hljs-bullet">5.</span> 保存文件后，重新执行最新下载命令即可<br><span class="hljs-bullet">6.</span> 重新执行下载命令，可能会有连接超时的问题，多执行几次或者等网络好一点的时候再执行就可以解决<br><span class="hljs-bullet">7.</span> 成功下载完成之后，终端可能会提示需要配置环境变量，这个时候只需要按照提示进行配置即可。<br><span class="hljs-bullet">8.</span> 输入：nvm -v查看版本号，有显示说明安装成功<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/0db881b72f69436f9cab7390c608a152.png"></li></ul><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><ul><li>在nvm安装完成的基础上，执行命令：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">nvm install <span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure>等待完成即可<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3></li><li>执行以下代码：<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli<br>hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></li><li>测试hexo是否可以运行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br>hexo s<br></code></pre></td></tr></table></figure>在浏览器上输入**<a href="http://localhost:4000/**%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%EF%BC%8C%E5%88%99%E8%AF%81%E6%98%8E%E6%88%90%E5%8A%9F">http://localhost:4000/**，如果显示网页，则证明成功</a><br>当然，现在这个页面只能在本地进行浏览，所以我们现在需要将hexo通过Github Pages部署到Github服务器<h3 id="部署hexo到Github服务器上"><a href="#部署hexo到Github服务器上" class="headerlink" title="部署hexo到Github服务器上"></a>部署hexo到Github服务器上</h3></li></ul><ol><li>安装hexo-deployer-git<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li>修改_config.yml (路径：/blog/_config.yml)<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> <span class="hljs-params">&lt;repository url&gt;</span> <span class="hljs-meta">#你的 【你的名字】.github.io  这一项目的git地址#</span><br><span class="hljs-symbol">  branch:</span> master <br><span class="hljs-symbol">  message:</span> [message] <span class="hljs-meta">#可不填写#</span><br></code></pre></td></tr></table></figure></li><li>执行命令将hexo部署到服务器上<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure></li></ol><ul><li>如果执行命令后出现错误，就重复执行下列语句<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>执行完毕后，应该就可以在<strong>你的名字.github.io</strong>看到你的网页了</li></ul><h3 id="更新博客文章"><a href="#更新博客文章" class="headerlink" title="更新博客文章"></a>更新博客文章</h3><ol><li>创建新文章<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;新文章&quot;</span><br></code></pre></td></tr></table></figure></li><li>编写文章<br>这里推荐使用vscode，typora也行，但是typora需要付费</li><li>更新main分支<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean <span class="hljs-comment">#可忽略</span><br>hexo generate <span class="hljs-comment">#使刚刚完成写作的文章生成网站静态文件到默认设置的 public 文件夹</span><br>hexo s <span class="hljs-comment">#启动本地服务器</span><br>hexo d <span class="hljs-comment">#一键部署</span><br></code></pre></td></tr></table></figure></li><li>更新hexo分支<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">add </span>-A （此命令用来添加所有文件到暂存区）<br>git commit -m <span class="hljs-string">&quot;新增博客文章&quot;</span>  （此命令用来提交，双引号内可自定义内容，双引号前有空格）<br>git push <span class="hljs-keyword">origin </span>hexo （此命令用来推送hexo分支到Github）<br><span class="hljs-comment"># 此条命令有时候会上传失败，可以使用下面这个命令</span><br><span class="hljs-comment"># git push origin HEAD:hexo</span><br></code></pre></td></tr></table></figure></li></ol><hr><p>搭建教程到这里就结束了，本博客的界面自定义记录在另外一篇文章中–<a href="">Hexo博客自定义</a>，有需要的可以移步观看。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/08/hello-world/"/>
    <url>/2023/02/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
